Start testing: Sep 16 14:45 CDT
----------------------------------------------------------
3/65 Testing: JSONDocument_replaceChild_003_t
3/65 Test: JSONDocument_replaceChild_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/JSONDocument_replaceChild_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/test003.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/JSONDocument_replaceChild_003_t.d
"JSONDocument_replaceChild_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.449252  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.451509  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.451586  1  5 findChild() args  path=<operation>
09-16 14:45:24.459079  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.463487  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.463626  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:45:24.463867  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:45:24.463901  1  5 findChild() Find succeeded.
09-16 14:45:24.467115  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.467191  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.468087  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.468512  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.468569  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.468717  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.468749  1  5 findChild() Find succeeded.
09-16 14:45:24.471181  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.471243  1  5 findChild() args  path=<delta>
09-16 14:45:24.472063  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.472464  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.472519  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.472667  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.472701  1  5 findChild() Find succeeded.
09-16 14:45:24.475047  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.475105  1  5 findChild() args  path=<path>
09-16 14:45:24.475940  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.476354  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.476415  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.476562  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.476595  1  5 findChild() Find succeeded.
09-16 14:45:24.478837  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.478891  1  5 findChild() args  path=<end-state>
09-16 14:45:24.479740  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.480118  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.480173  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.480312  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.480344  1  5 findChild() Find succeeded.
09-16 14:45:24.482657  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.482709  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.483546  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.483922  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.483976  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.484118  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.484151  1  5 findChild() Find succeeded.
09-16 14:45:24.486494  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.486544  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.487400  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.487777  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.487863  1  5 findChild() found child value=int(1)
09-16 14:45:24.488005  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.488036  1  5 findChild() Find succeeded.
09-16 14:45:24.490141  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : [
                1, 
                2, 
                3
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:45:24.490204  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:45:24.490244  1  4 replaceChild() args  path=<document.data>
09-16 14:45:24.491472  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.491507  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.492308  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.492366  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.492745  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:45:24.492850  1  4 replaceChild() found child value=object(...)
09-16 14:45:24.493227  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.493465  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.493512  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.493591  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.493640  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : [
                6, 
                6, 
                8
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:45:24.494713  1 10 matches() JSON buffers are equal.
09-16 14:45:24.494735  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : [
        1, 
        2, 
        3
    ]
}>
09-16 14:45:24.494745  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : [
        1, 
        2, 
        3
    ]
}>
Running test:<replaceChild>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_003_t" end time: Sep 16 14:45 CDT
"JSONDocument_replaceChild_003_t" time elapsed: 00:00:00
----------------------------------------------------------

4/65 Testing: JSONDocument_replaceChild_004_t
4/65 Test: JSONDocument_replaceChild_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/JSONDocument_replaceChild_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/test004.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/JSONDocument_replaceChild_004_t.d
"JSONDocument_replaceChild_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.451488  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.453558  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.453580  1  5 findChild() args  path=<operation>
09-16 14:45:24.460185  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.463938  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.463987  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:45:24.464187  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:45:24.464197  1  5 findChild() Find succeeded.
09-16 14:45:24.467222  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.467235  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.468150  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.468539  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.468559  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.468695  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.468706  1  5 findChild() Find succeeded.
09-16 14:45:24.471143  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.471156  1  5 findChild() args  path=<delta>
09-16 14:45:24.471969  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.472348  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.472367  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.472501  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.472512  1  5 findChild() Find succeeded.
09-16 14:45:24.474800  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.474812  1  5 findChild() args  path=<path>
09-16 14:45:24.475659  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.476093  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.476112  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.476235  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.476245  1  5 findChild() Find succeeded.
09-16 14:45:24.478467  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.478480  1  5 findChild() args  path=<end-state>
09-16 14:45:24.479365  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.479732  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.479751  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.479872  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.479882  1  5 findChild() Find succeeded.
09-16 14:45:24.482150  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.482161  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.483023  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.483378  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.483400  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.483521  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.483531  1  5 findChild() Find succeeded.
09-16 14:45:24.485795  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.485806  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.486691  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.487042  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.487097  1  5 findChild() found child value=int(0)
09-16 14:45:24.487218  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:45:24.487227  1  5 findChild() Find succeeded.
09-16 14:45:24.489363  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data2" : {
            "a" : 1, 
            "b" : [
                1, 
                2, 
                3
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:45:24.489376  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:45:24.489383  1  4 replaceChild() args  path=<document.data>
09-16 14:45:24.490739  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.490756  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.491654  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data2" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.491668  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.492015  1  4 replaceChild() recurse() args childValue=<{
"data2" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:45:24.492027  1  4 replaceChild() recurse() Error: Replace failed fordata, search path =<document.data>.
Running test:<replaceChild>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_004_t" end time: Sep 16 14:45 CDT
"JSONDocument_replaceChild_004_t" time elapsed: 00:00:00
----------------------------------------------------------

1/65 Testing: JSONDocument_replaceChild_001_t
1/65 Test: JSONDocument_replaceChild_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/JSONDocument_replaceChild_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/test001.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/JSONDocument_replaceChild_001_t.d
"JSONDocument_replaceChild_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.449486  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.451539  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.451556  1  5 findChild() args  path=<operation>
09-16 14:45:24.462503  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.466103  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.466152  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:45:24.466351  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:45:24.466361  1  5 findChild() Find succeeded.
09-16 14:45:24.469284  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.469298  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.470265  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.470666  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.470686  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.470815  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.470824  1  5 findChild() Find succeeded.
09-16 14:45:24.473715  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.473728  1  5 findChild() args  path=<delta>
09-16 14:45:24.474527  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.474888  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.474906  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.475027  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.475037  1  5 findChild() Find succeeded.
09-16 14:45:24.477458  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.477470  1  5 findChild() args  path=<path>
09-16 14:45:24.478282  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.478655  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.478674  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.478802  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.478812  1  5 findChild() Find succeeded.
09-16 14:45:24.480979  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.480992  1  5 findChild() args  path=<end-state>
09-16 14:45:24.481817  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.482179  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.482197  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.482318  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.482327  1  5 findChild() Find succeeded.
09-16 14:45:24.484975  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.484986  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.485768  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.486122  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.486141  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.486267  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.486277  1  5 findChild() Find succeeded.
09-16 14:45:24.488626  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.488637  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.489421  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.489780  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.489821  1  5 findChild() found child value=int(1)
09-16 14:45:24.489942  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.489951  1  5 findChild() Find succeeded.
09-16 14:45:24.491997  1  4 replaceChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : {
                "c" : "2", 
                "d" : [
                    2, 
                    5, 
                    6
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.492012  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.492019  1  4 replaceChild() args  path=<document.data>
09-16 14:45:24.498206  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.498229  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.500591  1  4 replaceChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"d" : [
2,
5,
6
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.500608  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.501462  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"d" : [
2,
5,
6
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:45:24.501519  1  4 replaceChild() found child value=object(...)
09-16 14:45:24.503156  1  4 replaceChild() resultDocument=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.503340  1  4 replaceChild() replacedChild=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.503350  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.503423  1 10 operator==() begin _json_buffer=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.503433  1 10 operator==() args  other.__json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.508109  1 10 matches() JSON buffers are equal.
09-16 14:45:24.508146  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : {
        "c" : "2", 
        "d" : [
            2, 
            5, 
            6
        ]
    }
}>
09-16 14:45:24.508151  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : {
        "c" : "2", 
        "d" : [
            2, 
            5, 
            6
        ]
    }
}>
Running test:<replaceChild>
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_001_t" end time: Sep 16 14:45 CDT
"JSONDocument_replaceChild_001_t" time elapsed: 00:00:00
----------------------------------------------------------

2/65 Testing: JSONDocument_replaceChild_002_t
2/65 Test: JSONDocument_replaceChild_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/JSONDocument_replaceChild_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/test002.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/JSONDocument_replaceChild_002_t.d
"JSONDocument_replaceChild_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.453543  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.459969  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.459988  1  5 findChild() args  path=<operation>
09-16 14:45:24.466236  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.470316  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.470367  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:45:24.470563  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:45:24.470573  1  5 findChild() Find succeeded.
09-16 14:45:24.473730  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.473742  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.474526  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.474888  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.474906  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.475027  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.475037  1  5 findChild() Find succeeded.
09-16 14:45:24.477561  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.477572  1  5 findChild() args  path=<delta>
09-16 14:45:24.478373  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.478740  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.478759  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.478891  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.478900  1  5 findChild() Find succeeded.
09-16 14:45:24.481273  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.481283  1  5 findChild() args  path=<path>
09-16 14:45:24.482070  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.482452  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.482471  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.482595  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.482604  1  5 findChild() Find succeeded.
09-16 14:45:24.484827  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.484840  1  5 findChild() args  path=<end-state>
09-16 14:45:24.485640  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.485995  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.486013  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.486128  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.486136  1  5 findChild() Find succeeded.
09-16 14:45:24.488438  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.488448  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.489228  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.489601  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.489618  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.489734  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.489743  1  5 findChild() Find succeeded.
09-16 14:45:24.491994  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.492005  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.492791  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.493142  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.493188  1  5 findChild() found child value=int(1)
09-16 14:45:24.493306  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.493315  1  5 findChild() Find succeeded.
09-16 14:45:24.495610  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1
        }, 
        "data1" : "aa"
    }
}>
09-16 14:45:24.495622  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "aa" : 2
    }
}>
09-16 14:45:24.495628  1  4 replaceChild() args  path=<document.data>
09-16 14:45:24.496184  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.496200  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.496439  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"a" : 1
},
"data1" : "aa"
}
}>
09-16 14:45:24.496452  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.496625  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1
},
"data1" : "aa"
}>
09-16 14:45:24.496684  1  4 replaceChild() found child value=object(...)
09-16 14:45:24.496899  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:45:24.497008  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:45:24.497018  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.497065  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:45:24.497075  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 2
        }, 
        "data1" : "aa"
    }
}>
09-16 14:45:24.497851  1 10 matches() JSON buffers are equal.
09-16 14:45:24.497868  1 10 operator==() begin _json_buffer=<{
    "a" : 1
}>
09-16 14:45:24.497875  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1
}>
Running test:<replaceChild>
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_002_t" end time: Sep 16 14:45 CDT
"JSONDocument_replaceChild_002_t" time elapsed: 00:00:00
----------------------------------------------------------

5/65 Testing: JSONDocument_insertChild_101_t
5/65 Test: JSONDocument_insertChild_101_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/JSONDocument_insertChild_101_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/test101.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test101.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/JSONDocument_insertChild_101_t.d
"JSONDocument_insertChild_101_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.469953  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.471874  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.471887  1  5 findChild() args  path=<operation>
09-16 14:45:24.477827  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.481773  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.481821  1  5 findChild() found child value=std::string(insertChild)
09-16 14:45:24.482001  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:45:24.482011  1  5 findChild() Find succeeded.
09-16 14:45:24.484946  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.484958  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.485860  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.486246  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.486265  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.486388  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.486402  1  5 findChild() Find succeeded.
09-16 14:45:24.489089  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.489101  1  5 findChild() args  path=<delta>
09-16 14:45:24.489958  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.490319  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.490336  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.490459  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.490468  1  5 findChild() Find succeeded.
09-16 14:45:24.492744  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.492755  1  5 findChild() args  path=<path>
09-16 14:45:24.493590  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.493941  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.493959  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.494076  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.494085  1  5 findChild() Find succeeded.
09-16 14:45:24.496125  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.496137  1  5 findChild() args  path=<end-state>
09-16 14:45:24.496932  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.497248  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.497265  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.497384  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.497393  1  5 findChild() Find succeeded.
09-16 14:45:24.499676  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.499685  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.500081  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.500285  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.500297  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.500377  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.500384  1  5 findChild() Find succeeded.
09-16 14:45:24.501504  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.501511  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.501958  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.502155  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.502192  1  5 findChild() found child value=int(1)
09-16 14:45:24.502275  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.502281  1  5 findChild() Find succeeded.
09-16 14:45:24.503295  1  2 insertChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.503305  1  2 insertChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.503309  1  2 insertChild() args  path=<document.data>
09-16 14:45:24.506200  1  4 insertChild() new child value=object(...)
09-16 14:45:24.506214  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:24.508083  1  4 insertChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.508096  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:24.508769  1  4 insertChild() recurse() args childValue=<{
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:45:24.508803  1  4 insertChild() found child value=object(...)
09-16 14:45:24.510448  1  4 insertChild() resultDocument=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.510632  1  4 insertChild() insertChild=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.510641  1  4 insertChild() Insert succeeded.
09-16 14:45:24.510703  1 10 operator==() begin _json_buffer=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.510712  1 10 operator==() args  other.__json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }, 
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.515999  1 10 matches() JSON buffers are equal.
09-16 14:45:24.516035  1 10 operator==() begin _json_buffer=<{
    "aa" : 3, 
    "b" : {
        "c" : "2", 
        "dd" : [
            2, 
            5, 
            6, 
            7
        ]
    }
}>
09-16 14:45:24.516040  1 10 operator==() args  other.__json_buffer=<{
    "aa" : 3, 
    "b" : {
        "c" : "2", 
        "dd" : [
            2, 
            5, 
            6, 
            7
        ]
    }
}>
Running test:<insertChild>
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_101_t" end time: Sep 16 14:45 CDT
"JSONDocument_insertChild_101_t" time elapsed: 00:00:00
----------------------------------------------------------

7/65 Testing: JSONDocument_insertChild_103_t
7/65 Test: JSONDocument_insertChild_103_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/JSONDocument_insertChild_103_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/test103.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test103.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/JSONDocument_insertChild_103_t.d
"JSONDocument_insertChild_103_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.453543  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.455703  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.455727  1  5 findChild() args  path=<operation>
09-16 14:45:24.461828  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.470424  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.470472  1  5 findChild() found child value=std::string(insertChild)
09-16 14:45:24.470664  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:45:24.470673  1  5 findChild() Find succeeded.
09-16 14:45:24.473506  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.473518  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.474502  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.474864  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.474883  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.475006  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.475015  1  5 findChild() Find succeeded.
09-16 14:45:24.477261  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.477273  1  5 findChild() args  path=<delta>
09-16 14:45:24.478251  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.478609  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.478627  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.478749  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.478759  1  5 findChild() Find succeeded.
09-16 14:45:24.480768  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.480779  1  5 findChild() args  path=<path>
09-16 14:45:24.481564  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.482063  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.482081  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.482202  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.482212  1  5 findChild() Find succeeded.
09-16 14:45:24.484195  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.484207  1  5 findChild() args  path=<end-state>
09-16 14:45:24.485027  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.485877  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.485895  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.486013  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.486022  1  5 findChild() Find succeeded.
09-16 14:45:24.488275  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.488286  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.489117  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.489484  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.489501  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.489615  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.489625  1  5 findChild() Find succeeded.
09-16 14:45:24.491908  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.491919  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.492775  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.493120  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.493172  1  5 findChild() found child value=int(0)
09-16 14:45:24.493290  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:45:24.493457  1  5 findChild() Find succeeded.
09-16 14:45:24.495388  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "data" : "ss", 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:45:24.495403  1  2 insertChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:45:24.495410  1  2 insertChild() args  path=<document.data>
09-16 14:45:24.496544  1  4 insertChild() new child value=object(...)
09-16 14:45:24.496563  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:24.497327  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : "ss",
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.497340  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:24.497734  1  4 insertChild() recurse() args childValue=<{
"data" : "ss",
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:45:24.497747  1  4 insertChild() recurse() Error: Insert failed fordata, search path =<document.data>; Child exists, call replace instead.
Running test:<insertChild>
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_103_t" end time: Sep 16 14:45 CDT
"JSONDocument_insertChild_103_t" time elapsed: 00:00:00
----------------------------------------------------------

6/65 Testing: JSONDocument_insertChild_102_t
6/65 Test: JSONDocument_insertChild_102_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/JSONDocument_insertChild_102_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/test102.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test102.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/JSONDocument_insertChild_102_t.d
"JSONDocument_insertChild_102_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.453543  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.455704  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.455728  1  5 findChild() args  path=<operation>
09-16 14:45:24.461828  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.465945  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.466005  1  5 findChild() found child value=std::string(insertChild)
09-16 14:45:24.466225  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:45:24.466236  1  5 findChild() Find succeeded.
09-16 14:45:24.469247  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.469261  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.470143  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.470532  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.470551  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.470679  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.470688  1  5 findChild() Find succeeded.
09-16 14:45:24.473226  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.473238  1  5 findChild() args  path=<delta>
09-16 14:45:24.474041  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.474405  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.474423  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.474550  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.474560  1  5 findChild() Find succeeded.
09-16 14:45:24.476679  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.476690  1  5 findChild() args  path=<path>
09-16 14:45:24.477524  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.477897  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.477915  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.478043  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.478053  1  5 findChild() Find succeeded.
09-16 14:45:24.480078  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.480091  1  5 findChild() args  path=<end-state>
09-16 14:45:24.480921  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.481271  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.481289  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.481415  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.481425  1  5 findChild() Find succeeded.
09-16 14:45:24.483915  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.483926  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.484692  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.485023  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.485040  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.485158  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.485167  1  5 findChild() Find succeeded.
09-16 14:45:24.487154  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.487165  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.487949  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.488286  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:45:24.488328  1  5 findChild() found child value=int(0)
09-16 14:45:24.488455  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:45:24.488465  1  5 findChild() Find succeeded.
09-16 14:45:24.490370  1  2 insertChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : "aaa", 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.490384  1  2 insertChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.490391  1  2 insertChild() args  path=<document.data>
09-16 14:45:24.496059  1  4 insertChild() new child value=object(...)
09-16 14:45:24.496082  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:24.499325  1  4 insertChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : "aaa",
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.499348  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:24.500651  1  4 insertChild() recurse() args childValue=<{
"data" : "aaa",
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:45:24.500665  1  4 insertChild() recurse() Error: Insert failed fordata, search path =<document.data>; Child exists, call replace instead.
Running test:<insertChild>
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_102_t" end time: Sep 16 14:45 CDT
"JSONDocument_insertChild_102_t" time elapsed: 00:00:00
----------------------------------------------------------

8/65 Testing: JSONDocument_insertChild_104_t
8/65 Test: JSONDocument_insertChild_104_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/JSONDocument_insertChild_104_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/test104.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test104.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/JSONDocument_insertChild_104_t.d
"JSONDocument_insertChild_104_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.481758  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.483704  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.483718  1  5 findChild() args  path=<operation>
09-16 14:45:24.489562  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.493342  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.493404  1  5 findChild() found child value=std::string(insertChild)
09-16 14:45:24.493580  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:45:24.493590  1  5 findChild() Find succeeded.
09-16 14:45:24.496720  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.496732  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.497578  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.497917  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.497934  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.498048  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.498057  1  5 findChild() Find succeeded.
09-16 14:45:24.500503  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.500514  1  5 findChild() args  path=<delta>
09-16 14:45:24.501296  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.501664  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.501682  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.501797  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.501806  1  5 findChild() Find succeeded.
09-16 14:45:24.502992  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.503000  1  5 findChild() args  path=<path>
09-16 14:45:24.503363  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.503569  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.503581  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.503660  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.503667  1  5 findChild() Find succeeded.
09-16 14:45:24.504668  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.504676  1  5 findChild() args  path=<end-state>
09-16 14:45:24.505036  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.505236  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.505248  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.505326  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.505333  1  5 findChild() Find succeeded.
09-16 14:45:24.506406  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.506413  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.506765  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.506958  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.506970  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.507048  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.507054  1  5 findChild() Find succeeded.
09-16 14:45:24.508136  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.508143  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.508502  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.508694  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.508730  1  5 findChild() found child value=int(1)
09-16 14:45:24.508812  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.508819  1  5 findChild() Find succeeded.
09-16 14:45:24.509784  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:45:24.509791  1  2 insertChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:45:24.509795  1  2 insertChild() args  path=<document.data>
09-16 14:45:24.510464  1  4 insertChild() new child value=object(...)
09-16 14:45:24.510478  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:24.510947  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.510958  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:24.511081  1  4 insertChild() recurse() args childValue=<{
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:45:24.511112  1  4 insertChild() found child value=object(...)
09-16 14:45:24.511363  1  4 insertChild() resultDocument=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:45:24.511498  1  4 insertChild() insertChild=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:45:24.511506  1  4 insertChild() Insert succeeded.
09-16 14:45:24.511550  1 10 operator==() begin _json_buffer=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:45:24.511556  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ], 
        "data" : {
            "a" : 1, 
            "b" : [
                6, 
                6, 
                8
            ]
        }
    }
}>
09-16 14:45:24.512342  1 10 matches() JSON buffers are equal.
09-16 14:45:24.512356  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : [
        6, 
        6, 
        8
    ]
}>
09-16 14:45:24.512360  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : [
        6, 
        6, 
        8
    ]
}>
Running test:<insertChild>
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_104_t" end time: Sep 16 14:45 CDT
"JSONDocument_insertChild_104_t" time elapsed: 00:00:00
----------------------------------------------------------

9/65 Testing: JSONDocument_deleteChild_201_t
9/65 Test: JSONDocument_deleteChild_201_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/JSONDocument_deleteChild_201_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/test201.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test201.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/JSONDocument_deleteChild_201_t.d
"JSONDocument_deleteChild_201_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.555887  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.557706  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.557763  1  5 findChild() args  path=<operation>
09-16 14:45:24.563102  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.566563  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.566668  1  5 findChild() found child value=std::string(deleteChild)
09-16 14:45:24.566855  1  5 findChild() resultDocument=<{
"operation" : "deleteChild"
}>
09-16 14:45:24.566883  1  5 findChild() Find succeeded.
09-16 14:45:24.570910  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.570971  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.571696  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.572135  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.572180  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.572303  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.572329  1  5 findChild() Find succeeded.
09-16 14:45:24.574285  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.574336  1  5 findChild() args  path=<path>
09-16 14:45:24.575030  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.575358  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.575406  1  5 findChild() found child value=std::string(document.data)
09-16 14:45:24.575528  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:45:24.575553  1  5 findChild() Find succeeded.
09-16 14:45:24.577376  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.577427  1  5 findChild() args  path=<end-state>
09-16 14:45:24.578217  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.578553  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.578596  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.578718  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.578745  1  5 findChild() Find succeeded.
09-16 14:45:24.584676  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.584736  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.585561  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.585926  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.585971  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.586094  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.586122  1  5 findChild() Find succeeded.
09-16 14:45:24.588156  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.588202  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.588972  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.589299  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.589388  1  5 findChild() found child value=int(1)
09-16 14:45:24.589514  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.589543  1  5 findChild() Find succeeded.
09-16 14:45:24.591424  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "tt" : "aa"
        }, 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:45:24.591469  1  3 deleteChild() args  path=<document.data>
09-16 14:45:24.592231  1  3 deleteChild() recurse() args currentDepth=1
09-16 14:45:24.592944  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"tt" : "aa"
},
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.592994  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:24.593228  1  3 deleteChild() recurse() args childValue=<{
"data" : {
"tt" : "aa"
},
"bbb" : [
1,
2,
3
]
}>
09-16 14:45:24.593315  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:24.593576  1  3 deleteChild() resultDocument=<{
"document" : {
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.593705  1  3 deleteChild() deletedChild=<{
"tt" : "aa"
}>
09-16 14:45:24.593732  1  3 deleteChild() Delete succeeded.
09-16 14:45:24.593800  1 10 operator==() begin _json_buffer=<{
"document" : {
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:45:24.593834  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:45:24.594530  1 10 matches() JSON buffers are equal.
09-16 14:45:24.594562  1 10 operator==() begin _json_buffer=<{
    "tt" : "aa"
}>
09-16 14:45:24.594587  1 10 operator==() args  other.__json_buffer=<{
    "tt" : "aa"
}>
Running test:<deleteChild>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_deleteChild_201_t" end time: Sep 16 14:45 CDT
"JSONDocument_deleteChild_201_t" time elapsed: 00:00:00
----------------------------------------------------------

10/65 Testing: JSONDocument_appendChild_301_t
10/65 Test: JSONDocument_appendChild_301_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/JSONDocument_appendChild_301_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/test301.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test301.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/JSONDocument_appendChild_301_t.d
"JSONDocument_appendChild_301_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.555887  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.557742  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.557753  1  5 findChild() args  path=<operation>
09-16 14:45:24.563103  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.566591  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.566637  1  5 findChild() found child value=std::string(appendChild)
09-16 14:45:24.566800  1  5 findChild() resultDocument=<{
"operation" : "appendChild"
}>
09-16 14:45:24.566809  1  5 findChild() Find succeeded.
09-16 14:45:24.569310  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.569321  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.579443  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.579882  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.579904  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.580019  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.580027  1  5 findChild() Find succeeded.
09-16 14:45:24.582309  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.582326  1  5 findChild() args  path=<delta>
09-16 14:45:24.583071  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.583366  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.583382  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.583487  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.583495  1  5 findChild() Find succeeded.
09-16 14:45:24.585227  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.585236  1  5 findChild() args  path=<path>
09-16 14:45:24.585875  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.586162  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.586176  1  5 findChild() found child value=std::string(aliases.active)
09-16 14:45:24.586276  1  5 findChild() resultDocument=<{
"path" : "aliases.active"
}>
09-16 14:45:24.586284  1  5 findChild() Find succeeded.
09-16 14:45:24.588006  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.588016  1  5 findChild() args  path=<end-state>
09-16 14:45:24.588652  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.588939  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.588954  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.589056  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.589063  1  5 findChild() Find succeeded.
09-16 14:45:24.590930  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.590940  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.591581  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.591866  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.591881  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.591984  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.591992  1  5 findChild() Find succeeded.
09-16 14:45:24.593736  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.593746  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.594405  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.594706  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.594751  1  5 findChild() found child value=int(1)
09-16 14:45:24.594854  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.594862  1  5 findChild() Find succeeded.
09-16 14:45:24.596613  1 13 appendChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.596627  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "version alias 2", 
        "assigned" : "Tue Dec 29 18:19:25 2015"
    }
}>
09-16 14:45:24.596633  1 13 appendChild() args  path=<aliases.active>
09-16 14:45:24.597057  1  4 appendChild() new child value=object(...)
09-16 14:45:24.597071  1  5 findChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.597079  1  5 findChild() args  path=<aliases.active>
09-16 14:45:24.599371  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.600963  1  5 findChild() recurse() args currentView=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.600978  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.601649  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:45:24.601676  1  5 findChild() found child value=array(...)
09-16 14:45:24.602006  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:45:24.602017  1  5 findChild() Find succeeded.
09-16 14:45:24.603115  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:45:24.603263  1  3 appendChild() newChild=<{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}>
09-16 14:45:24.603334  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:45:24.603348  1  4 replaceChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.603357  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:45:24.603362  1  4 replaceChild() args  path=<aliases.active>
09-16 14:45:24.606147  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.606170  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.607136  1  4 replaceChild() recurse() args childValue=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.607150  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.607822  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:45:24.607890  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.608978  1  4 replaceChild() resultDocument=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.609335  1  4 replaceChild() replacedChild=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.609345  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.609471  1 10 operator==() begin _json_buffer=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.609483  1 10 operator==() args  other.__json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.613720  1 10 matches() JSON buffers are equal.
09-16 14:45:24.613748  1 10 operator==() begin _json_buffer=<{
    "name" : "version alias 2", 
    "assigned" : "Tue Dec 29 18:19:25 2015"
}>
09-16 14:45:24.613756  1 10 operator==() args  other.__json_buffer=<{
    "name" : "version alias 2", 
    "assigned" : "Tue Dec 29 18:19:25 2015"
}>
Running test:<appendChild>
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_appendChild_301_t" end time: Sep 16 14:45 CDT
"JSONDocument_appendChild_301_t" time elapsed: 00:00:00
----------------------------------------------------------

14/65 Testing: JSONDocumentBuilder_buildDocument_003_t
14/65 Test: JSONDocumentBuilder_buildDocument_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/JSONDocumentBuilder_buildDocument_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/test003.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/JSONDocumentBuilder_buildDocument_003_t.d
"JSONDocumentBuilder_buildDocument_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.555887  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.556024  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.557708  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.557721  1  5 findChild() args  path=<operation>
09-16 14:45:24.562969  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.566531  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:45:24.566581  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:45:24.566761  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:45:24.566769  1  5 findChild() Find succeeded.
09-16 14:45:24.569301  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.569313  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.569830  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.570064  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:45:24.570079  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.570189  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.570198  1  5 findChild() Find succeeded.
09-16 14:45:24.572480  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.572492  1  5 findChild() args  path=<end-state>
09-16 14:45:24.573001  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.573226  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:45:24.573241  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.573346  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.573354  1  5 findChild() Find succeeded.
09-16 14:45:24.575435  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:45:24.575445  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.575919  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.576140  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:45:24.576190  1  5 findChild() found child value=int(0)
09-16 14:45:24.576298  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:45:24.576306  1  5 findChild() Find succeeded.
09-16 14:45:24.578104  1  2 createFrom() args  document=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.578225  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.578235  1  5 findChild() args  path=<document.metadata>
09-16 14:45:24.581245  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.583529  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.583549  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.584137  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.584161  1  5 findChild() found child value=object(...)
09-16 14:45:24.584353  1  5 findChild() resultDocument=<{
"document.metadata" : {
"comments" : {
"empty" : "empty"
}
}
}>
09-16 14:45:24.584362  1  5 findChild() Find succeeded.
09-16 14:45:24.584430  1  2 createFrom() Found document.metadata=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:45:24.584446  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.584456  1  4 replaceChild() args  newChild=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:45:24.584462  1  4 replaceChild() args  path=<document.metadata>
09-16 14:45:24.586432  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.586447  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.587367  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.587382  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.587732  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.587780  1  4 replaceChild() found child value=object(...)
09-16 14:45:24.588746  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.588881  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.588890  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.588951  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.588961  1  5 findChild() args  path=<changelog>
09-16 14:45:24.590849  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.592086  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.592098  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:45:24.592465  1  2 createFrom() No converted.changelog
09-16 14:45:24.592493  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.592501  1  5 findChild() args  path=<document.data>
09-16 14:45:24.594362  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.595567  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:45:24.595583  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.596126  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.596147  1  5 findChild() found child value=object(...)
09-16 14:45:24.596487  1  5 findChild() resultDocument=<{
"document.data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:45:24.596496  1  5 findChild() Find succeeded.
09-16 14:45:24.596568  1  2 createFrom() Found document.data=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.596578  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.596584  1  4 replaceChild() args  newChild=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.596590  1  4 replaceChild() args  path=<document.data>
09-16 14:45:24.598470  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.598481  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.599436  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.599450  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.599786  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.599805  1  4 replaceChild() found child value=object(...)
09-16 14:45:24.601003  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.601028  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.601036  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.601094  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.601107  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations-error" : [
        "config1"
    ], 
    "version" : "version1", 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:45:24.604807  1 10 matches() JSON buffers are not equal.
09-16 14:45:24.604819  1 10 matches() Error message=<Objects have different sizes <object(...),object(...)>>
Running test:<buildDocument>
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_003_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_buildDocument_003_t" time elapsed: 00:00:00
----------------------------------------------------------

11/65 Testing: JSONDocument_removeChild_302_t
11/65 Test: JSONDocument_removeChild_302_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/JSONDocument_removeChild_302_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/test302.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test302.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/JSONDocument_removeChild_302_t.d
"JSONDocument_removeChild_302_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.564716  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.580780  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.580795  1  5 findChild() args  path=<operation>
09-16 14:45:24.592120  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.595823  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.595871  1  5 findChild() found child value=std::string(removeChild)
09-16 14:45:24.596042  1  5 findChild() resultDocument=<{
"operation" : "removeChild"
}>
09-16 14:45:24.596051  1  5 findChild() Find succeeded.
09-16 14:45:24.598768  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.598779  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.599472  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.599767  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.599782  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.599884  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.599892  1  5 findChild() Find succeeded.
09-16 14:45:24.602206  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.602217  1  5 findChild() args  path=<delta>
09-16 14:45:24.602890  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.603191  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.603208  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:45:24.603317  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:45:24.603326  1  5 findChild() Find succeeded.
09-16 14:45:24.605967  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.605978  1  5 findChild() args  path=<path>
09-16 14:45:24.606769  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.607074  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.607089  1  5 findChild() found child value=std::string(aliases.active)
09-16 14:45:24.607197  1  5 findChild() resultDocument=<{
"path" : "aliases.active"
}>
09-16 14:45:24.607206  1  5 findChild() Find succeeded.
09-16 14:45:24.609149  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.609159  1  5 findChild() args  path=<end-state>
09-16 14:45:24.609837  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.610129  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.610144  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.610244  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.610252  1  5 findChild() Find succeeded.
09-16 14:45:24.612393  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.612406  1  5 findChild() args  path=<returned-value>
09-16 14:45:24.613019  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.613306  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.613320  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:45:24.613436  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:45:24.613445  1  5 findChild() Find succeeded.
09-16 14:45:24.615000  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.615007  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.615321  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.615499  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:45:24.615539  1  5 findChild() found child value=int(1)
09-16 14:45:24.615612  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.615618  1  5 findChild() Find succeeded.
09-16 14:45:24.616508  1 13 removeChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.616516  1 13 removeChild() args  child=<{
    "payload" : {
        "name" : "version alias 2"
    }
}>
09-16 14:45:24.616521  1 13 removeChild() args  path=<aliases.active>
09-16 14:45:24.616703  1  4 removeChild() new delete value=object(...)
09-16 14:45:24.616713  1  5 findChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.616717  1  5 findChild() args  path=<aliases.active>
09-16 14:45:24.618011  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.619096  1  5 findChild() recurse() args currentView=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.619106  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.619555  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:45:24.619574  1  5 findChild() found child value=array(...)
09-16 14:45:24.619827  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:45:24.619834  1  5 findChild() Find succeeded.
09-16 14:45:24.620301  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:45:24.620317  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:45:24.620516  1  3 removeChild() updatedChild=<{
"payload" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:45:24.620647  1  3 removeChild() delChild=<{
"0" : [
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:45:24.620687  1 13 removeChild() updatedChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:45:24.620697  1  4 replaceChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.620702  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:45:24.620705  1  4 replaceChild() args  path=<aliases.active>
09-16 14:45:24.621807  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.621820  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.622400  1  4 replaceChild() recurse() args childValue=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.622421  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.622902  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:45:24.622958  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.623508  1  4 replaceChild() resultDocument=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.623788  1  4 replaceChild() replacedChild=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.623796  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.623909  1 10 operator==() begin _json_buffer=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.623920  1 10 operator==() args  other.__json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.625615  1 10 matches() JSON buffers are equal.
09-16 14:45:24.625639  1 10 operator==() begin _json_buffer=<{
    "0" : [
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:45:24.625646  1 10 operator==() args  other.__json_buffer=<{
    "0" : [
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
Running test:<removeChild>
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_removeChild_302_t" end time: Sep 16 14:45 CDT
"JSONDocument_removeChild_302_t" time elapsed: 00:00:00
----------------------------------------------------------

12/65 Testing: JSONDocumentBuilder_buildDocument_001_t
12/65 Test: JSONDocumentBuilder_buildDocument_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/JSONDocumentBuilder_buildDocument_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/test001.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/JSONDocumentBuilder_buildDocument_001_t.d
"JSONDocumentBuilder_buildDocument_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.555887  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.556024  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.557706  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.557720  1  5 findChild() args  path=<operation>
09-16 14:45:24.562970  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.566532  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.566580  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:45:24.566759  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:45:24.566767  1  5 findChild() Find succeeded.
09-16 14:45:24.569301  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.569313  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.569830  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.570062  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.570078  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.570190  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.570198  1  5 findChild() Find succeeded.
09-16 14:45:24.572404  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.572414  1  5 findChild() args  path=<end-state>
09-16 14:45:24.572901  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.573132  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.573147  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.573254  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.573262  1  5 findChild() Find succeeded.
09-16 14:45:24.575462  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.575472  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.575949  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.576169  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.576203  1  5 findChild() found child value=int(1)
09-16 14:45:24.576312  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.576320  1  5 findChild() Find succeeded.
09-16 14:45:24.578260  1  2 createFrom() args  document=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.578375  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.578384  1  5 findChild() args  path=<document.metadata>
09-16 14:45:24.579357  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.580611  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:45:24.580631  1  5 findChild() recurse() Error: Search failed for json element name=document, search path =<document.metadata>.
09-16 14:45:24.581053  1  2 createFrom() No document.metadata
09-16 14:45:24.581079  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.581087  1  5 findChild() args  path=<changelog>
09-16 14:45:24.581533  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.581876  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:45:24.581888  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:45:24.581949  1  2 createFrom() No converted.changelog
09-16 14:45:24.581960  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.581966  1  5 findChild() args  path=<document.data>
09-16 14:45:24.582406  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.582752  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:45:24.582763  1  5 findChild() recurse() Error: Search failed for json element name=document, search path =<document.data>.
09-16 14:45:24.582816  1  2 createFrom() No document.data
09-16 14:45:24.582833  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.582841  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.582847  1  4 replaceChild() args  path=<document.data>
09-16 14:45:24.584968  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.584984  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.586053  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.586067  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.586427  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.586485  1  4 replaceChild() found child value=object(...)
09-16 14:45:24.587677  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.587701  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.587708  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.587766  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.587777  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.591942  1 10 matches() JSON buffers are equal.
Running test:<buildDocument>
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_001_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_buildDocument_001_t" time elapsed: 00:00:00
----------------------------------------------------------

13/65 Testing: JSONDocumentBuilder_buildDocument_002_t
13/65 Test: JSONDocumentBuilder_buildDocument_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/JSONDocumentBuilder_buildDocument_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/test002.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/JSONDocumentBuilder_buildDocument_002_t.d
"JSONDocumentBuilder_buildDocument_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.559359  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.559513  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.561069  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.561084  1  5 findChild() args  path=<operation>
09-16 14:45:24.565704  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.569092  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.569143  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:45:24.569329  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:45:24.569336  1  5 findChild() Find succeeded.
09-16 14:45:24.571945  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.571956  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.572474  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.572704  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.572720  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.572826  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.572834  1  5 findChild() Find succeeded.
09-16 14:45:24.575114  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.575125  1  5 findChild() args  path=<end-state>
09-16 14:45:24.575603  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.575817  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.575832  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.575934  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.575942  1  5 findChild() Find succeeded.
09-16 14:45:24.578090  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.578099  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.578559  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.578771  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.578820  1  5 findChild() found child value=int(1)
09-16 14:45:24.578939  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.578948  1  5 findChild() Find succeeded.
09-16 14:45:24.580753  1  2 createFrom() args  document=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.580883  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.580892  1  5 findChild() args  path=<document.metadata>
09-16 14:45:24.583681  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.585441  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.585455  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.586009  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.586030  1  5 findChild() found child value=object(...)
09-16 14:45:24.586218  1  5 findChild() resultDocument=<{
"document.metadata" : {
"comments" : {
"empty" : "empty"
}
}
}>
09-16 14:45:24.586226  1  5 findChild() Find succeeded.
09-16 14:45:24.586285  1  2 createFrom() Found document.metadata=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:45:24.586299  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.586309  1  4 replaceChild() args  newChild=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:45:24.586315  1  4 replaceChild() args  path=<document.metadata>
09-16 14:45:24.588217  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.588232  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.589191  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.589206  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.589558  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.589607  1  4 replaceChild() found child value=object(...)
09-16 14:45:24.590564  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.590702  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.590711  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.590771  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.590780  1  5 findChild() args  path=<changelog>
09-16 14:45:24.592506  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.593525  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.593536  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:45:24.593774  1  2 createFrom() No converted.changelog
09-16 14:45:24.593791  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.593796  1  5 findChild() args  path=<document.data>
09-16 14:45:24.594980  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.596057  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.596071  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.596609  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.596627  1  5 findChild() found child value=object(...)
09-16 14:45:24.596932  1  5 findChild() resultDocument=<{
"document.data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:45:24.596940  1  5 findChild() Find succeeded.
09-16 14:45:24.597012  1  2 createFrom() Found document.data=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.597021  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.597027  1  4 replaceChild() args  newChild=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:45:24.597032  1  4 replaceChild() args  path=<document.data>
09-16 14:45:24.598819  1  4 replaceChild() new child value=object(...)
09-16 14:45:24.598831  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.599707  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.599720  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.600046  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:45:24.600063  1  4 replaceChild() found child value=object(...)
09-16 14:45:24.601120  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.601142  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.601148  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.601201  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.601211  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.604985  1 10 matches() JSON buffers are equal.
Running test:<buildDocument>
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_002_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_buildDocument_002_t" time elapsed: 00:00:00
----------------------------------------------------------

16/65 Testing: JSONDocumentBuilder_removeAlias_005_t
16/65 Test: JSONDocumentBuilder_removeAlias_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/JSONDocumentBuilder_removeAlias_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/test005.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/alias.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test005.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/JSONDocumentBuilder_removeAlias_005_t.d
"JSONDocumentBuilder_removeAlias_005_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.564716  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.564846  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.566486  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.566500  1  5 findChild() args  path=<operation>
09-16 14:45:24.572056  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.575994  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.576040  1  5 findChild() found child value=std::string(removeAlias)
09-16 14:45:24.576212  1  5 findChild() resultDocument=<{
"operation" : "removeAlias"
}>
09-16 14:45:24.576220  1  5 findChild() Find succeeded.
09-16 14:45:24.579164  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.579188  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.580044  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.580309  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.580326  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.580444  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.580452  1  5 findChild() Find succeeded.
09-16 14:45:24.582784  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.582795  1  5 findChild() args  path=<delta>
09-16 14:45:24.583374  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.583649  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.583664  1  5 findChild() found child value=std::string(alias.json)
09-16 14:45:24.583766  1  5 findChild() resultDocument=<{
"delta" : "alias.json"
}>
09-16 14:45:24.583774  1  5 findChild() Find succeeded.
09-16 14:45:24.585743  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.585753  1  5 findChild() args  path=<end-state>
09-16 14:45:24.586277  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.586517  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.586532  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.586632  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.586640  1  5 findChild() Find succeeded.
09-16 14:45:24.588855  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.588865  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.589373  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.589630  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.589670  1  5 findChild() found child value=int(1)
09-16 14:45:24.589776  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.589784  1  5 findChild() Find succeeded.
09-16 14:45:24.591656  1  4 removeAlias() args  alias=<{
    "alias" : "alias01"
}>
09-16 14:45:24.593450  1 10 _makeAlias() activeAlias<{"name":"alias01"}>
09-16 14:45:24.593531  1 13 removeChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.593543  1 13 removeChild() args  child=<{
    "payload" : {
        "name" : "alias01"
    }
}>
09-16 14:45:24.593549  1 13 removeChild() args  path=<aliases.active>
09-16 14:45:24.593853  1  4 removeChild() new delete value=object(...)
09-16 14:45:24.593866  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.593874  1  5 findChild() args  path=<aliases.active>
09-16 14:45:24.596583  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.598100  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.598113  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.598381  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:45:24.598405  1  5 findChild() found child value=array(...)
09-16 14:45:24.598665  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.598672  1  5 findChild() Find succeeded.
09-16 14:45:24.599171  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:45:24.599188  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:45:24.599380  1  3 removeChild() updatedChild=<{
"payload" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.599523  1  3 removeChild() delChild=<{
"0" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.599561  1 13 removeChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias012", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "alias02", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.599570  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.599576  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias012", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "alias02", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.599580  1  4 replaceChild() args  path=<aliases.active>
09-16 14:45:24.601125  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.601138  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.602101  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.602112  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.602378  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:45:24.602433  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.603301  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.603623  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.603630  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.603768  1 14 value_at() begin _json_buffer=<{
    "0" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.603774  1 14 value_at() begin index=<0>
09-16 14:45:24.603789  1 14 value_at() json_buffer=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.603968  1 14 value_at() new child value=array(...)
09-16 14:45:24.604109  1  2 insertChild() begin _json_buffer=<{
    "name" : "alias01", 
    "assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.604115  1  2 insertChild() args  newChild=<{
    "removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.604118  1  2 insertChild() args  path=<removed>
09-16 14:45:24.604358  1  4 insertChild() new child value=std::string(Mon Feb  8 14:00:30 2016)
09-16 14:45:24.604366  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:24.604460  1  4 insertChild() recurse() args childValue=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.604473  1  4 insertChild() found child value=std::string(Mon Feb  8 14:00:30 2016)
09-16 14:45:24.604577  1  4 insertChild() resultDocument=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.604649  1  4 insertChild() insertChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.604655  1  4 insertChild() Insert succeeded.
09-16 14:45:24.604679  1 10 _makeHistoryAlias() historyAlias<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.604711  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.604718  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "alias01", 
        "assigned" : "Mon Feb  8 14:00:30 2016", 
        "removed" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.604721  1 13 appendChild() args  path=<aliases.history>
09-16 14:45:24.604931  1  4 appendChild() new child value=object(...)
09-16 14:45:24.604940  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.604944  1  5 findChild() args  path=<aliases.history>
09-16 14:45:24.606033  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.606943  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.606953  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.607171  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:45:24.607184  1  5 findChild() found child value=array(...)
09-16 14:45:24.607270  1  5 findChild() resultDocument=<{
"aliases.history" : [

]
}>
09-16 14:45:24.607276  1  5 findChild() Find succeeded.
09-16 14:45:24.607573  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.607678  1  3 appendChild() newChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.607712  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016", 
            "removed" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.607718  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.607723  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016", 
            "removed" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.607726  1  4 replaceChild() args  path=<aliases.history>
09-16 14:45:24.609127  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.609134  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.610088  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.610097  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.610310  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:45:24.610323  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.611232  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.611307  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.611314  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.611439  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.611445  1 13 appendChild() args  child=<{
    "payload" : {
        "removeAlias" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.611449  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:45:24.611576  1  4 appendChild() new child value=object(...)
09-16 14:45:24.611583  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.611587  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:45:24.612759  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.613686  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.613695  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.613885  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.613900  1  5 findChild() found child value=array(...)
09-16 14:45:24.614017  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.614023  1  5 findChild() Find succeeded.
09-16 14:45:24.614342  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.614414  1  3 appendChild() newChild=<{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.614447  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.614453  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.614457  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.614460  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:45:24.617063  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.617071  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.617972  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.617981  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.618155  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.618169  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.619114  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.619258  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.619265  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.619325  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.619334  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.622291  1 10 matches() JSON buffers are equal.
Running test:<removeAlias>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_removeAlias_005_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_removeAlias_005_t" time elapsed: 00:00:00
----------------------------------------------------------

15/65 Testing: JSONDocumentBuilder_addAlias_004_t
15/65 Test: JSONDocumentBuilder_addAlias_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/JSONDocumentBuilder_addAlias_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/test004.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/alias.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/JSONDocumentBuilder_addAlias_004_t.d
"JSONDocumentBuilder_addAlias_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.559359  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.559497  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.561069  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.561084  1  5 findChild() args  path=<operation>
09-16 14:45:24.565720  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.569092  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.569143  1  5 findChild() found child value=std::string(addAlias)
09-16 14:45:24.569328  1  5 findChild() resultDocument=<{
"operation" : "addAlias"
}>
09-16 14:45:24.569336  1  5 findChild() Find succeeded.
09-16 14:45:24.571824  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.571835  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.572381  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.572643  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.572660  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.572765  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.572774  1  5 findChild() Find succeeded.
09-16 14:45:24.574945  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.574956  1  5 findChild() args  path=<delta>
09-16 14:45:24.575510  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.575754  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.575769  1  5 findChild() found child value=std::string(alias.json)
09-16 14:45:24.575871  1  5 findChild() resultDocument=<{
"delta" : "alias.json"
}>
09-16 14:45:24.575879  1  5 findChild() Find succeeded.
09-16 14:45:24.577695  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.577704  1  5 findChild() args  path=<end-state>
09-16 14:45:24.578243  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.578497  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.578513  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.578620  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.578627  1  5 findChild() Find succeeded.
09-16 14:45:24.580822  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.580834  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.581390  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.581683  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:45:24.581765  1  5 findChild() found child value=int(1)
09-16 14:45:24.581879  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.581887  1  5 findChild() Find succeeded.
09-16 14:45:24.583749  1  3 addAlias() args  alias=<{
    "alias" : "alias01"
}>
09-16 14:45:24.585731  1 10 _makeActiveAlias() activeAlias<{"name":"alias01","assigned":"Mon Feb  8 14:00:30 2016"}>
09-16 14:45:24.585820  1 13 appendChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.585831  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "alias01", 
        "assigned" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.585837  1 13 appendChild() args  path=<aliases.active>
09-16 14:45:24.586235  1  4 appendChild() new child value=object(...)
09-16 14:45:24.586249  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.586256  1  5 findChild() args  path=<aliases.active>
09-16 14:45:24.588687  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.590538  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.590551  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.590691  1  5 findChild() recurse() args currentView=<{
"active" : [

],
"history" : [

]
}>
09-16 14:45:24.590710  1  5 findChild() found child value=array(...)
09-16 14:45:24.590824  1  5 findChild() resultDocument=<{
"aliases.active" : [

]
}>
09-16 14:45:24.590832  1  5 findChild() Find succeeded.
09-16 14:45:24.591280  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.591419  1  3 appendChild() newChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.591463  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.591476  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:45:24.591484  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.591490  1  4 replaceChild() args  path=<aliases.active>
09-16 14:45:24.593641  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.593658  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.594833  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.594848  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.594986  1  4 replaceChild() recurse() args childValue=<{
"active" : [

],
"history" : [

]
}>
09-16 14:45:24.595039  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.596303  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.596443  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.596453  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.596614  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.596623  1 13 appendChild() args  child=<{
    "payload" : {
        "addAlias" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.596629  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:45:24.596857  1  4 appendChild() new child value=object(...)
09-16 14:45:24.596867  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.596873  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:45:24.598776  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.600039  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.600052  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.600248  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}>
09-16 14:45:24.600261  1  5 findChild() found child value=array(...)
09-16 14:45:24.600365  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [

]
}>
09-16 14:45:24.600374  1  5 findChild() Find succeeded.
09-16 14:45:24.600749  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.600848  1  3 appendChild() newChild=<{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.600889  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.600899  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.600905  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.600911  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:45:24.603051  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.603063  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.604353  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:45:24.604366  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.604572  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}>
09-16 14:45:24.604589  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.605828  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.605936  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.605944  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.606031  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.606042  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.608532  1 10 matches() JSON buffers are equal.
Running test:<addAlias>
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_addAlias_004_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_addAlias_004_t" time elapsed: 00:00:00
----------------------------------------------------------

20/65 Testing: JSONDocumentBuilder_markDeleted_009_t
20/65 Test: JSONDocumentBuilder_markDeleted_009_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/JSONDocumentBuilder_markDeleted_009_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/test009.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test009.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/JSONDocumentBuilder_markDeleted_009_t.d
"JSONDocumentBuilder_markDeleted_009_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.665747  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.665887  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.667164  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.667207  1  5 findChild() args  path=<operation>
09-16 14:45:24.670757  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.673319  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.673353  1  5 findChild() found child value=std::string(markDeleted)
09-16 14:45:24.673469  1  5 findChild() resultDocument=<{
"operation" : "markDeleted"
}>
09-16 14:45:24.673477  1  5 findChild() Find succeeded.
09-16 14:45:24.675074  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.675084  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.675324  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.675466  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.675481  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.675566  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.675574  1  5 findChild() Find succeeded.
09-16 14:45:24.676835  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.676844  1  5 findChild() args  path=<end-state>
09-16 14:45:24.677076  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.677210  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.677224  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.677305  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.677313  1  5 findChild() Find succeeded.
09-16 14:45:24.678517  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.678526  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.678744  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.678877  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.678907  1  5 findChild() found child value=int(1)
09-16 14:45:24.678987  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.678995  1  5 findChild() Find succeeded.
09-16 14:45:24.679957  1  7 markDeleted()
09-16 14:45:24.680016  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.680026  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isdeleted" : true
    }
}>
09-16 14:45:24.680032  1  4 replaceChild() args  path=<bookkeeping.isdeleted>
09-16 14:45:24.682141  1  4 replaceChild() new child value=bool(true)
09-16 14:45:24.682178  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.684351  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.684485  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.684838  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.684879  1  4 replaceChild() found child value=bool(false)
09-16 14:45:24.685875  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.686000  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.686009  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.686146  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.686157  1 13 appendChild() args  child=<{
    "payload" : {
        "markDeleted" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.686163  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:45:24.686347  1  4 appendChild() new child value=object(...)
09-16 14:45:24.686360  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.686367  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:45:24.687681  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.688668  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.688680  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.688938  1  5 findChild() recurse() args currentView=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.688959  1  5 findChild() found child value=array(...)
09-16 14:45:24.689129  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.689138  1  5 findChild() Find succeeded.
09-16 14:45:24.689618  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.689708  1  3 appendChild() newChild=<{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.689753  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.689762  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.689769  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.689774  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:45:24.691446  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.691474  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.692508  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.692523  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.692779  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.692835  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.693937  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.694157  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.694166  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.694309  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.694318  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isreadonly" : true
    }
}>
09-16 14:45:24.694324  1  4 replaceChild() args  path=<bookkeeping.isreadonly>
09-16 14:45:24.695822  1  4 replaceChild() new child value=bool(true)
09-16 14:45:24.695833  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.696888  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.696900  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.697193  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.697209  1  4 replaceChild() found child value=bool(false)
09-16 14:45:24.698244  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698353  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698364  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.698483  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698492  1 13 appendChild() args  child=<{
    "payload" : {
        "markReadonly" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.698498  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:45:24.698681  1  4 appendChild() new child value=object(...)
09-16 14:45:24.698691  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698698  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:45:24.700065  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.701089  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.701101  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.701389  1  5 findChild() recurse() args currentView=<{
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.701420  1  5 findChild() found child value=array(...)
09-16 14:45:24.701631  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.701640  1  5 findChild() Find succeeded.
09-16 14:45:24.702217  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.702304  1  3 appendChild() newChild=<{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.702370  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.702379  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.702386  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.702391  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:45:24.704111  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.704122  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.705124  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.705136  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.705451  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.705472  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.706531  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.706776  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.706785  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.706902  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.706915  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : true, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markDeleted" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markReadonly" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.710181  1 10 matches() JSON buffers are equal.
Running test:<markDeleted>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_markDeleted_009_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_markDeleted_009_t" time elapsed: 00:00:00
----------------------------------------------------------

23/65 Testing: Readjson_003_t
23/65 Test: Readjson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test003.json" "--skip-return-code" "247" "readjson_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_003_t.d
"Readjson_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
Initial:{
        "document" : {
            "data" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "source" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "module_type" : {
                            "type" : "string", 
                            "comment" : "#Success 1  above satom", 
                            "annotation" : " "
                        }, 
                        "resume_after_timeout" : {
                            "type" : "bool", 
                            "comment" : " ", 
                            "annotation" : "#Success 3 right of satom"
                        }, 
                        "waiting_time" : {
                            "type" : "number", 
                            "comment" : " ", 
                            "annotation" : "//Success 2 right of satom"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find any", 
                    "query" : "not defined"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "json", 
            "rawdata" : "as"
        }, 
        "version" : "version", 
        "configurations" : [
            {
                "name" : "config-005", 
                "assigned" : "Mon Feb 29 21:57:32 2016"
            }
        ], 
        "aliases" : {
            "active" : [

            ], 
            "history" : [

            ]
        }, 
        "bookkeeping" : {
            "isdeleted" : false, 
            "isreadonly" : true, 
            "created" : "Tue Dec 29 18:19:25 2015", 
            "updates" : [
                {
                    "addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
                }, 
                {
                    "setVersion" : "Mon Feb 29 21:57:32 2016"
                }
            ]
        }
    }
Converted:{
"document" : {
"data" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "version",
"configurations" : [
{
"name" : "config-005",
"assigned" : "Mon Feb 29 21:57:32 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
},
{
"setVersion" : "Mon Feb 29 21:57:32 2016"
}
]
}
}
Returned:{
"document" : {
"data" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "version",
"configurations" : [
{
"name" : "config-005",
"assigned" : "Mon Feb 29 21:57:32 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
},
{
"setVersion" : "Mon Feb 29 21:57:32 2016"
}
]
}
}
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"Readjson_003_t" end time: Sep 16 14:45 CDT
"Readjson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

22/65 Testing: Readjson_002_t
22/65 Test: Readjson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test002.json" "--skip-return-code" "247" "readjson_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_002_t.d
"Readjson_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
Initial:{
   "aliases" : []
}
Converted:{
"aliases" : [

]
}
Returned:{
"aliases" : [

]
}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"Readjson_002_t" end time: Sep 16 14:45 CDT
"Readjson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

17/65 Testing: JSONDocumentBuilder_addToGlobalConfig_006_t
17/65 Test: JSONDocumentBuilder_addToGlobalConfig_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/JSONDocumentBuilder_addToGlobalConfig_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/test006.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/globalconfig.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test006.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/JSONDocumentBuilder_addToGlobalConfig_006_t.d
"JSONDocumentBuilder_addToGlobalConfig_006_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.665435  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.665541  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.666854  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.666862  1  5 findChild() args  path=<operation>
09-16 14:45:24.670701  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.673319  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:45:24.673352  1  5 findChild() found child value=std::string(addToGlobalConfig)
09-16 14:45:24.673468  1  5 findChild() resultDocument=<{
"operation" : "addToGlobalConfig"
}>
09-16 14:45:24.673475  1  5 findChild() Find succeeded.
09-16 14:45:24.675078  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.675085  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.675368  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.675519  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:45:24.675530  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.675602  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.675608  1  5 findChild() Find succeeded.
09-16 14:45:24.676865  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.676872  1  5 findChild() args  path=<delta>
09-16 14:45:24.677125  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.677269  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:45:24.677280  1  5 findChild() found child value=std::string(globalconfig.json)
09-16 14:45:24.677349  1  5 findChild() resultDocument=<{
"delta" : "globalconfig.json"
}>
09-16 14:45:24.677355  1  5 findChild() Find succeeded.
09-16 14:45:24.678393  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.678403  1  5 findChild() args  path=<end-state>
09-16 14:45:24.678652  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.678794  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:45:24.678805  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.678874  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.678880  1  5 findChild() Find succeeded.
09-16 14:45:24.680083  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.680090  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.680338  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.680484  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:45:24.680508  1  5 findChild() found child value=int(1)
09-16 14:45:24.680581  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.680587  1  5 findChild() Find succeeded.
09-16 14:45:24.681548  1  5 addToGlobalConfig() args  globalconfig=<{
    "configurations" : "globalconfig01"
}>
09-16 14:45:24.682585  1 10 _makeaddToGlobalConfig() globalConfig<{"name":"globalconfig01","assigned":"Mon Feb  8 14:00:30 2016"}>
09-16 14:45:24.682638  1 13 appendChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.682645  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "globalconfig01", 
        "assigned" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.682649  1 13 appendChild() args  path=<configurations>
09-16 14:45:24.682858  1  4 appendChild() new child value=object(...)
09-16 14:45:24.682869  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.682874  1  5 findChild() args  path=<configurations>
09-16 14:45:24.684544  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.685917  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.685935  1  5 findChild() found child value=array(...)
09-16 14:45:24.686076  1  5 findChild() resultDocument=<{
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.686082  1  5 findChild() Find succeeded.
09-16 14:45:24.686528  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.686618  1  3 appendChild() newChild=<{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.686656  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.686664  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.686671  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.686675  1  4 replaceChild() args  path=<configurations>
09-16 14:45:24.688343  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.688355  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.689398  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.689441  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.690517  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.690659  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.690669  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.690791  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.690798  1 13 appendChild() args  child=<{
    "payload" : {
        "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.690801  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:45:24.690956  1  4 appendChild() new child value=object(...)
09-16 14:45:24.690965  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.690971  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:45:24.692486  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.693614  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.693629  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.693851  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.693864  1  5 findChild() found child value=array(...)
09-16 14:45:24.694018  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.694024  1  5 findChild() Find succeeded.
09-16 14:45:24.694493  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.694563  1  3 appendChild() newChild=<{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.694601  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.694607  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.694613  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.694616  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:45:24.696300  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.696307  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.697418  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.697427  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.697637  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.697653  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.698780  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698939  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698947  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.699020  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.699028  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.702288  1 10 matches() JSON buffers are equal.
Running test:<addToGlobalConfig>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_addToGlobalConfig_006_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_addToGlobalConfig_006_t" time elapsed: 00:00:00
----------------------------------------------------------

19/65 Testing: JSONDocumentBuilder_markReadonly_008_t
19/65 Test: JSONDocumentBuilder_markReadonly_008_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/JSONDocumentBuilder_markReadonly_008_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/test008.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test008.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/JSONDocumentBuilder_markReadonly_008_t.d
"JSONDocumentBuilder_markReadonly_008_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.665435  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.665546  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.666854  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.666864  1  5 findChild() args  path=<operation>
09-16 14:45:24.670701  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.673319  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.673352  1  5 findChild() found child value=std::string(markReadonly)
09-16 14:45:24.673472  1  5 findChild() resultDocument=<{
"operation" : "markReadonly"
}>
09-16 14:45:24.673478  1  5 findChild() Find succeeded.
09-16 14:45:24.675077  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.675084  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.675324  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.675460  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.675471  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.675542  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.675548  1  5 findChild() Find succeeded.
09-16 14:45:24.676795  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.676801  1  5 findChild() args  path=<end-state>
09-16 14:45:24.677010  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.677135  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.677146  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.677214  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.677220  1  5 findChild() Find succeeded.
09-16 14:45:24.678450  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.678457  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.678664  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.678788  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:45:24.678814  1  5 findChild() found child value=int(1)
09-16 14:45:24.678886  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.678892  1  5 findChild() Find succeeded.
09-16 14:45:24.679799  1  6 markReadonly()
09-16 14:45:24.679856  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.679864  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isreadonly" : true
    }
}>
09-16 14:45:24.679868  1  4 replaceChild() args  path=<bookkeeping.isreadonly>
09-16 14:45:24.681820  1  4 replaceChild() new child value=bool(true)
09-16 14:45:24.681832  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.683260  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.683272  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.683485  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.683519  1  4 replaceChild() found child value=bool(false)
09-16 14:45:24.684505  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.684602  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.684609  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.684722  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.684729  1 13 appendChild() args  child=<{
    "payload" : {
        "markReadonly" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.684733  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:45:24.684872  1  4 appendChild() new child value=object(...)
09-16 14:45:24.684881  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.684886  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:45:24.686240  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.687210  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.687220  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.687431  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.687447  1  5 findChild() found child value=array(...)
09-16 14:45:24.687604  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.687610  1  5 findChild() Find succeeded.
09-16 14:45:24.688070  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.688141  1  3 appendChild() newChild=<{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.688178  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.688184  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.688188  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.688192  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:45:24.689784  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.689792  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.690755  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.690768  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.690995  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.691046  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.692190  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.692362  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.692369  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.692480  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.692490  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markReadonly" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.695717  1 10 matches() JSON buffers are equal.
Running test:<markReadonly>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_markReadonly_008_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_markReadonly_008_t" time elapsed: 00:00:00
----------------------------------------------------------

24/65 Testing: Readjson_004_t
24/65 Test: Readjson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test004.json" "--skip-return-code" "247" "readjson_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_004_t.d
"Readjson_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
Initial:{ "document" : [ [1,"2"] , [2,"4"]]}
Converted:{
"document" : [
[
1,
"2"
],
[
2,
"4"
]
]
}
Returned:{
"document" : [
[
1,
"2"
],
[
2,
"4"
]
]
}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"Readjson_004_t" end time: Sep 16 14:45 CDT
"Readjson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

18/65 Testing: JSONDocumentBuilder_setVersion_007_t
18/65 Test: JSONDocumentBuilder_setVersion_007_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/JSONDocumentBuilder_setVersion_007_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/test007.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/version.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test007.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/JSONDocumentBuilder_setVersion_007_t.d
"JSONDocumentBuilder_setVersion_007_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.665435  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:24.665541  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:45:24.666856  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.666864  1  5 findChild() args  path=<operation>
09-16 14:45:24.670701  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.673319  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:45:24.673352  1  5 findChild() found child value=std::string(setVersion)
09-16 14:45:24.673470  1  5 findChild() resultDocument=<{
"operation" : "setVersion"
}>
09-16 14:45:24.673477  1  5 findChild() Find succeeded.
09-16 14:45:24.675076  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.675083  1  5 findChild() args  path=<begin-state>
09-16 14:45:24.675355  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.675503  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:45:24.675514  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:45:24.675586  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:45:24.675592  1  5 findChild() Find succeeded.
09-16 14:45:24.676843  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.676850  1  5 findChild() args  path=<delta>
09-16 14:45:24.677089  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.677230  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:45:24.677240  1  5 findChild() found child value=std::string(version.json)
09-16 14:45:24.677309  1  5 findChild() resultDocument=<{
"delta" : "version.json"
}>
09-16 14:45:24.677314  1  5 findChild() Find succeeded.
09-16 14:45:24.678334  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.678341  1  5 findChild() args  path=<end-state>
09-16 14:45:24.678583  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.678722  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:45:24.678732  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:45:24.678801  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:45:24.678806  1  5 findChild() Find succeeded.
09-16 14:45:24.680270  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:45:24.680279  1  5 findChild() args  path=<must-succeed>
09-16 14:45:24.680747  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.680963  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:45:24.680993  1  5 findChild() found child value=int(1)
09-16 14:45:24.681093  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:45:24.681102  1  5 findChild() Find succeeded.
09-16 14:45:24.682267  1  6 setVersion() args  version=<{
    "version" : "updatedVersion"
}>
09-16 14:45:24.682309  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.682316  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "version" : "updatedVersion"
    }
}>
09-16 14:45:24.682320  1  4 replaceChild() args  path=<version>
09-16 14:45:24.684098  1  4 replaceChild() new child value=std::string(updatedVersion)
09-16 14:45:24.684108  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.685886  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.685937  1  4 replaceChild() found child value=std::string(version1)
09-16 14:45:24.687644  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.687780  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.687789  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.687936  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.687947  1 13 appendChild() args  child=<{
    "payload" : {
        "setVersion" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:45:24.687953  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:45:24.688183  1  4 appendChild() new child value=object(...)
09-16 14:45:24.688196  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.688203  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:45:24.690968  1  5 findChild() recurse() args currentDepth=1
09-16 14:45:24.692871  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.692897  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:24.693290  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.693324  1  5 findChild() found child value=array(...)
09-16 14:45:24.693612  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.693622  1  5 findChild() Find succeeded.
09-16 14:45:24.694311  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.694386  1  3 appendChild() newChild=<{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:45:24.694433  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "setVersion" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.694440  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.694444  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "setVersion" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:45:24.694448  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:45:24.695976  1  4 replaceChild() new child value=array(...)
09-16 14:45:24.695984  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:45:24.696952  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.696963  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:24.697171  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:45:24.697210  1  4 replaceChild() found child value=array(...)
09-16 14:45:24.698238  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698399  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698406  1  4 replaceChild() Replace succeeded.
09-16 14:45:24.698480  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:45:24.698489  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "updatedVersion", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "setVersion" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:45:24.701363  1 10 matches() JSON buffers are equal.
Running test:<setVersion>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_setVersion_007_t" end time: Sep 16 14:45 CDT
"JSONDocumentBuilder_setVersion_007_t" time elapsed: 00:00:00
----------------------------------------------------------

21/65 Testing: Readjson_001_t
21/65 Test: Readjson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test001.json" "--skip-return-code" "247" "readjson_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_001_t.d
"Readjson_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
Initial:{
   "aliases" : {}
}
Converted:{
"aliases" : {

}
}
Returned:{
"aliases" : {

}
}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"Readjson_001_t" end time: Sep 16 14:45 CDT
"Readjson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

31/65 Testing: Convert_GUIJson2DBJson_001_t
31/65 Test: Convert_GUIJson2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_001_t.d
"Convert_GUIJson2DBJson_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.748945  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.751058  1 14 json_gui_to_db() begin
09-16 14:45:24.779581  1 14 json_gui_to_db() read guiAST
09-16 14:45:24.779821  1 14 json_gui_to_db() created dbAST
09-16 14:45:24.780006  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.780108  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.780177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.780274  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.780466  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.780545  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:24.780595  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780651  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780805  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:24.780815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780829  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.780839  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.780848  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.780864  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.780873  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.780886  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.780896  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:45:24.780905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780936  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780979  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:45:24.780988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781002  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.781012  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.781019  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.781026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.781034  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.781047  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.781090  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:45:24.781102  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:45:24.781111  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781143  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781159  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781199  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.781212  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.781224  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_depth, value=int(2)
09-16 14:45:24.781233  1 16 json_node_t() makeChild() node_name=<event_queue_depth>
09-16 14:45:24.781240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781312  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.781325  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.781336  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_wait_time, value=int(1)
09-16 14:45:24.781346  1 16 json_node_t() makeChild() node_name=<event_queue_wait_time>
09-16 14:45:24.781354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781450  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.781464  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.781475  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_events_per_bunch, value=int(1)
09-16 14:45:24.781485  1 16 json_node_t() makeChild() node_name=<expected_events_per_bunch>
09-16 14:45:24.781494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781564  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.781577  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.781589  1 15 json_gui_to_db() operator() switch ARRAY child name= file_duration, value=int(0)
09-16 14:45:24.781599  1 16 json_node_t() makeChild() node_name=<file_duration>
09-16 14:45:24.781608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781680  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.781693  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.781704  1 15 json_gui_to_db() operator() switch ARRAY child name= file_event_count, value=int(0)
09-16 14:45:24.781715  1 16 json_node_t() makeChild() node_name=<file_event_count>
09-16 14:45:24.781732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781763  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781803  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.781816  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.781829  1 15 json_gui_to_db() operator() switch ARRAY child name= file_size_MB, value=int(8000)
09-16 14:45:24.781839  1 16 json_node_t() makeChild() node_name=<file_size_MB>
09-16 14:45:24.781848  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781864  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781897  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781930  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.781943  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.781954  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:45:24.781964  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:45:24.781973  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.781988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782044  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.782057  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.782068  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:45:24.782078  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:24.782087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782146  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782158  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.782171  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.782182  1 15 json_gui_to_db() operator() switch ARRAY child name= onmon_event_prescale, value=int(1)
09-16 14:45:24.782192  1 16 json_node_t() makeChild() node_name=<onmon_event_prescale>
09-16 14:45:24.782201  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782272  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.782285  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:24.782300  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:45:24.782310  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:45:24.782319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782334  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782378  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782389  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.782406  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.782435  1 15 json_gui_to_db() operator() switch ARRAY child name= xmlrpc_client_list, value=std::string(;http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5)
09-16 14:45:24.782448  1 16 json_node_t() makeChild() node_name=<xmlrpc_client_list>
09-16 14:45:24.782457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782536  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.782550  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.782561  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:24.782572  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:24.782580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782595  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782653  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.782667  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.782677  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:24.782686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782701  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782763  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:24.782772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782785  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.782802  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.782810  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.782818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.782827  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.782841  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.782852  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:45:24.782861  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782877  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782908  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782941  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:45:24.782949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.782963  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.782973  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.782981  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.782988  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.782998  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.783010  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.783022  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/aggregator/agg_%UID%_metrics.log)
09-16 14:45:24.783032  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:45:24.783041  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783057  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783116  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.783129  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.783140  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:45:24.783150  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:45:24.783158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783229  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.783242  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.783253  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:45:24.783263  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:45:24.783272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783333  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783344  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.783358  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:24.783368  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:45:24.783378  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:45:24.783387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783407  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783469  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.783483  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.783493  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:24.783502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783582  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:24.783591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783605  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.783615  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.783623  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.783631  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.783642  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.783655  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.783667  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:24.783675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783753  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:24.783762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783776  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.783785  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.783793  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.783801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.783809  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.783823  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.783834  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:24.783843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783890  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783922  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:24.783930  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.783943  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.783953  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.783961  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.783968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.783979  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.783993  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.784004  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:24.784013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784093  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:24.784102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784115  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.784124  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.784132  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.784139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.784148  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.784162  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.784173  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:24.784182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784215  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784263  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:24.784272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784285  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.784295  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.784304  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.784311  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.784320  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.784332  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.784345  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:24.784354  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:24.784363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784379  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784417  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784431  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784442  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.784456  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.784468  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:45:24.784478  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:24.784487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784560  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.784574  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.784584  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:24.784593  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784625  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784671  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:24.784681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784694  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.784704  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.784713  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.784720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.784729  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.784742  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.784754  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:24.784763  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:24.784772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784846  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.784859  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.784872  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:45:24.784882  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:24.784891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.784967  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.784980  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:24.784994  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:24.785004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785046  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:24.785056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785303  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:24.785314  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.785322  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.785330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.785350  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.785363  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:24.785376  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:45:24.785384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785415  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:45:24.785426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785451  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785517  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:24.785527  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.785535  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.785542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.785552  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:45:24.785572  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.785605  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.785620  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:24.785633  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:24.785642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785660  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:24.785669  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785701  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785748  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:24.785758  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.785766  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.785773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.785783  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:24.785791  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.785804  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.785817  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:24.785830  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:24.785839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785857  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:24.785866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785882  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.785955  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:24.785964  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.785973  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.785980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.785990  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:24.785999  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.786020  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.786034  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.786044  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:24.786053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786131  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:24.786139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786152  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.786162  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.786170  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.786177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.786186  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.786199  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.786209  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:45:24.786218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786295  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:45:24.786304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786317  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.786327  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.786335  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.786342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.786351  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.786363  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.786375  1 15 json_gui_to_db() operator() switch ARRAY child name= instance_name, value=std::string(ArtdaqDemo)
09-16 14:45:24.786385  1 16 json_node_t() makeChild() node_name=<instance_name>
09-16 14:45:24.786393  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786431  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786470  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.786483  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.786495  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(ArtdaqDemoBuildInfo)
09-16 14:45:24.786506  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:24.786515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786590  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.786602  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.786615  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQAG)
09-16 14:45:24.786624  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:45:24.786633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786703  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.786717  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.786727  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:24.786736  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786751  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786811  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:24.786821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786833  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.786843  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.786850  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.786858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.786866  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.786879  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.786890  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:24.786899  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786976  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:24.786985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.786998  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.787008  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.787016  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.787023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.787031  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.787044  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.787056  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:24.787066  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:24.787074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787089  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787136  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787147  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.787160  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.787172  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:45:24.787182  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:45:24.787191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787222  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787250  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787263  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.787276  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.787286  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:24.787295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787341  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787372  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:24.787381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787398  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.787409  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.787417  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.787425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.787433  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.787446  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.787458  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:45:24.787468  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:45:24.787476  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787491  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787551  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.787564  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.787575  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:24.787584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787660  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:24.787669  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787682  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.787691  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.787699  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.787706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.787715  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.787728  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.787739  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonInput)
09-16 14:45:24.787750  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:24.787758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787790  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.787849  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:45:24.787921  1 14 json_gui_to_db() created db_node
09-16 14:45:24.799531  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_001_t" end time: Sep 16 14:45 CDT
"Convert_GUIJson2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

26/65 Testing: Readjson_006_t
26/65 Test: Readjson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test006.json" "--skip-return-code" "247" "readjson_t" "-c" "test006.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_006_t.d
"Readjson_006_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
Initial:	{
		"SUPERVISOR_INSTANCE": 1,
		"AGGREGATOR_ID": "",
		"STATUS": "",
		"CONFIGURATION_STRING": "A\"\" \"X\"\" Z"
	}
Converted:{
"SUPERVISOR_INSTANCE" : 1,
"AGGREGATOR_ID" : "",
"STATUS" : "",
"CONFIGURATION_STRING" : "A\"\" \"X\"\" Z"
}
Returned:{
"SUPERVISOR_INSTANCE" : 1,
"AGGREGATOR_ID" : "",
"STATUS" : "",
"CONFIGURATION_STRING" : "A\"\" \"X\"\" Z"
}
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"Readjson_006_t" end time: Sep 16 14:45 CDT
"Readjson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

25/65 Testing: Readjson_005_t
25/65 Test: Readjson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test005.json" "--skip-return-code" "247" "readjson_t" "-c" "test005.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_005_t.d
"Readjson_005_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
Initial:{
        "document" : {
            "data" : {
                "NAME" : "CONFIGURATION_ALIASES", 
                "COMMENT" : "", 
                "AUTHOR" : "", 
                "CREATION_TIME" : 1465601490, 
                "NUM_OF_COLS" : 8, 
                "NUM_OF_ROWS" : 3, 
                "DATA_SET" : [
                    {
                        "CONFIGURATION_KEY_ID" : 3, 
                        "CONFIGURATION_KEY" : "3", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "Physics", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Physics", 
                        "AUTHOR" : "Uplegger"
                    }, 
                    {
                        "CONFIGURATION_KEY_ID" : 5, 
                        "CONFIGURATION_KEY" : "5", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "SCurve", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC", 
                        "AUTHOR" : "Uplegger"
                    }, 
                    {
                        "CONFIGURATION_KEY_ID" : 6, 
                        "CONFIGURATION_KEY" : "6", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "SCurve_Default_1x1", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC", 
                        "AUTHOR" : "Uplegger"
                    }
                ]
            }, 
            "metadata" : {
                "comments" : {
                    "empty" : "empty"
                }
            }, 
            "search" : [
                {
                    "name" : "find any", 
                    "query" : "not defined"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "json", 
            "rawdata" : "as"
        }, 
        "version" : "0", 
        "configurations" : [
            {
                "name" : "notprovided", 
                "assigned" : "Fri Jun 10 18:31:30 2016"
            }
        ], 
        "aliases" : {
            "active" : [

            ], 
            "history" : [

            ]
        }, 
        "changelog" : "empty", 
        "bookkeeping" : {
            "isdeleted" : false, 
            "isreadonly" : true, 
            "created" : "Tue Dec 29 18:19:25 2015", 
            "updates" : [
                {
                    "addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
                }, 
                {
                    "setVersion" : "Fri Jun 10 18:31:30 2016"
                }, 
                {
                    "setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
                }
            ]
        }, 
        "configurable_entity" : {
            "name" : "CMSROOT"
        }, 
        "_id" : {
            "_oid" : "130869f2a1aa48b0acb3ac80"
        }
    }
Converted:{
"document" : {
"data" : {
"NAME" : "CONFIGURATION_ALIASES",
"COMMENT" : "",
"AUTHOR" : "",
"CREATION_TIME" : 1465601490,
"NUM_OF_COLS" : 8,
"NUM_OF_ROWS" : 3,
"DATA_SET" : [
{
"CONFIGURATION_KEY_ID" : 3,
"CONFIGURATION_KEY" : "3",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "Physics",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Physics",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 5,
"CONFIGURATION_KEY" : "5",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 6,
"CONFIGURATION_KEY" : "6",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve_Default_1x1",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
}
]
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "0",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Jun 10 18:31:30 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
},
{
"setVersion" : "Fri Jun 10 18:31:30 2016"
},
{
"setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
}
]
},
"configurable_entity" : {
"name" : "CMSROOT"
},
"_id" : {
"_oid" : "130869f2a1aa48b0acb3ac80"
}
}
Returned:{
"document" : {
"data" : {
"NAME" : "CONFIGURATION_ALIASES",
"COMMENT" : "",
"AUTHOR" : "",
"CREATION_TIME" : 1465601490,
"NUM_OF_COLS" : 8,
"NUM_OF_ROWS" : 3,
"DATA_SET" : [
{
"CONFIGURATION_KEY_ID" : 3,
"CONFIGURATION_KEY" : "3",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "Physics",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Physics",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 5,
"CONFIGURATION_KEY" : "5",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 6,
"CONFIGURATION_KEY" : "6",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve_Default_1x1",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
}
]
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "0",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Jun 10 18:31:30 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
},
{
"setVersion" : "Fri Jun 10 18:31:30 2016"
},
{
"setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
}
]
},
"configurable_entity" : {
"name" : "CMSROOT"
},
"_id" : {
"_oid" : "130869f2a1aa48b0acb3ac80"
}
}
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"Readjson_005_t" end time: Sep 16 14:45 CDT
"Readjson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

29/65 Testing: Convert_DBJson2GUIJson_003_t
29/65 Test: Convert_DBJson2GUIJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_003_t.d
"Convert_DBJson2GUIJson_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.748945  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.750891  1 10 json_db_to_gui() begin
09-16 14:45:24.758668  1 10 json_db_to_gui() read dbAST
09-16 14:45:24.758860  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.758918  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.758958  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.759002  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.759080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759112  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:45:24.759142  1 13 json_db_to_gui() child args name <prolog>
09-16 14:45:24.759148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759189  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:45:24.759197  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.759211  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.759219  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.759277  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.759338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.759385  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.759393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.759483  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.759491  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.759498  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.759505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.759521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759529  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:45:24.759539  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:45:24.759545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759731  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:45:24.759742  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.759749  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.759756  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.759768  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.759781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.759795  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.759802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.759850  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.759857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759872  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.759879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759911  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce_standard>
09-16 14:45:24.759920  1 13 json_db_to_gui() child args name <rce_standard>
09-16 14:45:24.759926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.759955  1 13 json_db_to_gui() metadata node was found, name=<rce_standard>
09-16 14:45:24.759964  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.759971  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.759977  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.759988  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.760000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760015  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.760022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760051  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.760058  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.760065  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.760072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.760087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760095  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:45:24.760105  1 13 json_db_to_gui() child args name <metrics>
09-16 14:45:24.760111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760141  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:45:24.760151  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.760158  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.760164  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.760177  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.760191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760206  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.760212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760241  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.760247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760260  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.760267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760278  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:24.760287  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:24.760302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760330  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:24.760339  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.760355  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.760361  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.760372  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.760393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760413  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.760420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760457  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.760464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760478  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.760485  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760495  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:45:24.760504  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:45:24.760510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760538  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:45:24.760546  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.760553  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.760559  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.760571  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.760583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760596  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.760602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760629  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.760637  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.760643  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.760649  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.760665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760673  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:24.760681  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:24.760687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760716  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:24.760726  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.760732  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.760738  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.760750  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.760763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760777  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.760784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760811  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.760818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760832  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.760839  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760851  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:45:24.760861  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:45:24.760867  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760896  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:45:24.760906  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.760912  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.760918  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.760929  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.760941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760955  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.760962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.760974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.760988  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.760994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761007  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.761014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761032  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.761040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761053  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.761060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761070  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:24.761080  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:24.761087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761113  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:24.761123  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.761130  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.761137  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.761149  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.761162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761176  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.761182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761204  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.761210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761220  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.761225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761235  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:45:24.761242  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:45:24.761247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761272  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:45:24.761280  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.761286  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.761292  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.761301  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.761312  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761323  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.761328  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761349  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.761355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761365  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.761370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761379  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:45:24.761387  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:45:24.761393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761431  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:45:24.761439  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.761445  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.761451  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.761469  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.761482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761495  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.761500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761522  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.761528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761539  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.761544  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761554  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce_standard>
09-16 14:45:24.761562  1 13 json_db_to_gui() child args name <rce_standard>
09-16 14:45:24.761567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761591  1 13 json_db_to_gui() metadata node was found, name=<rce_standard>
09-16 14:45:24.761599  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.761605  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.761611  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.761620  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.761630  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761642  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.761648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761679  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.761686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761725  1 11 json_db_to_gui() missing annotation for string data; keyrce_standard
09-16 14:45:24.761737  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.761742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761753  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard>
09-16 14:45:24.761761  1 13 json_db_to_gui() child args name <rce04_standard>
09-16 14:45:24.761766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761799  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard>
09-16 14:45:24.761807  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.761822  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.761828  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.761839  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.761858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761870  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.761876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.761909  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.761914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761926  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.761931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761941  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:45:24.761949  1 13 json_db_to_gui() child args name <rce04_standard.fragment_receiver.fragment_id>
09-16 14:45:24.761954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.761978  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:45:24.761986  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.761991  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.761997  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762007  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.762018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762030  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.762035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762059  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.762065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762076  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.762082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762091  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard.fragment_receiver.board_id>
09-16 14:45:24.762099  1 13 json_db_to_gui() child args name <rce04_standard.fragment_receiver.board_id>
09-16 14:45:24.762104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762127  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard.fragment_receiver.board_id>
09-16 14:45:24.762135  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762141  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.762146  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762156  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.762166  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762177  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.762183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762204  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.762209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762220  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.762225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762237  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.762242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762250  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:45:24.762258  1 13 json_db_to_gui() child args name <main>
09-16 14:45:24.762263  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762270  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:45:24.762277  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762283  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.762288  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762298  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.762308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762319  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.762324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762335  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762347  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762352  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.762358  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.762364  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.762377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762383  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard>
09-16 14:45:24.762390  1 13 json_db_to_gui() child args name <rce05_standard>
09-16 14:45:24.762399  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762423  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard>
09-16 14:45:24.762431  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762436  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.762442  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762452  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.762463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762474  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.762480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762502  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.762507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762518  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.762524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762533  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:45:24.762541  1 13 json_db_to_gui() child args name <rce05_standard.fragment_receiver.fragment_id>
09-16 14:45:24.762546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762569  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:45:24.762577  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762582  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.762588  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762598  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.762608  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762620  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.762626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762648  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.762654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762665  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.762670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762679  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard.fragment_receiver.board_id>
09-16 14:45:24.762686  1 13 json_db_to_gui() child args name <rce05_standard.fragment_receiver.board_id>
09-16 14:45:24.762691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762714  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard.fragment_receiver.board_id>
09-16 14:45:24.762721  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762727  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.762732  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762742  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.762752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762763  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.762769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762792  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.762798  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762810  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.762815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762827  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.762833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762862  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:45:24.762896  1 10 json_db_to_gui() created gui_node
09-16 14:45:24.772995  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_003_t" end time: Sep 16 14:45 CDT
"Convert_DBJson2GUIJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

28/65 Testing: Convert_DBJson2GUIJson_002_t
28/65 Test: Convert_DBJson2GUIJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_002_t.d
"Convert_DBJson2GUIJson_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.746215  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.748616  1 10 json_db_to_gui() begin
09-16 14:45:24.762182  1 10 json_db_to_gui() read dbAST
09-16 14:45:24.762311  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762346  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.762373  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.762406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.762460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762480  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:24.762500  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:24.762504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762532  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:24.762537  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762547  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.762551  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762590  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.762627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762657  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.762661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762716  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762721  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.762725  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.762729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.762739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762743  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:45:24.762748  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:45:24.762752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762869  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:45:24.762877  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762881  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.762885  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762893  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.762900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762908  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.762912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.762927  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762931  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.762935  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.762939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.762947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762952  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:45:24.762957  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:45:24.762960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.762978  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:45:24.762983  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.762987  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.762991  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.762998  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763013  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763045  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.763049  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763057  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763082  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:45:24.763087  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:45:24.763091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763108  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:45:24.763113  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763117  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763120  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763127  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763134  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763142  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763159  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.763163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763169  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763179  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:45:24.763184  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:45:24.763187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763203  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:45:24.763208  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763211  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763215  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763222  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763236  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763253  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.763256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763263  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763272  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:24.763277  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:24.763280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763296  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:24.763301  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763304  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763308  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763315  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763329  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763346  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.763350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763356  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763365  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:45:24.763370  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:45:24.763373  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763389  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:45:24.763394  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763411  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763415  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763422  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763446  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763473  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.763477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763484  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763494  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:45:24.763498  1 13 json_db_to_gui() child args name <use_art>
09-16 14:45:24.763502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763518  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:45:24.763523  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763526  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763530  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763537  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763544  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763551  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763554  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763568  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.763571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763578  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763587  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:45:24.763592  1 13 json_db_to_gui() child args name <verbose>
09-16 14:45:24.763595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763611  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:45:24.763616  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763620  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763623  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763630  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763645  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763655  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763661  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.763665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763672  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763686  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763695  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:24.763700  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:24.763704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763718  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:24.763723  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763727  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763731  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763737  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763752  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763769  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.763773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763779  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.763783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763788  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:45:24.763793  1 13 json_db_to_gui() child args name <metrics>
09-16 14:45:24.763797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763812  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:45:24.763817  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763820  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763824  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763830  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763844  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763855  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763863  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763866  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.763870  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.763874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.763883  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763887  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:45:24.763892  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:45:24.763895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763912  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:45:24.763917  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763921  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.763924  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.763931  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.763938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763946  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.763949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763956  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.763964  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.763968  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.763972  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.763975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.763984  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.763988  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:45:24.763993  1 13 json_db_to_gui() child args name <fileName>
09-16 14:45:24.763996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764013  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:45:24.764018  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764021  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.764025  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764032  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.764039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764046  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.764050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764057  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764070  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.764074  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764081  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.764085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764091  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:45:24.764095  1 13 json_db_to_gui() child args name <level>
09-16 14:45:24.764099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764115  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:45:24.764120  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764124  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.764127  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764134  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.764141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764148  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.764152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764165  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.764169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764176  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.764179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764185  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:45:24.764190  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:45:24.764196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764213  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:45:24.764218  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764221  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.764225  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764231  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.764238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764246  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.764249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764263  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.764267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764273  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.764277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764283  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:45:24.764288  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:45:24.764291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764307  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:45:24.764312  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764316  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.764320  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764326  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.764333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764340  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.764344  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764357  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.764361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764368  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.764371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764379  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.764382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764389  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.764392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764409  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.764414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764420  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:45:24.764425  1 13 json_db_to_gui() child args name <outputs>
09-16 14:45:24.764429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764434  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:45:24.764438  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764442  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.764445  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764452  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.764459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764467  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.764470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764486  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764490  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.764493  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.764497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.764506  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764510  1 11 json_db_to_gui() operator() switch OBJECT child name=<rootMPIOutput>
09-16 14:45:24.764515  1 13 json_db_to_gui() child args name <rootMPIOutput>
09-16 14:45:24.764518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764534  1 13 json_db_to_gui() metadata node was found, name=<rootMPIOutput>
09-16 14:45:24.764539  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764543  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.764546  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764553  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.764560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764568  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.764571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764586  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764590  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.764594  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.764597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.764606  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764610  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:45:24.764615  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:45:24.764618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764634  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:45:24.764639  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764643  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.764647  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764653  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.764660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764668  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.764671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764686  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764690  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.764693  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.764697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.764706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764710  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:45:24.764715  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:45:24.764718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764734  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:45:24.764739  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764743  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.764747  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764763  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.764770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764778  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.764782  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.764789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.764821  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764831  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.764835  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:24.764839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.764854  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764867  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.764876  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:24.764880  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.764929  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:45:24.764947  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764956  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.764960  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.764966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.764986  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:45:24.764991  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.764995  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.764998  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.765010  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765022  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765031  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:24.765036  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:24.765040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765057  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:24.765062  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765066  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.765069  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765077  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.765084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765092  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.765096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765110  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.765114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765120  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765124  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765132  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765142  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765151  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:45:24.765156  1 13 json_db_to_gui() child args name <physics>
09-16 14:45:24.765159  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765165  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:45:24.765169  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765173  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.765177  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765183  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.765190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765198  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.765201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765216  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765220  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.765224  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.765228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.765237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765241  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:45:24.765246  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:45:24.765249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765265  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:45:24.765270  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765274  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.765278  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765285  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.765292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765300  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.765303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765318  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765322  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.765326  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.765330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.765339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765345  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765355  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:45:24.765360  1 13 json_db_to_gui() child args name <filters>
09-16 14:45:24.765363  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765379  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:45:24.765384  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765388  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.765391  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765402  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.765410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765417  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.765421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765428  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765436  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765440  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.765444  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.765448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.765457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765462  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:45:24.765467  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:45:24.765470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765487  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:45:24.765492  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765496  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.765499  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765506  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.765514  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765521  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.765525  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765540  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765544  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.765548  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.765551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.765560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765564  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:24.765569  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:24.765573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765590  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:24.765595  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765598  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.765602  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765609  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.765616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765624  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.765627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765642  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.765645  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765652  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765662  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:45:24.765670  1 13 json_db_to_gui() child args name <nth>
09-16 14:45:24.765675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765701  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:45:24.765710  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765716  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.765722  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765734  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.765746  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765758  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.765764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765788  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.765794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765807  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765826  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.765831  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765840  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:45:24.765848  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:45:24.765854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765878  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:45:24.765887  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765893  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.765899  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.765909  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.765920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765932  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.765938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.765949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.765961  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.765967  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.765973  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.765979  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.765993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766000  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:24.766009  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:24.766016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766043  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:24.766053  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766060  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.766066  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.766078  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.766091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.766105  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.766113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.766140  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.766147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766160  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.766168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766178  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:45:24.766188  1 13 json_db_to_gui() child args name <nth>
09-16 14:45:24.766194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766223  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:45:24.766232  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766238  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.766245  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.766256  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.766269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.766282  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.766289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.766316  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.766323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766336  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.766342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766355  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.766363  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766375  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.766381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766391  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:45:24.766410  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:45:24.766416  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766444  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:45:24.766453  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766468  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.766474  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.766486  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.766497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.766511  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.766518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.766545  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766553  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.766559  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:24.766566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.766584  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766592  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.766599  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:24.766605  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.766613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.766623  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:45:24.766631  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766638  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.766644  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.766651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.766665  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.766672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766683  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:45:24.766693  1 13 json_db_to_gui() child args name <p1>
09-16 14:45:24.766699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766725  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:45:24.766735  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766741  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.766747  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.766758  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.766770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.766783  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.766790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.766818  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766825  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.766832  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:24.766838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.766864  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766872  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.766878  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:24.766884  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.766892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.766904  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.766911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766922  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:45:24.766931  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:45:24.766937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.766965  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:45:24.766974  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.766981  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.766987  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.766998  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.767011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767026  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.767033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767061  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767068  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.767075  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:24.767081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.767099  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767107  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.767114  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:24.767121  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.767130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.767140  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:24.767149  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767156  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.767163  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.767170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.767184  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.767191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767203  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:45:24.767213  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:45:24.767219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767246  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:45:24.767256  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767262  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.767268  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.767280  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.767293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767306  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.767313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767340  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767347  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.767354  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:24.767361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.767380  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767388  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.767398  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:24.767405  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.767414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.767422  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:24.767430  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767437  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.767442  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.767448  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.767461  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.767467  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767478  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:45:24.767486  1 13 json_db_to_gui() child args name <producers>
09-16 14:45:24.767492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767519  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:45:24.767527  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767533  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.767538  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.767549  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.767561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767574  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.767581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767596  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767612  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767619  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.767627  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.767633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.767649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767662  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.767668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767682  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.767688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767698  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:45:24.767708  1 13 json_db_to_gui() child args name <process_name>
09-16 14:45:24.767713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767722  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:45:24.767730  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767736  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.767742  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.767753  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.767765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767779  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.767786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767817  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.767824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767837  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.767843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767855  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:45:24.767863  1 13 json_db_to_gui() child args name <services>
09-16 14:45:24.767867  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767872  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:45:24.767877  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767881  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.767885  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.767892  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.767903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767917  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.767923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.767950  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.767958  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.767964  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.767971  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.767990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.767999  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:45:24.768008  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:45:24.768013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768039  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:45:24.768049  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.768057  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.768063  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.768076  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.768089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.768103  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.768109  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.768134  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.768141  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.768146  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.768152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.768166  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768174  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:45:24.768183  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:45:24.768188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768215  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:45:24.768225  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.768232  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.768239  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.768251  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.768264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.768280  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.768288  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.768317  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.768325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768339  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.768345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768357  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:45:24.768365  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:45:24.768371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768406  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:45:24.768417  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.768425  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.768431  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.768445  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.768459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.768474  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.768481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.768506  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.768511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768523  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.768528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768538  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:24.768547  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:24.768552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768578  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:24.768586  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.768592  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.768598  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.768609  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.768620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.768632  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.768638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.768661  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.768666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768678  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.768683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768693  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:24.768700  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:24.768705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.768730  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:24.768738  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.768743  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.768749  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.917023  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.917057  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917077  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.917084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917117  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.917123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917137  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.917143  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917157  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:45:24.917169  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:45:24.917175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917223  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:45:24.917233  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.917240  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.917247  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.917258  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.917270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917283  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.917289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917315  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.917320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917333  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.917338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917353  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.917360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917370  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:45:24.917378  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:45:24.917384  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917419  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:45:24.917429  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.917435  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.917441  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.917452  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.917464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917477  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.917483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917511  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.917518  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.917526  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.917532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.917551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917558  1 11 json_db_to_gui() operator() switch OBJECT child name=<errorOnFailureToPut>
09-16 14:45:24.917566  1 13 json_db_to_gui() child args name <errorOnFailureToPut>
09-16 14:45:24.917572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917600  1 13 json_db_to_gui() metadata node was found, name=<errorOnFailureToPut>
09-16 14:45:24.917608  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.917615  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.917620  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.917631  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.917643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917656  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.917662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917687  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.917692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917704  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.917710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917720  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:45:24.917729  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:45:24.917734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917761  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:45:24.917769  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.917775  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.917781  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.917791  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.917803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917817  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.917823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917848  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.917854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917866  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.917872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917885  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.917891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917903  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.917909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917919  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:45:24.917927  1 13 json_db_to_gui() child args name <source>
09-16 14:45:24.917933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.917942  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:45:24.917949  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.917955  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.917961  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.917971  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.917983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.917995  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.918001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.918026  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918032  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.918038  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.918044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.918067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918074  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type_map>
09-16 14:45:24.918081  1 13 json_db_to_gui() child args name <fragment_type_map>
09-16 14:45:24.918087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918112  1 13 json_db_to_gui() metadata node was found, name=<fragment_type_map>
09-16 14:45:24.918120  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918126  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.918132  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918142  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.918159  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.918173  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.918179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.918204  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918211  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.918217  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:24.918222  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.918238  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918245  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.918251  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:24.918257  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.918286  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:24.918294  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918300  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.918306  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918312  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.918325  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:24.918333  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918338  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.918344  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.918361  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:24.918368  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918374  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.918380  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918386  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.918400  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:24.918408  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918414  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.918420  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918426  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.918437  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:24.918445  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918451  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.918456  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.918473  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:24.918480  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918486  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.918491  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.918511  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.918516  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918527  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:24.918535  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:24.918549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918584  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:24.918592  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918608  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.918614  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918624  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.918645  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.918658  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.918663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918685  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.918698  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.918704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918725  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.918731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918740  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:45:24.918748  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:45:24.918754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918779  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:45:24.918787  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918793  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.918798  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918808  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.918819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.918831  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.918837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.918863  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.918869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918881  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.918887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918897  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:45:24.918905  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:45:24.918910  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.918935  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:45:24.918943  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.918950  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.918956  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.918966  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.918977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.918990  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.918995  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.919007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.919019  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.919025  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.919037  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.919043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.919055  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.919061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.919141  1 10 json_db_to_gui() created gui_node
09-16 14:45:24.934092  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.25 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_002_t" end time: Sep 16 14:45 CDT
"Convert_DBJson2GUIJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

27/65 Testing: Convert_DBJson2GUIJson_001_t
27/65 Test: Convert_DBJson2GUIJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_001_t.d
"Convert_DBJson2GUIJson_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.746215  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.747729  1 10 json_db_to_gui() begin
09-16 14:45:24.751464  1 10 json_db_to_gui() read dbAST
09-16 14:45:24.751609  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.751648  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.751679  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.751710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.751768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.751792  1 11 json_db_to_gui() operator() switch OBJECT child name=<tt>
09-16 14:45:24.751814  1 13 json_db_to_gui() child args name <tt>
09-16 14:45:24.751818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.751967  1 13 json_db_to_gui() metadata node was not found, name=<tt>
09-16 14:45:24.751982  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.751993  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.751998  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.752044  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.752085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.752118  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.752170  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.752181  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.752185  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:24.752189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.752218  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.752223  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:24.752232  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:24.752236  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.752243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.752276  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(mm)
09-16 14:45:24.752295  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.752304  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.752309  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.752314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.752360  1 11 json_db_to_gui() operator() switch ARRAY child value=int(1)
09-16 14:45:24.752366  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.752370  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.752373  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.752377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.752387  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:24.752392  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.752399  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.752404  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.752410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.752426  1 11 json_db_to_gui() operator() switch ARRAY child value=object(...)
09-16 14:45:24.752431  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.752435  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:24.752439  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.752443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:24.752481  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:45:24.752508  1 10 json_db_to_gui() created gui_node
09-16 14:45:24.755042  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.25 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_001_t" end time: Sep 16 14:45 CDT
"Convert_DBJson2GUIJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

32/65 Testing: Convert_GUIJson2DBJson_002_t
32/65 Test: Convert_GUIJson2DBJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_002_t.d
"Convert_GUIJson2DBJson_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.760091  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.761668  1 14 json_gui_to_db() begin
09-16 14:45:24.777006  1 14 json_gui_to_db() read guiAST
09-16 14:45:24.777187  1 14 json_gui_to_db() created dbAST
09-16 14:45:24.777302  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.777357  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.777391  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.777469  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.777586  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.777634  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:24.777665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777739  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777818  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:24.777836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777849  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.777858  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.777866  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.777872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.777880  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.777893  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.777902  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:24.777910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777978  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:24.777985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.777996  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.778006  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.778012  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.778019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.778026  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.778037  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.778117  1 15 json_gui_to_db() operator() switch ARRAY child name= board_id, value=int(0)
09-16 14:45:24.778130  1 16 json_node_t() makeChild() node_name=<board_id>
09-16 14:45:24.778139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778249  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.778265  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.778277  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:45:24.778288  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:45:24.778297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778381  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.778403  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.778417  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:45:24.778428  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:45:24.778436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778517  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.778532  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.778544  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_id, value=int(0)
09-16 14:45:24.778555  1 16 json_node_t() makeChild() node_name=<fragment_id>
09-16 14:45:24.778563  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778613  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778639  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.778652  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.778697  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(TOY1)
09-16 14:45:24.778709  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:45:24.778718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778763  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778787  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.778800  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.778811  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(ToySimulator)
09-16 14:45:24.778821  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:45:24.778828  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778897  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.778910  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.778921  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:24.778931  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:24.778938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778953  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.778996  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779007  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.779019  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.779030  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(50)
09-16 14:45:24.779039  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:45:24.779047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779092  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779116  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.779129  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.779139  1 15 json_gui_to_db() operator() switch ARRAY child name= nADCcounts, value=int(40)
09-16 14:45:24.779148  1 16 json_node_t() makeChild() node_name=<nADCcounts>
09-16 14:45:24.779156  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779201  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779224  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.779237  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.779248  1 15 json_gui_to_db() operator() switch ARRAY child name= random_seed, value=int(9542)
09-16 14:45:24.779257  1 16 json_node_t() makeChild() node_name=<random_seed>
09-16 14:45:24.779264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779334  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.779347  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.779359  1 15 json_gui_to_db() operator() switch ARRAY child name= sleep_on_stop_us, value=int(500000)
09-16 14:45:24.779368  1 16 json_node_t() makeChild() node_name=<sleep_on_stop_us>
09-16 14:45:24.779376  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779390  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779411  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779451  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.779464  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.779475  1 15 json_gui_to_db() operator() switch ARRAY child name= throttle_usecs, value=int(100000)
09-16 14:45:24.779485  1 16 json_node_t() makeChild() node_name=<throttle_usecs>
09-16 14:45:24.779493  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779523  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779574  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.779586  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.779597  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:24.779606  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:24.779614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779692  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.779705  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.779716  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:24.779725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779810  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:24.779818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779840  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.779857  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.779869  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.779877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.779897  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.779912  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:24.779922  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:45:24.779931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779947  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.779982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780014  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:45:24.780031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780044  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:24.780053  1 15 json_gui_to_db() operator() begin
09-16 14:45:24.780060  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:24.780075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:24.780084  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.780097  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.780108  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/boardreader/br_%UID%_metrics.log)
09-16 14:45:24.780117  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:45:24.780133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780203  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780214  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.780228  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:24.780247  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:45:24.780256  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:45:24.780264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780349  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.780364  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:24.780377  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:45:24.780387  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:45:24.780402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780496  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:24.780519  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:24.780541  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:45:24.780552  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:45:24.780569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780603  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780619  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.780964  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:45:24.781034  1 14 json_gui_to_db() created db_node
09-16 14:45:24.787819  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.24 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_002_t" end time: Sep 16 14:45 CDT
"Convert_GUIJson2DBJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

35/65 Testing: Convert_GUIJson2DBJson_005_t
35/65 Test: Convert_GUIJson2DBJson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test005.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test005.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test005.src.json" "-c" "test005.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_005_t.d
"Convert_GUIJson2DBJson_005_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.990776  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.993000  1 14 json_gui_to_db() begin
09-16 14:45:25.034758  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.035028  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.035172  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.035249  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.035311  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.035389  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.035565  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.035631  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.035676  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.035734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.035784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.035826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.035888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.035916  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.035936  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.035960  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.035982  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.036001  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.036019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.036039  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.036065  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.036087  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.036107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.036134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.036162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.036188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.036221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.036262  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.036291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.036326  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.036354  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.036379  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.036408  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.036432  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.036457  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.036519  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:45:25.036542  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:45:25.036562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037563  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.037595  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.037622  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:45:25.037636  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:45:25.037645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037724  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.037739  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.037751  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:45:25.037761  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:45:25.037771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037832  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037844  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.037859  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.037870  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:25.037881  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.037891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.037963  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.037977  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.037996  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:45:25.038005  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:45:25.038015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038087  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.038101  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.038111  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:45:25.038121  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:45:25.038131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038203  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.038217  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.038227  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:45:25.038237  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:45:25.038246  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038308  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038330  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.038343  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.038356  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.038367  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.038377  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038393  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038454  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.038470  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.038480  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.038489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038536  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038567  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.038576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038590  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.038602  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.038612  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.038620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.038631  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.038646  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.038656  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:45:25.038666  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.038974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039075  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:45:25.039097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039123  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.039147  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.039168  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.039189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.039209  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.039237  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.039301  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:45:25.039329  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:45:25.039350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039378  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039497  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.039522  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.039547  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:45:25.039568  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:45:25.039588  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039722  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.039748  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.039773  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:45:25.039796  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:45:25.039815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039842  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039900  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039926  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.039949  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.039976  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.039999  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:45:25.040022  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:45:25.040043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040128  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040183  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.040209  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.040232  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.040253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040309  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040366  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040393  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.040430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040456  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.040480  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.040501  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.040519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.040540  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.040567  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.040589  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:45:25.040610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040637  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040762  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:45:25.040783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040808  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.040831  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.040851  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.040869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.040889  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.040916  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.040938  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.040959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.040987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041101  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.041122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041150  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.041172  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.041191  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.041209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.041231  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.041257  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.041285  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.041305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041377  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.041404  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041433  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.041843  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.041867  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.041887  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.041906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.041929  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:45:25.041967  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.042021  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:45:25.042043  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.042071  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.042102  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.042129  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:45:25.042153  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.042175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042321  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.042352  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.042365  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.042375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042417  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042466  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042479  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.042487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042499  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.042509  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.042517  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.042526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.042535  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.042549  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.042560  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:25.042568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042639  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:25.042648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042661  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.042670  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.042678  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.042685  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.042696  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.042710  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.042720  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.042728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042742  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042769  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042796  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.042805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042818  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.042828  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.042837  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.042844  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.042854  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.042868  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.042878  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.042886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042901  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042947  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042960  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.042968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.042980  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.042989  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.042997  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.043004  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.043012  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.043028  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.043039  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.043048  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.043056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043123  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.043138  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.043152  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:45:25.043161  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.043170  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043215  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043239  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.043254  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.043263  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.043271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043329  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043341  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.043349  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043361  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.043370  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.043378  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.043385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.043402  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.043417  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.043428  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.043438  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.043446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043516  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.043529  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.043540  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:45:25.043549  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.043557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043572  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043627  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.043640  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.043653  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:45:25.043661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043684  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:45:25.043695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043723  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043805  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.043814  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.043822  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.043829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.043840  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:45:25.043849  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.043865  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.043879  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.043890  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:25.043898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043916  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:25.043924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043954  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.043987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044001  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.044010  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.044018  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.044025  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.044036  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.044050  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.044061  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.044069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044086  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.044095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044166  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.044175  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.044183  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.044190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.044200  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:25.044209  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.044221  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.044237  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.044248  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.044257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044274  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.044284  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044361  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.044371  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.044380  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.044387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.044403  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:25.044415  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.044428  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.044444  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.044456  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:25.044466  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044535  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044551  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:25.044559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044572  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.044583  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.044592  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.044599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.044612  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.044628  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.044640  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:45:25.044650  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:45:25.044659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044715  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044727  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.044740  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.044750  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.044758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044820  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044834  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.044843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044855  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.044864  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.044871  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.044877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.044886  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.044899  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.044909  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.044917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044946  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.044988  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.044996  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045008  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.045017  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.045024  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.045031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.045040  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045052  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.045065  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:45:25.045074  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:45:25.045082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045145  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045156  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.045167  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:45:25.045176  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:45:25.045183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045245  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045257  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.045267  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.045278  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.045286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045349  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045361  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.045371  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:45:25.045380  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.045387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045435  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045457  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045469  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.045480  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:45:25.045489  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:45:25.045497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045510  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045548  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045556  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.045562  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.045566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045609  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.045614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045620  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.045626  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.045631  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.045635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.045640  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045649  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.045655  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:45:25.045660  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:45:25.045665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045704  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045711  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.045718  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:45:25.045723  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:45:25.045728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045768  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045776  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.045781  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.045785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045794  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045827  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.045831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045838  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.045844  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.045848  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.045852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.045857  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.045865  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.045871  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:45:25.045876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045887  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:45:25.045892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045900  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045909  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.045938  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.045944  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.045949  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.045954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.045969  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.045986  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.045994  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.045999  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.046005  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.046010  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.046015  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.046020  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.046026  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.046031  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.046036  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.046042  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.046049  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.046057  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.046064  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:45:25.046070  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.046075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046093  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046101  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046108  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046114  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.046122  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.046127  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:45:25.046132  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:45:25.046137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046174  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.046181  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.046188  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:45:25.046194  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:45:25.046199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046224  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.046260  1 14 json_gui_to_db() Found changelog in guiAST <Edit: comment>
09-16 14:45:25.046329  1 14 json_gui_to_db() created db_node
09-16 14:45:25.054811  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_005_t" end time: Sep 16 14:45 CDT
"Convert_GUIJson2DBJson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

33/65 Testing: Convert_GUIJson2DBJson_003_t
33/65 Test: Convert_GUIJson2DBJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_003_t.d
"Convert_GUIJson2DBJson_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.990725  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.992382  1 14 json_gui_to_db() begin
09-16 14:45:25.006966  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.007115  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.007207  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.007254  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.007281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.007326  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.007421  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.007458  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.007483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007620  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.007627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007639  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.007647  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.007655  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.007660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.007668  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.007680  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.007689  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:25.007696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007723  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007762  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:25.007769  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007780  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.007788  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.007794  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.007801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.007808  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.007819  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.007854  1 15 json_gui_to_db() operator() switch ARRAY child name= board_id, value=int(0)
09-16 14:45:25.007864  1 16 json_node_t() makeChild() node_name=<board_id>
09-16 14:45:25.007871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007901  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007948  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.007960  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.007971  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:45:25.007980  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:45:25.007988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008032  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008053  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008065  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.008075  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:45:25.008084  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:45:25.008091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008152  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008163  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.008173  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_id, value=int(0)
09-16 14:45:25.008182  1 16 json_node_t() makeChild() node_name=<fragment_id>
09-16 14:45:25.008189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008241  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008251  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008262  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.008288  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(TOY1)
09-16 14:45:25.008298  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:45:25.008305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008333  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008367  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008379  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.008389  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(ToySimulator)
09-16 14:45:25.008402  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:45:25.008410  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008425  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008477  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008489  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.008500  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:25.008508  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.008516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008558  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008580  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008591  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.008601  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(50)
09-16 14:45:25.008610  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:45:25.008617  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008682  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008694  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.008704  1 15 json_gui_to_db() operator() switch ARRAY child name= nADCcounts, value=int(40)
09-16 14:45:25.008713  1 16 json_node_t() makeChild() node_name=<nADCcounts>
09-16 14:45:25.008720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008776  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008786  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.008795  1 15 json_gui_to_db() operator() switch ARRAY child name= random_seed, value=int(9542)
09-16 14:45:25.008802  1 16 json_node_t() makeChild() node_name=<random_seed>
09-16 14:45:25.008809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008833  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008854  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008862  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008872  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.008881  1 15 json_gui_to_db() operator() switch ARRAY child name= sleep_on_stop_us, value=int(500000)
09-16 14:45:25.008888  1 16 json_node_t() makeChild() node_name=<sleep_on_stop_us>
09-16 14:45:25.008894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008947  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.008957  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.008966  1 15 json_gui_to_db() operator() switch ARRAY child name= throttle_usecs, value=int(100000)
09-16 14:45:25.008974  1 16 json_node_t() makeChild() node_name=<throttle_usecs>
09-16 14:45:25.008980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009016  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009041  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.009051  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.009060  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.009067  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.009074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009128  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.009138  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.009146  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.009153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009187  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009210  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.009217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009227  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.009234  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.009240  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.009246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.009253  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.009263  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.009271  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:45:25.009277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009335  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:45:25.009342  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009351  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.009359  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.009365  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.009370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.009377  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.009388  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.009401  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/boardreader/br_%UID%_metrics.log)
09-16 14:45:25.009409  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:45:25.009416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009474  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.009485  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.009495  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:45:25.009503  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:45:25.009510  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009566  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.009576  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.009585  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:45:25.009592  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:45:25.009599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009653  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.009664  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.009676  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:45:25.009684  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:45:25.009690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009715  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.009905  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:45:25.009955  1 14 json_gui_to_db() created db_node
09-16 14:45:25.016413  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_003_t" end time: Sep 16 14:45 CDT
"Convert_GUIJson2DBJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

38/65 Testing: RoundConvert_DBJson2GUIJson_002_t
38/65 Test: RoundConvert_DBJson2GUIJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_002_t.d
"RoundConvert_DBJson2GUIJson_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.000779  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:25.002898  1 10 json_db_to_gui() begin
09-16 14:45:25.016574  1 10 json_db_to_gui() read dbAST
09-16 14:45:25.016767  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.016820  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.016860  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.016907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.016987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017020  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:25.017050  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:25.017057  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017100  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:25.017109  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.017124  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.017132  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.017192  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.017248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.017295  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.017302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.017389  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.017401  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.017413  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.017420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.017435  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017443  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:45:25.017452  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:45:25.017459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017680  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:45:25.017690  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.017697  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.017703  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.017715  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.017728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.017742  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.017748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.017774  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.017781  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.017787  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.017794  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.017808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017816  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:45:25.017825  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:45:25.017830  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017860  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:45:25.017869  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.017875  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.017881  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.017892  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.017904  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.017918  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.017924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.017975  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.017982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.017997  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.018003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018038  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:45:25.018048  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:45:25.018054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018082  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:45:25.018091  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.018097  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.018103  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.018114  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.018126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018139  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.018146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018171  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.018177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018190  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.018196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018206  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:45:25.018214  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:45:25.018220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018248  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:45:25.018256  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.018263  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.018269  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.018280  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.018292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018304  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.018311  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018336  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.018342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018355  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.018361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018371  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:25.018380  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:25.018385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018417  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:25.018427  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.018433  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.018439  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.018451  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.018463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018476  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.018483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018508  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.018515  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018527  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.018534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018545  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:45:25.018553  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:45:25.018559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018585  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:45:25.018594  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.018600  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.018607  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.018617  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.018629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018642  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.018648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018690  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.018697  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018710  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.018716  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018727  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:45:25.018735  1 13 json_db_to_gui() child args name <use_art>
09-16 14:45:25.018740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018767  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:45:25.018775  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.018781  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.018787  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.018797  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.018809  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018822  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.018828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018853  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.018859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018871  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.018879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018891  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:45:25.018901  1 13 json_db_to_gui() child args name <verbose>
09-16 14:45:25.018907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.018933  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:45:25.018942  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.018948  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.018954  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.018969  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.018981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.018993  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.018998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019021  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.019027  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019039  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.019044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019063  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.019069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019079  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:25.019087  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:25.019093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019120  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:25.019129  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.019136  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.019142  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.019153  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.019165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019178  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.019185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019209  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.019215  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019227  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.019233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019243  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:45:25.019251  1 13 json_db_to_gui() child args name <metrics>
09-16 14:45:25.019257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019282  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:45:25.019290  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.019296  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.019302  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.019312  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.019324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019336  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.019342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019354  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019368  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.019374  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.019380  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.019386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.019407  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019415  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:45:25.019423  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:45:25.019429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019455  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:45:25.019463  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.019469  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.019475  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.019485  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.019496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019509  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.019515  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019527  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019540  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.019546  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.019552  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.019557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.019571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019577  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:45:25.019585  1 13 json_db_to_gui() child args name <fileName>
09-16 14:45:25.019591  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019618  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:45:25.019626  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.019632  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.019638  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.019650  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.019662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019675  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.019681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019693  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019722  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.019728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019740  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.019745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019755  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:45:25.019762  1 13 json_db_to_gui() child args name <level>
09-16 14:45:25.019767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019791  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:45:25.019799  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.019804  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.019810  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.019819  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.019830  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019841  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.019846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019868  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.019873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019884  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.019889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019898  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:45:25.019905  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:45:25.019911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.019935  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:45:25.019942  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.019948  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.019953  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.019962  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.019973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.019984  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.019990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020012  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.020017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020028  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.020033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020042  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:45:25.020049  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:45:25.020054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020078  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:45:25.020085  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020091  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.020096  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.020106  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.020116  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020127  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.020133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020156  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.020161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020173  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.020179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020190  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.020196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020206  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.020212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020222  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.020228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020237  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:45:25.020244  1 13 json_db_to_gui() child args name <outputs>
09-16 14:45:25.020250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020257  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:45:25.020264  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020269  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.020275  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.020284  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.020294  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020305  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.020311  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020335  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020341  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.020346  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.020352  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.020365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020371  1 11 json_db_to_gui() operator() switch OBJECT child name=<netMonOutput>
09-16 14:45:25.020379  1 13 json_db_to_gui() child args name <netMonOutput>
09-16 14:45:25.020384  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020411  1 13 json_db_to_gui() metadata node was found, name=<netMonOutput>
09-16 14:45:25.020420  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020426  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.020431  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.020441  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.020452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020463  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.020468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020493  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020499  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.020504  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.020510  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.020522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020529  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:45:25.020536  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:45:25.020541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020565  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:45:25.020572  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020578  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.020583  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.020593  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.020603  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020615  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.020621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020633  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020645  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020650  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.020656  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.020661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.020675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020682  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:45:25.020689  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:45:25.020694  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020718  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:45:25.020725  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020731  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.020736  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.020746  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.020756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020767  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.020773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.020784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.020836  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020851  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.020857  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.020863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.020885  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.020891  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.020906  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.020912  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.020922  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.020976  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:45:25.021005  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021020  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.021026  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.021034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.021064  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:45:25.021071  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021076  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.021082  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.021087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.021099  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.021105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021119  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.021125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021135  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.021144  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.021149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021174  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.021183  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021189  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.021194  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.021205  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.021217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021229  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.021235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021260  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.021265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021277  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.021283  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021295  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.021300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021312  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.021317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021327  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:45:25.021334  1 13 json_db_to_gui() child args name <physics>
09-16 14:45:25.021340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021349  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:45:25.021356  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021362  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.021368  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.021378  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.021390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021407  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.021413  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021438  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021444  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.021450  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.021470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.021486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021494  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:45:25.021502  1 13 json_db_to_gui() child args name <filters>
09-16 14:45:25.021508  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021534  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:45:25.021542  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021549  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.021555  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.021565  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.021577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021590  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.021596  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021620  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021626  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.021633  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.021638  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.021652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021659  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:45:25.021667  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:45:25.021673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021699  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:45:25.021707  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021713  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.021719  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.021730  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.021741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021754  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.021760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021785  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021791  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.021797  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.021803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.021817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021825  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.021834  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.021840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021867  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.021876  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.021882  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.021888  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.021899  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.021910  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021923  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.021929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.021953  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.021959  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021970  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.021976  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.021986  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:45:25.021994  1 13 json_db_to_gui() child args name <nth>
09-16 14:45:25.022000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022026  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:45:25.022034  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022040  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.022046  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.022056  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.022068  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022081  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.022087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022098  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022110  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.022115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022127  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.022132  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022144  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.022149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022159  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:45:25.022166  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:45:25.022172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022197  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:45:25.022205  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022211  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.022217  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.022228  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.022239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022251  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.022257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022283  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022289  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.022295  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.022302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.022316  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022323  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.022330  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.022336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022363  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.022371  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022377  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.022383  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.022393  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.022415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022428  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.022434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022447  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022459  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.022466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022478  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.022483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022494  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:45:25.022502  1 13 json_db_to_gui() child args name <nth>
09-16 14:45:25.022507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022534  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:45:25.022542  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022548  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.022554  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.022565  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.022576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022588  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.022594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022606  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022618  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.022624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022636  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.022642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022654  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.022660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022672  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.022678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022687  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:45:25.022695  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:45:25.022701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022726  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:45:25.022734  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022740  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.022746  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.022757  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.022768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022780  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.022787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.022813  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022819  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.022826  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.022832  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.022849  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022856  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.022862  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.022868  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.022877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.022886  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(netMonOutput)
09-16 14:45:25.022894  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022900  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.022906  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.022912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.022926  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.022932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022943  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:45:25.022951  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:45:25.022957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.022982  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:45:25.022990  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.022997  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.023003  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023014  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.023025  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023038  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.023044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023069  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023076  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.023082  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.023088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.023104  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023111  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.023117  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.023122  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.023139  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:25.023146  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023152  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.023158  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.023177  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.023183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023194  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:45:25.023202  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:45:25.023208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023234  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:45:25.023242  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023249  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.023255  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023266  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.023278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023295  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.023301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023327  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023334  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.023341  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.023347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.023364  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023371  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.023377  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.023383  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.023406  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:25.023415  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023421  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.023427  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.023446  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.023453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023466  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.023472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023482  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:45:25.023490  1 13 json_db_to_gui() child args name <process_name>
09-16 14:45:25.023495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023504  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:45:25.023511  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023517  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.023523  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023533  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.023545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023557  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.023563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023588  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.023594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023606  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.023612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023621  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:45:25.023629  1 13 json_db_to_gui() child args name <services>
09-16 14:45:25.023634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023642  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:45:25.023649  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023655  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.023662  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023673  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.023684  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023696  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.023703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023714  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023727  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023734  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.023740  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.023747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.023761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023768  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:45:25.023776  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:45:25.023781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023808  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:45:25.023816  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023822  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.023829  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.023839  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.023851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023863  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.023869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023881  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.023893  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023900  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.023906  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.023913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.023927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023934  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:45:25.023942  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:45:25.023948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.023974  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:45:25.023982  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.023989  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.023995  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.024005  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.024017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024029  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.024035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024059  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.024065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024077  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.024083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024096  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.024102  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024112  1 11 json_db_to_gui() operator() switch OBJECT child name=<user>
09-16 14:45:25.024120  1 13 json_db_to_gui() child args name <user>
09-16 14:45:25.024125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024151  1 13 json_db_to_gui() metadata node was found, name=<user>
09-16 14:45:25.024159  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.024166  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.024171  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.024182  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.024193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024205  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.024211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024235  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.024242  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.024248  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.024254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.024268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024275  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:45:25.024284  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:45:25.024289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024316  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:45:25.024325  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.024331  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.024337  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.024347  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.024359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024371  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.024377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024407  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.024415  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.024421  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.024427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.024442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024449  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:45:25.024457  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:45:25.024463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024490  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:45:25.024499  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.024505  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.024511  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.024521  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.024533  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024546  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.024553  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024582  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.024588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024602  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.024609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024620  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:45:25.024630  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:45:25.024637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024667  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:45:25.024675  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.024681  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.024688  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.024699  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.024712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024726  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.024733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024774  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.024780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024794  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.024800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024812  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:25.024820  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:25.024828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024855  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:25.024864  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.024870  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.024876  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.024887  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.024901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024913  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.024919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.024947  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.025064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.025081  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.025087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.025097  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:25.025107  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:25.025114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.025142  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:25.025152  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.025158  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.025165  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.025178  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.025191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.025205  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.025211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.025225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.025239  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.025246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.025260  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.025267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070758  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:45:25.070777  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:45:25.070784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070822  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:45:25.070829  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.070834  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.070839  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.070853  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.070864  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.070874  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.070878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.070893  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.070897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070904  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.070907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070916  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.070919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070927  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.070930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070937  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.070941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070947  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:45:25.070952  1 13 json_db_to_gui() child args name <source>
09-16 14:45:25.070955  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.070961  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:45:25.070965  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.070969  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.070972  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.070979  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.070986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.070993  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.070996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.071013  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.071018  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.071023  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.071027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.071039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071044  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.071048  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.071052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071069  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.071074  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.071077  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.071081  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.071088  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.071096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.071103  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.071107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.071121  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.071125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071131  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.071135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071141  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:45:25.071146  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:45:25.071149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071164  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:45:25.071169  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.071173  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.071177  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.071183  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.071190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.071197  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.071201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.071215  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.071219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071225  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.071229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071235  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:45:25.071240  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:45:25.071243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071258  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:45:25.071263  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.071266  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.071270  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.071277  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.071284  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.071291  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.071295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.071309  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.071313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071320  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.071323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071330  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.071334  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.071357  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:45:25.071384  1 10 json_db_to_gui() created gui_node
09-16 14:45:25.085956  1 10 json_db_to_gui() created gui_json
09-16 14:45:25.086048  1 14 json_gui_to_db() begin
09-16 14:45:25.098538  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.098574  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.098593  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.098603  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.098609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.098624  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.098642  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.098650  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.098655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098699  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.098705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098712  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.098718  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.098722  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.098726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.098731  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.098738  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.098744  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.098748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098788  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.098793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098799  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.098805  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.098808  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.098813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.098817  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.098825  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.098859  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:45:25.098866  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:45:25.098870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098909  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.098916  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.098923  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:45:25.098928  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:45:25.098933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.098970  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.098977  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.098983  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:45:25.098989  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:45:25.098994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099031  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099038  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.099044  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:25.099050  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.099055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099091  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099098  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.099108  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:45:25.099113  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:45:25.099117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099154  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099161  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.099166  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:45:25.099171  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:45:25.099175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099211  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099218  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.099223  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:45:25.099228  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:45:25.099232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099270  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099277  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.099283  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.099289  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.099293  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099318  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099330  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099337  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.099343  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.099347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099355  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099379  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099386  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.099391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099400  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.099406  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.099411  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.099415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.099419  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099427  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.099432  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:45:25.099436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099453  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099476  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:45:25.099481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099487  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.099492  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.099496  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.099501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.099505  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099512  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.099519  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:45:25.099525  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:45:25.099529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099565  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099572  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.099578  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:45:25.099584  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:45:25.099589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099619  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099625  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099632  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.099638  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:45:25.099644  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:45:25.099649  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099684  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099691  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.099696  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:45:25.099701  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:45:25.099705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099743  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099750  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.099755  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.099760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099798  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.099803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099809  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.099815  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.099819  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.099823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.099827  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099834  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.099840  1 16 json_node_t() makeChild() node_name=<netMonOutput>
09-16 14:45:25.099844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099861  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099884  1 16 json_node_t() makeChild() node_name=<netMonOutput>
09-16 14:45:25.099888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099895  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.099900  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.099904  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.099908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.099912  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.099919  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.099924  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.099928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099967  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.099972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.099978  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.099983  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.099987  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.099991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.099996  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100003  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.100010  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.100015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100025  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.100030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100086  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.100092  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.100097  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.100101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.100106  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:45:25.100112  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.100118  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:45:25.100123  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.100129  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100137  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.100143  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonOutput)
09-16 14:45:25.100149  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.100153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100185  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100193  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100200  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.100206  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.100211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100250  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.100254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100261  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.100266  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.100270  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.100274  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.100279  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100286  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.100291  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.100296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100335  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.100339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100346  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.100351  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.100355  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.100359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.100363  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100371  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.100376  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.100380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100389  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100417  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100425  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.100429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100436  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.100441  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.100446  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.100450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.100455  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100462  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.100469  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.100474  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.100479  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100488  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100510  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100515  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100522  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.100529  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:45:25.100534  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.100539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100547  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100555  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100576  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100583  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.100588  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.100592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100631  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.100636  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100642  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.100647  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.100651  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.100656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.100660  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100667  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.100673  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.100679  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.100684  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100720  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100727  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.100734  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:45:25.100739  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.100744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100781  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100788  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.100794  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:45:25.100799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100809  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:45:25.100814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100857  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.100863  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.100868  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.100872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.100877  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(netMonOutput)
09-16 14:45:25.100882  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.100889  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.100896  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.100903  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.100907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100917  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.100922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100930  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.100964  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.100970  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.100975  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.100979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.100984  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:25.100989  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.100996  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101003  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.101010  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.101014  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101025  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.101030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101072  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.101077  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.101081  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.101086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.101091  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:25.101096  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.101103  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101110  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.101117  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:45:25.101122  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:45:25.101127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101135  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101144  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101164  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101171  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.101177  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.101182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101220  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.101225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101231  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.101237  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.101241  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.101245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.101249  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101257  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.101262  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.101267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101306  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.101311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101317  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.101322  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.101326  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.101331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.101335  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101342  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.101348  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:45:25.101354  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:45:25.101359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101376  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101390  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101402  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101410  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.101415  1 16 json_node_t() makeChild() node_name=<user>
09-16 14:45:25.101420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101438  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101461  1 16 json_node_t() makeChild() node_name=<user>
09-16 14:45:25.101466  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101472  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.101477  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.101482  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.101486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.101490  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101497  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.101503  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.101507  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101547  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.101551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101558  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.101563  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.101567  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.101572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.101576  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101583  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.101590  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:45:25.101595  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:45:25.101599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101617  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101631  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101637  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101644  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.101650  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(6)
09-16 14:45:25.101656  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:45:25.101660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101676  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101684  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101696  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101703  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.101709  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.101715  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.101719  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101743  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101755  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101762  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.101769  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:45:25.101774  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.101779  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101828  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101849  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.101862  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:45:25.101882  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:45:25.101892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101965  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.101974  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.101980  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.101985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.101994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102010  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102026  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.102031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102037  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.102043  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.102048  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.102052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.102057  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.102064  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.102070  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:45:25.102076  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.102081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102118  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.102126  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.102131  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:45:25.102135  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:45:25.102140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102156  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102170  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102176  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.102183  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.102190  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(900)
09-16 14:45:25.102194  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:45:25.102199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102215  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102229  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.102249  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:45:25.102289  1 14 json_gui_to_db() created db_node
09-16 14:45:25.107690  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.15 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_002_t" end time: Sep 16 14:45 CDT
"RoundConvert_DBJson2GUIJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

37/65 Testing: RoundConvert_DBJson2GUIJson_001_t
37/65 Test: RoundConvert_DBJson2GUIJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_001_t.d
"RoundConvert_DBJson2GUIJson_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.002852  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:25.004194  1 10 json_db_to_gui() begin
09-16 14:45:25.007160  1 10 json_db_to_gui() read dbAST
09-16 14:45:25.007323  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.007369  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.007412  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.007450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.007575  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:25.007605  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:25.007612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.007649  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:25.007659  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.007674  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.007683  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.007742  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.007797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.007841  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.007849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.007875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.007930  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.007938  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.007944  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.007951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.007967  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.007975  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:45:25.007984  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:45:25.007991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008213  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:45:25.008224  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.008232  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.008238  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.008251  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.008263  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.008277  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.008284  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008297  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.008312  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.008320  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.008326  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.008333  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.008349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008357  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:45:25.008367  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:45:25.008373  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008409  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:45:25.008419  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.008426  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.008432  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.008444  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.008456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.008471  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.008478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.008528  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.008535  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008554  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.008562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008600  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.008608  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008621  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.008628  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.008661  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:45:25.008694  1 10 json_db_to_gui() created gui_node
09-16 14:45:25.011512  1 10 json_db_to_gui() created gui_json
09-16 14:45:25.011540  1 14 json_gui_to_db() begin
09-16 14:45:25.013554  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.013599  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.013634  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.013653  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.013663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.013703  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.013725  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.013736  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.013744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013759  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013812  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.013819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013829  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.013837  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.013844  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.013850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.013858  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.013869  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.013877  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.013884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013952  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.013961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.013974  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.013983  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.013991  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.013997  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.014005  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.014017  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.014053  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:45:25.014064  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:45:25.014072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.014088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.014104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.014118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.014130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.014169  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:45:25.014189  1 14 json_gui_to_db() created db_node
09-16 14:45:25.014836  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.15 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_001_t" end time: Sep 16 14:45 CDT
"RoundConvert_DBJson2GUIJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

36/65 Testing: Convert_GUIJson2DBJson_006_t
36/65 Test: Convert_GUIJson2DBJson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test006.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test006.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test006.src.json" "-c" "test006.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_006_t.d
"Convert_GUIJson2DBJson_006_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.990011  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.995446  1 14 json_gui_to_db() begin
09-16 14:45:25.062301  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.062443  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.062523  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.062562  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.062582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.062620  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.062699  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.062733  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:45:25.062754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062822  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062851  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:45:25.062855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062862  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.062867  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.062871  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.062874  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.062879  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.062885  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.062903  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:45:25.062909  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:45:25.062913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062966  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.062974  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.062979  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.062983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062990  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.062998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063019  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.063023  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063029  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.063033  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.063037  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.063041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.063045  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063051  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.063057  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:45:25.063061  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.063066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063089  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063101  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063107  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063135  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:45:25.063141  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.063145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063174  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063180  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063186  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.063191  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:25.063195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063203  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063224  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063231  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:25.063235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063241  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.063246  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.063250  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.063253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.063257  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063263  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063269  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:25.063274  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.063278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063312  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063318  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063324  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:45:25.063328  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:45:25.063332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063366  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063372  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063377  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:45:25.063383  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:45:25.063387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063397  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063419  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063425  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063431  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063437  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:45:25.063442  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:45:25.063446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063468  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063479  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063486  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.063491  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:45:25.063496  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:45:25.063500  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063507  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063521  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063533  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063539  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.063544  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:45:25.063549  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:45:25.063553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063586  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063592  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063598  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:45:25.063603  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:45:25.063607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063640  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063646  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063651  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:45:25.063656  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:45:25.063660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063694  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063700  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.063705  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:45:25.063709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063745  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:45:25.063749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063755  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.063760  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.063764  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.063768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.063772  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063778  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063784  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:45:25.063788  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:45:25.063792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063826  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063832  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063838  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:45:25.063842  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:45:25.063846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063854  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063861  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063879  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063886  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063891  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:45:25.063896  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:45:25.063900  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063933  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063939  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063945  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:45:25.063950  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:45:25.063954  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.063987  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.063993  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.063998  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:45:25.064003  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:45:25.064007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064014  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064040  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064046  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064051  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:45:25.064056  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:45:25.064060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064098  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064105  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.064110  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:45:25.064114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064136  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064144  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064150  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:45:25.064154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064160  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.064165  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.064169  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.064173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.064177  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064183  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064189  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:45:25.064194  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:45:25.064198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064233  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064239  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.064244  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:45:25.064248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064284  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:45:25.064288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064294  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.064299  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.064302  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.064306  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.064310  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064316  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064322  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:45:25.064327  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:45:25.064331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064353  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064364  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064370  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064376  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:45:25.064381  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:45:25.064385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064410  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064425  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064440  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064447  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064452  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:45:25.064457  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:45:25.064461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064468  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064476  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064495  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064501  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064506  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:45:25.064511  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:45:25.064516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064523  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064549  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064555  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064561  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:45:25.064565  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:45:25.064569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064602  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064608  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064614  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:45:25.064619  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:45:25.064622  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064630  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064637  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064655  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064661  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064667  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:45:25.064672  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:45:25.064675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064708  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064714  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064720  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:45:25.064724  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:45:25.064728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064743  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064761  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064767  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064772  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:45:25.064777  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:45:25.064781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064815  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064821  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064827  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:45:25.064831  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:45:25.064835  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064857  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064868  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064874  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064879  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:45:25.064884  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:45:25.064888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064921  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064927  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064932  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:45:25.064937  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:45:25.064941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064955  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064962  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.064974  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.064980  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.064985  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:45:25.064990  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:45:25.064994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065026  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065032  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065038  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:45:25.065042  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:45:25.065046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065080  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065086  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065091  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:45:25.065096  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:45:25.065100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065132  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065138  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065144  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:45:25.065148  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:45:25.065152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065160  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065174  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065180  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065185  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065191  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065197  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:45:25.065201  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:45:25.065205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065238  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065244  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065249  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:45:25.065254  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:45:25.065258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065265  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065285  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065290  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065296  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065302  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:45:25.065306  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:45:25.065310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065318  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065333  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065344  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065350  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065355  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:45:25.065360  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:45:25.065364  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065379  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065400  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065406  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065412  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:45:25.065417  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:45:25.065421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065443  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065454  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065460  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065465  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:45:25.065470  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:45:25.065474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065507  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065513  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065518  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:45:25.065523  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:45:25.065527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065559  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065565  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065571  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:45:25.065575  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:45:25.065579  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065612  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065619  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065624  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:45:25.065629  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:45:25.065633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065665  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065672  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065677  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:45:25.065681  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:45:25.065685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065707  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065718  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065724  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065729  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:45:25.065734  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:45:25.065738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065766  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065771  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065777  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065782  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:45:25.065787  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:45:25.065791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065823  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065829  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065835  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:45:25.065839  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:45:25.065843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065851  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065876  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065883  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065888  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:45:25.065893  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:45:25.065897  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065912  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065930  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065936  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065942  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:45:25.065946  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:45:25.065950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065978  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.065983  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.065989  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.065994  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:45:25.065999  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:45:25.066003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066010  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066036  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066042  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066047  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:45:25.066052  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:45:25.066056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066089  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066095  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066100  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:45:25.066105  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:45:25.066109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066136  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066141  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066147  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066153  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:45:25.066158  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:45:25.066162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066169  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066195  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066201  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066206  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:45:25.066211  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:45:25.066215  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066222  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066248  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066254  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066259  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:45:25.066267  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:45:25.066275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066350  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066362  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066369  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:45:25.066374  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:45:25.066388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066427  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066434  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066439  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:45:25.066444  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:45:25.066448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066481  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066487  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066492  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:45:25.066497  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:45:25.066501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066523  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066534  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066540  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066545  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:45:25.066550  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:45:25.066554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066588  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066594  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.066599  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:45:25.066604  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.066608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066640  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066646  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.066651  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:45:25.066656  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:45:25.066660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066692  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066698  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.066703  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:45:25.066708  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:45:25.066724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066739  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066758  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066768  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.066774  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:45:25.066780  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.066784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066817  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066824  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.066829  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.066834  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:45:25.066838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066871  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066877  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066882  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:45:25.066887  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.066891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066899  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066924  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066930  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.066935  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:45:25.066940  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.066944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.066977  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.066983  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.066988  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:45:25.066993  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.066997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067030  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.067036  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.067042  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:45:25.067047  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.067051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067079  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067084  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.067090  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.067096  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.067101  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:45:25.067105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067138  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.067144  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.067149  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:45:25.067154  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.067158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067180  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067191  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.067197  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.067203  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:45:25.067207  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.067211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067244  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.067250  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.067255  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:45:25.067260  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.067264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.067292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.120980  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121002  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121014  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:45:25.121023  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.121029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121068  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121074  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121081  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.121087  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.121092  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:45:25.121096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121111  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121129  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121136  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121142  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:45:25.121147  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.121151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121159  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121166  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121185  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121191  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121197  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:45:25.121201  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.121205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121239  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121245  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.121251  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:45:25.121256  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.121260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121293  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121299  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121305  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:45:25.121310  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.121314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121341  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121346  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121353  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.121358  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.121363  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:45:25.121367  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121399  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121415  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121423  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121428  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:45:25.121433  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.121440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121480  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121539  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121552  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121561  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:45:25.121566  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.121571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121588  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121595  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121606  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121613  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.121618  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:45:25.121623  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.121627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121649  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121660  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121666  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121672  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:45:25.121676  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.121680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121713  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121719  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.121724  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.121729  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:45:25.121733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121765  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121771  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121777  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:45:25.121781  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.121785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121818  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121824  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121830  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:45:25.121834  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.121838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121870  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121876  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.121882  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:45:25.121886  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.121890  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121912  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121923  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121929  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.121935  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:45:25.121939  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.121943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121970  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.121976  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.121982  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.121987  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.121992  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:45:25.121996  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122010  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122023  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122028  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122035  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122040  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:45:25.122044  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.122048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122089  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122096  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122102  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:45:25.122106  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.122110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122143  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122150  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.122155  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:45:25.122160  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.122164  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122185  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122198  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122205  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122211  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:45:25.122216  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.122220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122257  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122265  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.122272  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.122277  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:45:25.122281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122309  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122314  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122322  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122328  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:45:25.122333  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.122337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122352  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122366  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122372  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122389  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122399  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:45:25.122405  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.122419  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122476  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122483  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.122489  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:45:25.122495  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.122499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122507  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122535  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122542  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122548  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:45:25.122554  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.122558  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122588  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122594  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122601  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.122607  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.122612  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:45:25.122616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122625  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122652  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122659  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122665  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:45:25.122671  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.122676  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122706  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122711  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122718  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122724  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:45:25.122729  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.122733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122763  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122769  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122775  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.122781  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:45:25.122787  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.122791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122827  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122834  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.122840  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:45:25.122846  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.122850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122887  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.122895  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.122900  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:45:25.122904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122946  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:45:25.122951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.122957  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.122964  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.122969  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.122974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.123002  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:45:25.123118  1 14 json_gui_to_db() created db_node
09-16 14:45:25.140210  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.22 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_006_t" end time: Sep 16 14:45 CDT
"Convert_GUIJson2DBJson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

30/65 Testing: Convert_DBJson2GUIJson_004_t
30/65 Test: Convert_DBJson2GUIJson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test004.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_004_t.d
"Convert_DBJson2GUIJson_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.758539  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.763961  1 10 json_db_to_gui() begin
09-16 14:45:24.803974  1 10 json_db_to_gui() read dbAST
09-16 14:45:24.804110  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.804147  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.804175  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.804206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.804261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804285  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:45:24.804306  1 13 json_db_to_gui() child args name <prolog>
09-16 14:45:24.804310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804340  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:45:24.804345  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.804356  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.804360  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.804405  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.804446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.804478  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.804482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.804543  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.804548  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.804552  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.804556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.804565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804569  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:45:24.804574  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:45:24.804578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804703  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:45:24.804710  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.804714  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.804717  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.804725  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.804733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.804740  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.804744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804751  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.804774  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.804779  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804787  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.804790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804814  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:45:24.804820  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:45:24.804824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804841  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:45:24.804846  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.804850  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.804854  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.804861  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.804868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.804876  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.804880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804886  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.804895  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.804899  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.804903  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.804906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.804915  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804919  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:45:24.804924  1 13 json_db_to_gui() child args name <metrics>
09-16 14:45:24.804927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804944  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:45:24.804949  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.804953  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.804956  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.804963  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.804970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.804978  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.804981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.804988  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.804995  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.804999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805005  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805015  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:24.805020  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:24.805023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805039  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:24.805043  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805047  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805051  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805057  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805072  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805097  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805107  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805117  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:45:24.805122  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:45:24.805125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805140  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:45:24.805145  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805149  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805153  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805160  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805174  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805192  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805196  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.805200  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.805204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.805212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805217  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:24.805221  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:24.805225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805241  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:24.805246  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805249  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805253  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805260  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805274  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805292  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805302  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805306  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805311  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:45:24.805316  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:45:24.805319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805335  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:45:24.805340  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805344  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805347  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805354  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805368  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805385  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805388  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805398  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805409  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:45:24.805413  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:45:24.805417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805433  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:45:24.805438  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805442  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805446  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805453  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805467  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805484  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805494  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805503  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:45:24.805508  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:45:24.805511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805527  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:45:24.805532  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805536  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805539  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805546  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805553  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805560  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805570  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805577  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805580  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805587  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805596  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:45:24.805601  1 13 json_db_to_gui() child args name <generator>
09-16 14:45:24.805604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805620  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:45:24.805625  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805628  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805632  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805639  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805645  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805652  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805670  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805680  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805689  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:45:24.805693  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:45:24.805697  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805713  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:45:24.805718  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805722  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805725  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805732  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805746  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805763  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805773  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805782  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:45:24.805787  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:45:24.805790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805806  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:45:24.805811  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805815  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805818  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805825  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805831  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805839  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805856  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805866  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805875  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:45:24.805879  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:45:24.805883  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805898  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:45:24.805903  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.805907  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.805911  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.805917  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.805924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805931  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.805935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.805948  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.805952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805958  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.805962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805967  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:45:24.805972  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:45:24.805975  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.805991  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:45:24.805997  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806001  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806004  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806011  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806025  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806043  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806047  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.806051  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.806055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.806063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806068  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:45:24.806072  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:45:24.806076  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806093  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:45:24.806098  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806101  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806105  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806112  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806126  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806143  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.806147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806154  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.806157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806163  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:45:24.806168  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:45:24.806171  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806187  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:45:24.806192  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806196  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806200  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806206  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806220  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806224  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806237  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.806241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806248  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.806251  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806257  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:45:24.806262  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:45:24.806265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806282  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:45:24.806287  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806291  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806294  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806301  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806315  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806332  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.806336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806342  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.806346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806352  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:45:24.806356  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:45:24.806360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806376  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:45:24.806381  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806385  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806388  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806398  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806414  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806431  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.806435  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806441  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.806445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806451  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:45:24.806455  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:45:24.806459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806475  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:45:24.806480  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806484  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806488  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806494  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806508  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806512  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806526  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.806529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806536  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.806539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806545  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:45:24.806559  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:45:24.806563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806590  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:45:24.806595  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806599  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806602  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806618  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806642  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806660  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.806663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806670  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.806673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806685  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.806688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806694  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:45:24.806699  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:45:24.806702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806718  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:45:24.806723  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806727  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806730  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806737  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806751  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806769  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806773  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.806777  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.806780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.806789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806793  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:45:24.806798  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:45:24.806802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806818  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:45:24.806823  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806827  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806831  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806837  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806845  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806852  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806869  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.806873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806879  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.806884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806889  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:45:24.806894  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:45:24.806898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806914  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:45:24.806919  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806923  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.806926  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.806933  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.806940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806947  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.806951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.806965  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.806969  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.806973  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.806977  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.806985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.806990  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:45:24.806994  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:45:24.806998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807015  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:45:24.807020  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807024  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807027  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807034  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807048  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807066  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807076  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807085  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:45:24.807090  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:45:24.807093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807110  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:45:24.807115  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807119  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807123  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807129  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807143  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807154  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807161  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807171  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807181  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:45:24.807186  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:45:24.807189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807206  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:45:24.807211  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807215  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807218  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807225  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807239  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807256  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807267  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807277  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807286  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:45:24.807291  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:45:24.807294  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807311  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:45:24.807316  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807319  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807323  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807330  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807344  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807354  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807361  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807364  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807371  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807380  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:45:24.807385  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:45:24.807389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807409  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:45:24.807414  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807418  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807422  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807428  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807443  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807447  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807454  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807461  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807471  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807481  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:45:24.807485  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:45:24.807489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807505  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:45:24.807510  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807514  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807518  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807524  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807538  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807555  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807566  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807575  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:45:24.807579  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:45:24.807583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807599  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:45:24.807604  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807608  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807611  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807618  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807632  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807649  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807659  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807669  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:45:24.807673  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:45:24.807677  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807693  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:45:24.807698  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807702  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807705  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807712  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807726  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807737  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807744  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807747  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807754  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807763  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:45:24.807768  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:45:24.807771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807787  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:45:24.807801  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807805  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807809  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807815  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807829  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807839  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807846  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807856  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807865  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:45:24.807869  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:45:24.807873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807889  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:45:24.807893  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807897  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807901  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807907  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.807914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807921  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.807924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.807937  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.807941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807947  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.807951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807956  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:45:24.807961  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:45:24.807964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.807980  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:45:24.807985  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.807988  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.807992  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.807998  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808032  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808049  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808059  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808068  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:45:24.808073  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:45:24.808076  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808093  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:45:24.808098  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808102  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808106  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808113  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808126  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808143  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808153  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808162  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:45:24.808167  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:45:24.808170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808186  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:45:24.808191  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808194  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808198  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808204  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808218  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808234  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808244  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808253  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:45:24.808258  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:45:24.808261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808277  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:45:24.808282  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808286  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808289  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808296  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808310  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808327  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808336  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808345  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:45:24.808350  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:45:24.808353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808369  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:45:24.808374  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808378  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808391  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808401  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808435  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808439  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808462  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808472  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808481  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:45:24.808486  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:45:24.808489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808506  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:45:24.808511  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808514  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808518  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808524  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808538  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808555  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808565  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808574  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:45:24.808578  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:45:24.808582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808598  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:45:24.808603  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808606  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808610  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808617  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808631  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808641  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808647  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808657  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808666  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:45:24.808671  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:45:24.808674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808690  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:45:24.808695  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808699  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808702  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808709  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808722  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808739  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808749  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808758  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:45:24.808762  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:45:24.808766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808782  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:45:24.808787  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808790  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808794  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808800  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808813  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808830  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808840  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808844  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808849  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:45:24.808854  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:45:24.808857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808873  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:45:24.808878  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.808881  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.808885  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.808908  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.808916  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808932  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.808936  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.808950  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.808954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808970  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.808974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.808980  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:45:24.808994  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:45:24.808997  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809015  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:45:24.809020  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.809024  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.809028  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.809034  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.809041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.809048  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.809052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.809065  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.809069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809076  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.809079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809085  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:45:24.809090  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:45:24.809093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809110  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:45:24.809115  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.809119  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.809122  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.809129  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.809136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.809143  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.809146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.809160  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.809163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809170  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.809173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809179  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:45:24.809184  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:45:24.809187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.809204  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:45:24.809209  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.816912  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.816920  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.816932  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.816944  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.816957  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.816962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.816982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.816989  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.816993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.816999  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817009  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:45:24.817014  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:45:24.817017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817034  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:45:24.817040  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817043  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817047  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817054  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817068  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817072  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817085  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817096  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817105  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:45:24.817109  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:45:24.817113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817146  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:45:24.817153  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817157  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817160  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817167  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817182  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817192  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817199  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817210  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817219  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:45:24.817224  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:45:24.817227  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817244  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:45:24.817249  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817253  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817257  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817264  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817278  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817288  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817295  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817305  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817315  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:45:24.817319  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:45:24.817323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817340  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:45:24.817345  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817348  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817352  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817358  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817373  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817390  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817405  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817408  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817414  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:45:24.817419  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:45:24.817422  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817440  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:45:24.817445  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817448  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817452  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817459  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817473  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817490  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817500  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817509  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:45:24.817514  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:45:24.817517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817534  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:45:24.817539  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817543  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817547  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817553  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817567  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817584  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817594  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817604  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:45:24.817608  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:45:24.817612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817628  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:45:24.817633  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817637  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817641  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817647  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817661  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817678  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817688  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817698  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:45:24.817702  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:45:24.817706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817723  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:45:24.817728  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817732  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817735  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817742  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817756  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817773  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817783  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817792  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:45:24.817797  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:45:24.817801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817817  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:45:24.817822  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817826  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817830  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817836  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817851  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817868  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817878  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.817882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817887  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:45:24.817892  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:45:24.817896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817912  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:45:24.817917  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.817921  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.817925  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.817931  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.817941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817949  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.817962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.817986  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.817989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.817996  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818005  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:45:24.818010  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:45:24.818023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818041  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:45:24.818056  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818059  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818063  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818070  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818084  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818088  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818101  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818112  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818121  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:45:24.818126  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:45:24.818129  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818146  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:45:24.818151  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818155  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818159  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818165  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818179  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818196  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818207  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818216  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:45:24.818221  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:45:24.818224  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818241  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:45:24.818247  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818251  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818255  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818261  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818277  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818295  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818306  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818316  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:45:24.818321  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:45:24.818325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818343  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:45:24.818348  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818352  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818356  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818363  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818377  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818398  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818409  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818413  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818419  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:45:24.818424  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:45:24.818427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818464  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:45:24.818470  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818474  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818477  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818485  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818501  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818512  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818520  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818531  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818535  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818541  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:45:24.818546  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:45:24.818550  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818567  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:45:24.818573  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818577  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818581  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818588  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818596  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818604  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818608  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818622  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818633  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818643  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:45:24.818649  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:45:24.818652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818670  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:45:24.818675  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818679  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818684  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818691  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818706  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818727  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818738  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818749  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:45:24.818754  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:45:24.818758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818775  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:45:24.818781  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818785  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818789  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818796  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818812  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818831  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818842  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818853  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818864  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818875  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818885  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:24.818890  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:24.818894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818909  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:24.818915  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.818918  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.818923  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.818930  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.818938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818946  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.818950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.818965  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.818969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818976  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.818980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.818986  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:45:24.818991  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:45:24.818994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819009  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:45:24.819015  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819019  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819023  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819030  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819046  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819057  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819065  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819076  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819086  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:45:24.819091  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:45:24.819095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819110  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:45:24.819115  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819119  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819123  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819131  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819146  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819150  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819165  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819176  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819186  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:45:24.819191  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:45:24.819195  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819210  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:45:24.819215  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819219  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819223  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819230  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819246  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819264  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819295  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:45:24.819303  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819313  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:45:24.819319  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:45:24.819322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819338  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:45:24.819344  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819348  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819352  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819359  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819375  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819386  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819394  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819403  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819411  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819421  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:24.819427  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:24.819430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819446  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:24.819451  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819455  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819460  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819467  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819483  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819502  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819506  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819513  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819523  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:24.819529  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:45:24.819532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819547  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:24.819553  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819557  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819562  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819568  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819584  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819604  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819616  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819627  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:24.819632  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:24.819636  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819651  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:24.819657  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819661  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819664  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819672  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819688  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819707  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819718  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819722  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819728  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.819734  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.819737  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819752  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.819758  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819762  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819766  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819773  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819789  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819807  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819818  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819829  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:45:24.819834  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:45:24.819837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819853  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:45:24.819859  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819863  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819867  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819874  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819881  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819889  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819908  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.819912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819919  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.819923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819929  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:24.819935  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:24.819938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.819953  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:24.819959  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.819963  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.819967  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.819974  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.819982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.819990  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.819994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820009  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820020  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820030  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:24.820035  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:45:24.820039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820054  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:24.820060  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820063  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820067  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820075  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820090  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820109  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820120  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820124  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820130  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:24.820135  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:24.820139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820154  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:24.820159  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820163  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820167  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820174  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820190  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820209  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820220  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820224  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820230  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.820236  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.820239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820254  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.820260  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820264  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820268  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820275  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820283  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820291  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820309  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820320  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820330  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:45:24.820336  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:45:24.820339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820354  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:45:24.820360  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820364  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820369  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820375  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820391  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820398  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820407  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820416  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820428  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820432  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820438  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:24.820444  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:24.820447  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820463  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:24.820469  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820472  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820477  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820484  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820500  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820519  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820523  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820530  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820540  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:24.820546  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:45:24.820549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820564  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:24.820570  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820573  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820578  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820585  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820601  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820619  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820630  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820640  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:24.820646  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:24.820649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820664  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:24.820670  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820674  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820679  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820685  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820693  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820701  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820720  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820731  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820741  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.820746  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.820750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820765  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.820771  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820774  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820779  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820786  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820801  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820806  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820820  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820831  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820841  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:45:24.820846  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:45:24.820850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820865  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:45:24.820871  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820875  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820879  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820886  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820901  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.820906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.820920  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.820925  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820931  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.820935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820941  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:24.820947  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:24.820950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.820965  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:24.820971  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.820975  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.820980  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.820986  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.820994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821004  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821029  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821040  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821050  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:24.821056  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:45:24.821063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821083  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:24.821090  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821094  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821099  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821106  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821122  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821141  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821152  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821164  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:24.821170  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:24.821173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821190  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:24.821196  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821199  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821204  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821211  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821227  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821246  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821257  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821267  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.821272  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.821276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821291  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.821297  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821301  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821306  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821313  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821328  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821347  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821358  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821368  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:45:24.821373  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:45:24.821377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821393  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:45:24.821402  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821406  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821420  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821428  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821453  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821472  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821483  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821493  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:24.821499  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:24.821502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821518  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:24.821524  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821527  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821532  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821539  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821554  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821573  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821584  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821594  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:24.821599  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:45:24.821603  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821618  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:24.821624  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821628  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821632  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821639  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821647  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821655  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821659  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821674  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821685  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821694  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:24.821700  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:24.821703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821719  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:24.821724  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821728  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821733  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821740  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821747  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821755  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821774  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821785  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821794  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.821799  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.821803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821827  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.821832  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821836  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821839  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821846  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821859  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821878  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821888  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821898  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:45:24.821903  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:45:24.821906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821922  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:45:24.821927  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.821931  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.821935  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.821942  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.821949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821957  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.821961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.821975  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.821979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821987  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.821992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.821998  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:24.822003  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:24.822007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822022  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:24.822027  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822031  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822036  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822042  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822058  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822086  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822090  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822106  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822116  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:24.822122  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:45:24.822135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822151  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:24.822166  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822171  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822175  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822182  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822208  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822236  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822240  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822247  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822251  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822256  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:24.822262  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:24.822265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822280  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:24.822286  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822289  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822294  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822310  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822326  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822345  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822356  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822366  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.822371  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.822375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822390  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.822399  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822404  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822408  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822416  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822432  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822451  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822462  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822472  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:45:24.822478  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:45:24.822481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822498  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:45:24.822504  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822507  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822512  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822518  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822534  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822553  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822557  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822564  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822574  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:24.822579  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:24.822583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822598  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:24.822604  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822608  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822613  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822620  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822635  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822654  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822665  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822675  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:24.822681  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:45:24.822684  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822700  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:24.822706  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822709  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822713  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822720  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822727  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822735  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822746  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822754  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822765  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822775  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:24.822780  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:24.822784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822800  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:24.822805  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822809  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822813  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822820  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822836  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822856  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822868  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822878  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.822884  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.822887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822903  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.822909  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.822912  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.822917  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.822924  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.822932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822940  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.822944  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.822959  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.822963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822970  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.822974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.822980  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:45:24.822985  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:45:24.822989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823004  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:45:24.823010  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.823014  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.823018  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.823025  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.823032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823040  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.823045  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823059  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.823064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823070  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.823074  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823080  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:24.823086  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:24.823089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823105  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:24.823110  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.823114  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.823119  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.823126  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.823133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823141  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.823146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823160  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.823164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823171  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.823175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823181  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:24.823187  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:45:24.823190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823206  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:24.823211  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.823215  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.823220  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.823227  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.823234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823242  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.823247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823261  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.823265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823272  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.823276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823282  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:24.823288  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:24.823292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823308  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:24.823313  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.823317  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.823322  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.823328  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.823336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823344  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.823348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823363  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.823367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823374  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.823378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823384  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.823389  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.823393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823413  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:24.823419  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.823423  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.823427  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.823434  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.823442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823450  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.823454  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823469  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:24.823473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823480  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.823484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823492  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.823496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823501  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:45:24.823507  1 13 json_db_to_gui() child args name <main>
09-16 14:45:24.823510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823516  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:45:24.823521  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.823525  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:24.823529  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:24.823536  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:24.823543  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823551  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:24.823555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:24.823571  1 11 json_db_to_gui() operator() begin
09-16 14:45:24.823575  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:24.823579  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:24.823583  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:24.823593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823600  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:24.823604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:24.823647  1 10 json_db_to_gui() created gui_node
09-16 14:45:24.858212  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_004_t" end time: Sep 16 14:45 CDT
"Convert_DBJson2GUIJson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

34/65 Testing: Convert_GUIJson2DBJson_004_t
34/65 Test: Convert_GUIJson2DBJson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test004.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_004_t.d
"Convert_GUIJson2DBJson_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.991634  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.993841  1 14 json_gui_to_db() begin
09-16 14:45:25.026798  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.026975  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.027080  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.027131  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.027161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.027207  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.027296  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.027340  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.027374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027523  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.027528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027535  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.027541  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.027546  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.027550  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.027555  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.027563  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.027568  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.027572  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027613  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.027618  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027624  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.027630  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.027634  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.027638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.027643  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.027650  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.027704  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:45:25.027710  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:45:25.027715  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027768  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.027777  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.027784  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:45:25.027788  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:45:25.027793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027831  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.027838  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.027844  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:45:25.027849  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:45:25.027853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027861  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027877  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027889  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.027896  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.027902  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:25.027907  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.027911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027947  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.027953  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.027964  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:45:25.027969  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:45:25.027973  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028009  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028016  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.028021  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:45:25.028026  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:45:25.028031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028039  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028066  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028073  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.028078  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:45:25.028083  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:45:25.028087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028111  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028131  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028138  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.028144  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.028150  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.028154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028185  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028191  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028198  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.028203  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.028208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028238  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028245  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.028250  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028256  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.028262  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.028266  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.028270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.028275  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028282  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.028288  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:45:25.028292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028309  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028331  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:45:25.028335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028342  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.028347  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.028351  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.028355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.028359  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028367  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.028394  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:45:25.028408  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:45:25.028412  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028431  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028452  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028461  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.028467  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:45:25.028472  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:45:25.028477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028500  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028512  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028519  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.028525  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:45:25.028530  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:45:25.028534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028542  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028568  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028575  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.028580  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:45:25.028584  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:45:25.028589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028604  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028618  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028625  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028632  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.028637  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.028642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028679  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.028684  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028690  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.028695  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.028699  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.028703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.028707  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028715  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.028720  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:45:25.028724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028763  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:45:25.028767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028774  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.028779  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.028783  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.028786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.028791  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028798  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.028803  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.028807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028845  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.028849  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028856  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.028861  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.028865  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.028868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.028873  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.028879  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.028887  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.028891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028927  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.028932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029171  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.029177  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.029182  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.029185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.029191  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:45:25.029207  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.029234  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:45:25.029238  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.029246  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029254  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.029260  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:45:25.029265  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.029269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029308  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029316  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.029322  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.029326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029334  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029342  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029363  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.029368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029374  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.029379  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.029384  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.029387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.029392  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029402  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.029408  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:25.029412  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029444  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029451  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:25.029455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029461  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.029466  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.029470  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.029474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.029480  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029487  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.029492  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.029496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029534  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.029538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029544  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.029549  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.029553  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.029557  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.029561  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029568  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.029573  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.029577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029593  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029615  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.029620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029626  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.029631  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.029635  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.029639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.029643  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029650  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.029656  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.029660  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.029665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029700  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029706  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.029713  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:45:25.029717  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.029722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029757  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029764  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.029768  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.029773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029809  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.029814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029820  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.029825  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.029829  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.029833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.029837  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029844  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.029850  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.029854  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.029859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029882  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029894  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029901  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.029907  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:45:25.029912  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.029916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029952  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.029958  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.029964  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:45:25.029969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029978  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:45:25.029983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029990  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.029998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030026  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.030031  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.030035  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.030039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.030044  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:45:25.030049  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.030056  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030063  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.030069  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:25.030073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030083  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:25.030087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030129  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.030134  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.030138  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.030142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.030148  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030155  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.030161  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.030165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030174  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.030179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030187  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030220  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.030225  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.030229  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.030233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.030239  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:25.030244  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.030251  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030258  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.030264  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.030268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030278  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.030282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030324  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.030329  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.030333  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.030337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.030342  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:25.030346  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.030353  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030360  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.030366  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:25.030370  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030378  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030394  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030413  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:25.030417  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030424  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.030429  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.030433  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.030437  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.030443  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030450  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.030456  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:45:25.030461  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:45:25.030465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030495  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030501  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030507  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.030512  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.030517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030547  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030554  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.030559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030565  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.030570  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.030575  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.030578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.030583  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030589  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.030594  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.030598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030622  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030630  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030636  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.030641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030647  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.030652  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.030656  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.030660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.030664  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030671  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.030677  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:45:25.030682  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:45:25.030686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030721  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030728  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.030734  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:45:25.030739  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:45:25.030743  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030751  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030759  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030766  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030777  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030784  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.030790  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.030795  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.030799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030834  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030840  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.030846  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:45:25.030851  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.030855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030877  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030889  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030896  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.030902  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:45:25.030906  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:45:25.030911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030926  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030946  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.030952  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.030957  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.030961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030977  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030998  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.031002  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031008  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.031014  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.031018  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.031021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.031026  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.031032  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.031037  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:45:25.031042  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:45:25.031046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031081  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.031087  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.031093  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:45:25.031098  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:45:25.031102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031138  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.031145  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.031150  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.031154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031170  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031191  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.031195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031201  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.031206  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.031210  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.031214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.031218  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.031225  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.031231  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:45:25.031235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031244  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:45:25.031249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031265  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031290  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.031295  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.031300  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.031303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.031314  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.031328  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031335  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.031339  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031345  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.031349  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031355  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.031359  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031365  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.031369  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031374  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.031379  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031386  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.031393  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.031407  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:45:25.031413  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.031418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031444  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031456  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.031463  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.031468  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:45:25.031473  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:45:25.031477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031511  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.031518  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.031524  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:45:25.031528  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:45:25.031532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031555  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.031580  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:45:25.031639  1 14 json_gui_to_db() created db_node
09-16 14:45:25.040043  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.32 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_004_t" end time: Sep 16 14:45 CDT
"Convert_GUIJson2DBJson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

44/65 Testing: Convert_DBJson2Fhicl_001_t
44/65 Test: Convert_DBJson2Fhicl_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/Convert_DBJson2Fhicl_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/test001.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/test001.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.json" "-c" "test001.fcl" "-t" "Convert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/Convert_DBJson2Fhicl_001_t.d
"Convert_DBJson2Fhicl_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.315637  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:45:25.315786  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:45:25.315824  1  0 artdaq::database::fhicljson trace_enable
09-16 14:45:25.315857  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:45:25.317513  1  3 json_to_fhicl: begin
09-16 14:45:25.317559  1  3 json_to_fhicl: Reading json root nodes
09-16 14:45:25.345639  1  2 write_data() begin
09-16 14:45:25.345860  1  2 json2fcldb() key=<services> type=<table>
09-16 14:45:25.345994  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:45:25.346030  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:45:25.346252  1  2 json2fcldb() key=<user> type=<table>
09-16 14:45:25.346289  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:45:25.346324  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:45:25.346365  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:45:25.346461  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:45:25.346503  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:45:25.346543  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:45:25.346639  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:45:25.346674  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:45:25.346714  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:45:25.346747  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:45:25.346787  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:45:25.346827  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:45:25.346867  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:45:25.346906  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:45:25.346984  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:45:25.347025  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:45:25.347086  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:45:25.351242  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:45:25.351318  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:45:25.351373  1  2 json2fcldb() key=<level> type=<number>
09-16 14:45:25.351428  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:45:25.351499  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:45:25.351612  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:45:25.351654  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:45:25.351689  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.351728  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:45:25.351764  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:45:25.352058  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:45:25.352095  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:45:25.352128  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:45:25.352162  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.352202  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:45:25.352255  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:45:25.352290  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.352330  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:45:25.352403  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:45:25.352461  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:45:25.352516  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:45:25.352609  1  2 json2fcldb() key=<source> type=<table>
09-16 14:45:25.352646  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.352685  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:45:25.352726  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:45:25.352780  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:45:25.363783  1  2 write_data() end
09-16 14:45:25.363842  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:45:25.364040  1  3 json_to_fhicl: end
Running test:<Convert_DBJson2Fhicl>
<end of output>
Test time =   0.07 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2Fhicl_001_t" end time: Sep 16 14:45 CDT
"Convert_DBJson2Fhicl_001_t" time elapsed: 00:00:00
----------------------------------------------------------

41/65 Testing: RoundConvert_GUIJson2DBJson_002_t
41/65 Test: RoundConvert_GUIJson2DBJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_002_t.d
"RoundConvert_GUIJson2DBJson_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.313096  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:25.315659  1 14 json_gui_to_db() begin
09-16 14:45:25.345140  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.345329  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.345439  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.345491  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.345520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.345572  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.345682  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.345728  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.345758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.345796  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.345831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.345858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.345894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.345910  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.345918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.345930  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.345939  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.345945  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.345951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.345959  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.345970  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.345979  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:45:25.345986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346016  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346061  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:45:25.346070  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346082  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.346091  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.346097  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.346103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.346111  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.346121  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.346160  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:45:25.346170  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:45:25.346177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346255  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.346268  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.346280  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_depth, value=int(2)
09-16 14:45:25.346289  1 16 json_node_t() makeChild() node_name=<event_queue_depth>
09-16 14:45:25.346297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346313  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346372  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.346385  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.346400  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_wait_time, value=int(1)
09-16 14:45:25.346410  1 16 json_node_t() makeChild() node_name=<event_queue_wait_time>
09-16 14:45:25.346417  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346431  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346486  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.346499  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.346510  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_events_per_bunch, value=int(1)
09-16 14:45:25.346520  1 16 json_node_t() makeChild() node_name=<expected_events_per_bunch>
09-16 14:45:25.346528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346600  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.346613  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.346623  1 15 json_gui_to_db() operator() switch ARRAY child name= file_duration, value=int(0)
09-16 14:45:25.346632  1 16 json_node_t() makeChild() node_name=<file_duration>
09-16 14:45:25.346639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346701  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346712  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.346726  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.346737  1 15 json_gui_to_db() operator() switch ARRAY child name= file_event_count, value=int(0)
09-16 14:45:25.346747  1 16 json_node_t() makeChild() node_name=<file_event_count>
09-16 14:45:25.346756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346828  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.346841  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.346853  1 15 json_gui_to_db() operator() switch ARRAY child name= file_size_MB, value=int(8000)
09-16 14:45:25.346862  1 16 json_node_t() makeChild() node_name=<file_size_MB>
09-16 14:45:25.346870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346934  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.346945  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.346957  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.346967  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:45:25.346976  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:45:25.346984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347058  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.347071  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.347082  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:45:25.347092  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.347100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347143  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347164  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.347176  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.347187  1 15 json_gui_to_db() operator() switch ARRAY child name= onmon_event_prescale, value=int(1)
09-16 14:45:25.347195  1 16 json_node_t() makeChild() node_name=<onmon_event_prescale>
09-16 14:45:25.347204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347317  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.347339  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.347370  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:45:25.347386  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:45:25.347403  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347479  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347519  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.347543  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.347617  1 15 json_gui_to_db() operator() switch ARRAY child name= xmlrpc_client_list, value=std::string(;http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5)
09-16 14:45:25.347636  1 16 json_node_t() makeChild() node_name=<xmlrpc_client_list>
09-16 14:45:25.347648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347789  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.347813  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.347834  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.347852  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.347864  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347889  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.347986  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.348009  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.348026  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.348041  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348184  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.348198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348211  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.348223  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.348234  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.348246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.348266  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.348279  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.348288  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:45:25.348296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348352  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348364  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:45:25.348371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348383  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.348391  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.348405  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.348412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.348421  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.348433  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.348444  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/aggregator/agg_%UID%_metrics.log)
09-16 14:45:25.348453  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:45:25.348460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348488  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348525  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.348538  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.348549  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:45:25.348558  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:45:25.348565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348579  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348626  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.348638  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.348649  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:45:25.348658  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:45:25.348665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348715  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348725  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.348736  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.348745  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:45:25.348754  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:45:25.348761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348787  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348824  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.348836  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.348845  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.348852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348919  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.348926  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.348938  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.348947  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.348955  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.348961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.348972  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.348986  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.348994  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.349002  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349070  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.349076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349086  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.349094  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.349100  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.349105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.349112  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.349123  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.349131  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:25.349137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349198  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:25.349206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349216  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.349223  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.349230  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.349236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.349245  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.349256  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.349264  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.349271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349332  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.349339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349349  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.349357  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.349369  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.349379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.349386  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.349408  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.349417  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.349424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349481  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.349488  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349498  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.349506  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.349512  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.349520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.349528  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.349539  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.349549  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.349557  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.349564  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349613  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349623  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.349634  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.349646  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:45:25.349654  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.349661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349720  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.349732  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.349743  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.349751  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349831  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.349840  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349853  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.349863  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.349871  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.349877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.349886  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.349902  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.349912  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.349921  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.349929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349963  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.349994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350007  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.350022  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.350036  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:45:25.350047  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.350056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350141  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.350155  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.350174  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:25.350183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350254  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:25.350267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350731  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350780  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.350794  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.350803  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.350810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.350825  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.350839  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.350851  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:45:25.350860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350881  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:45:25.350891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350963  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350980  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.350989  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.350997  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.351005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.351016  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:45:25.351044  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.351082  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351095  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.351105  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.351113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351130  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.351137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351210  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.351218  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.351225  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.351231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.351240  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:25.351248  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.351261  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351273  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.351285  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.351292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351309  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.351317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351334  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351404  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.351414  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.351422  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.351428  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.351438  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:25.351447  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.351461  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351474  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.351484  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:25.351492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351555  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351569  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:25.351576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351588  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.351597  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.351604  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.351610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.351618  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351632  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.351643  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:45:25.351651  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351733  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:45:25.351741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351756  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.351765  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.351772  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.351778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.351787  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351799  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.351809  1 15 json_gui_to_db() operator() switch ARRAY child name= instance_name, value=std::string(ArtdaqDemo)
09-16 14:45:25.351818  1 16 json_node_t() makeChild() node_name=<instance_name>
09-16 14:45:25.351825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351840  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351889  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351901  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.351911  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(ArtdaqDemoBuildInfo)
09-16 14:45:25.351921  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.351928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351942  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351970  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351995  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352007  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.352018  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQAG)
09-16 14:45:25.352027  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:45:25.352035  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352049  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352094  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352106  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352120  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.352131  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.352139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352155  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352187  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352218  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.352227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352241  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.352250  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.352257  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.352264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.352272  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352285  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.352296  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.352304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352382  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.352390  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352408  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.352418  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.352426  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.352433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.352442  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352455  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.352468  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.352478  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.352486  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352559  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352572  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.352583  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:45:25.352592  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:45:25.352600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352631  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352673  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352685  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.352696  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.352704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352770  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352785  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.352793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352807  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.352816  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.352823  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.352829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.352837  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352849  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.352859  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:45:25.352867  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:45:25.352874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352901  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352934  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352945  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.352953  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.352960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353022  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.353029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353039  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.353047  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.353053  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.353059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.353066  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.353077  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.353086  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonInput)
09-16 14:45:25.353094  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.353101  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353178  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:45:25.353270  1 14 json_gui_to_db() created db_node
09-16 14:45:25.365987  1 14 json_gui_to_db() created db_json
09-16 14:45:25.366143  1 10 json_db_to_gui() begin
09-16 14:45:25.373417  1 10 json_db_to_gui() read dbAST
09-16 14:45:25.373474  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.373498  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.373507  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.373516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.373538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.373564  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:25.373595  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:25.373603  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.373615  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:25.373625  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.373643  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.373651  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.373670  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.373691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.373725  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.373733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.373748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.373789  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.373798  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.373805  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.373812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.373828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.373837  1 11 json_db_to_gui() operator() switch OBJECT child name=<aggregator>
09-16 14:45:25.373846  1 13 json_db_to_gui() child args name <aggregator>
09-16 14:45:25.373855  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.373892  1 13 json_db_to_gui() metadata node was found, name=<aggregator>
09-16 14:45:25.373902  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.373909  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.373918  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.373933  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.373947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.373963  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.373970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.373984  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374000  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.374008  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.374016  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.374024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.374041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374049  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:45:25.374058  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:45:25.374066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374092  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:45:25.374101  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.374109  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.374118  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.374132  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.374146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374162  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.374169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374217  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.374225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374241  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.374248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374271  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_queue_depth>
09-16 14:45:25.374281  1 13 json_db_to_gui() child args name <event_queue_depth>
09-16 14:45:25.374289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374314  1 13 json_db_to_gui() metadata node was found, name=<event_queue_depth>
09-16 14:45:25.374323  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.374331  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.374339  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.374353  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.374367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374383  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.374390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374428  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.374435  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374450  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.374457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374469  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_queue_wait_time>
09-16 14:45:25.374480  1 13 json_db_to_gui() child args name <event_queue_wait_time>
09-16 14:45:25.374489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374513  1 13 json_db_to_gui() metadata node was found, name=<event_queue_wait_time>
09-16 14:45:25.374522  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.374530  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.374538  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.374553  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.374566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374583  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.374590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374620  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.374627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374643  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.374650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374661  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_events_per_bunch>
09-16 14:45:25.374672  1 13 json_db_to_gui() child args name <expected_events_per_bunch>
09-16 14:45:25.374680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374704  1 13 json_db_to_gui() metadata node was found, name=<expected_events_per_bunch>
09-16 14:45:25.374714  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.374721  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.374730  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.374744  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.374758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374774  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.374781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374811  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.374818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374833  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.374840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374852  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_duration>
09-16 14:45:25.374862  1 13 json_db_to_gui() child args name <file_duration>
09-16 14:45:25.374871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374895  1 13 json_db_to_gui() metadata node was found, name=<file_duration>
09-16 14:45:25.374904  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.374912  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.374920  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.374934  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.374948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.374964  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.374971  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.374986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375001  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.375009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375023  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.375031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375042  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_event_count>
09-16 14:45:25.375053  1 13 json_db_to_gui() child args name <file_event_count>
09-16 14:45:25.375062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375085  1 13 json_db_to_gui() metadata node was found, name=<file_event_count>
09-16 14:45:25.375095  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.375103  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.375111  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.375124  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.375137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375153  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.375161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375191  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.375198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375213  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.375220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375232  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_size_MB>
09-16 14:45:25.375243  1 13 json_db_to_gui() child args name <file_size_MB>
09-16 14:45:25.375251  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375275  1 13 json_db_to_gui() metadata node was found, name=<file_size_MB>
09-16 14:45:25.375284  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.375292  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.375300  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.375313  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.375326  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375342  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.375350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375364  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375379  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.375387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375405  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.375413  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375426  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:45:25.375436  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:45:25.375445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375469  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:45:25.375478  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.375485  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.375494  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.375507  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.375521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375537  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.375544  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375575  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.375583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375597  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.375604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375616  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:25.375627  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:25.375635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375659  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:25.375668  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.375676  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.375684  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.375698  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.375712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375728  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.375735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375765  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.375773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375788  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.375795  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375807  1 11 json_db_to_gui() operator() switch OBJECT child name=<onmon_event_prescale>
09-16 14:45:25.375817  1 13 json_db_to_gui() child args name <onmon_event_prescale>
09-16 14:45:25.375825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375849  1 13 json_db_to_gui() metadata node was found, name=<onmon_event_prescale>
09-16 14:45:25.375859  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.375866  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.375875  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.375888  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.375902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375918  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.375926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.375956  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.375963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375978  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.375985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.375997  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:45:25.376008  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:45:25.376016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376040  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:45:25.376050  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.376057  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.376066  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.376079  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.376093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376109  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.376116  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376131  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376160  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.376167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376182  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.376189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376201  1 11 json_db_to_gui() operator() switch OBJECT child name=<xmlrpc_client_list>
09-16 14:45:25.376211  1 13 json_db_to_gui() child args name <xmlrpc_client_list>
09-16 14:45:25.376219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376245  1 13 json_db_to_gui() metadata node was found, name=<xmlrpc_client_list>
09-16 14:45:25.376255  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.376262  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.376270  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.376284  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.376300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376314  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.376322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376358  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.376365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376380  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.376387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376406  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.376414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376425  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:25.376436  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:25.376444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376468  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:25.376477  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.376485  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.376494  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.376508  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.376522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376538  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.376545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376575  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.376582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376597  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.376604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376615  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:45:25.376626  1 13 json_db_to_gui() child args name <metrics>
09-16 14:45:25.376634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376658  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:45:25.376668  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.376675  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.376684  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.376697  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.376711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376727  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.376734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376764  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.376772  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.376779  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.376788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.376805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376812  1 11 json_db_to_gui() operator() switch OBJECT child name=<aggFile>
09-16 14:45:25.376822  1 13 json_db_to_gui() child args name <aggFile>
09-16 14:45:25.376830  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376854  1 13 json_db_to_gui() metadata node was found, name=<aggFile>
09-16 14:45:25.376864  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.376871  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.376880  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.376894  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.376908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376924  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.376931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.376946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.376961  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.376969  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.376977  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.376985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.377003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377011  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:45:25.377020  1 13 json_db_to_gui() child args name <fileName>
09-16 14:45:25.377029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377057  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:45:25.377066  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.377074  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.377082  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.377096  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.377123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377139  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.377148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377178  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.377185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377201  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.377208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377220  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:45:25.377230  1 13 json_db_to_gui() child args name <level>
09-16 14:45:25.377239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377264  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:45:25.377273  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.377281  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.377290  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.377303  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.377317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377333  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.377341  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377371  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.377379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377394  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.377405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377417  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:45:25.377428  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:45:25.377437  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377461  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:45:25.377471  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.377478  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.377486  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.377500  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.377513  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377529  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.377536  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377566  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.377573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377588  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.377595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377607  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:45:25.377618  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:45:25.377626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377650  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:45:25.377660  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.377667  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.377676  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.377690  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.377704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377720  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.377728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377757  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.377765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377779  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.377786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377801  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.377808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377823  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.377830  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377844  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.377851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377862  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:45:25.377874  1 13 json_db_to_gui() child args name <outputs>
09-16 14:45:25.377882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377893  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:45:25.377904  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.377912  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.377921  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.377935  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.377948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.377964  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.377972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.377986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378003  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378011  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.378018  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.378026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.378044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378056  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.378064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378077  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:45:25.378087  1 13 json_db_to_gui() child args name <physics>
09-16 14:45:25.378095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378105  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:45:25.378116  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378124  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.378133  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.378146  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.378161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378177  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.378184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378215  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378223  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.378230  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.378238  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.378255  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378263  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:45:25.378272  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:45:25.378280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378304  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:45:25.378314  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378321  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.378329  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.378344  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.378358  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378374  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.378381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378399  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378417  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378425  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.378432  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.378439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.378455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378467  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.378476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378489  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:45:25.378499  1 13 json_db_to_gui() child args name <filters>
09-16 14:45:25.378507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378531  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:45:25.378541  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378548  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.378557  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.378571  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.378585  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378601  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.378609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378640  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378648  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.378655  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.378663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.378680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378688  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:45:25.378697  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:45:25.378705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378729  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:45:25.378739  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378746  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.378755  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.378768  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.378782  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378798  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.378805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378820  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378835  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378843  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.378850  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.378859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.378876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378884  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.378893  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.378901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.378926  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.378936  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.378943  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.378952  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.378966  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.378980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.378997  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.379004  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379035  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.379042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379057  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.379064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379076  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:45:25.379087  1 13 json_db_to_gui() child args name <nth>
09-16 14:45:25.379095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379120  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:45:25.379130  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.379137  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.379146  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.379160  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.379174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379189  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.379196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379226  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.379234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379249  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.379256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379271  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.379278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379290  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:45:25.379301  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:45:25.379309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379333  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:45:25.379342  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.379349  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.379358  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.379372  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.379385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379406  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.379429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379463  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.379471  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.379478  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.379487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.379504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379513  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.379522  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.379530  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379555  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.379565  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.379573  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.379582  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.379596  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.379610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379627  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.379634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379664  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.379671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379687  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.379694  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379706  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:45:25.379717  1 13 json_db_to_gui() child args name <nth>
09-16 14:45:25.379725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379751  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:45:25.379760  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.379768  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.379776  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.379790  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.379804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379820  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.379827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.379858  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.379865  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379880  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.379887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379903  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.379910  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379924  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.379931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379943  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:45:25.379954  1 13 json_db_to_gui() child args name <p1>
09-16 14:45:25.379961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.379986  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:45:25.379996  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380003  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.380012  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380026  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.380040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.380055  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.380063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.380115  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380123  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.380131  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.380140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.380165  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380173  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.380189  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.380197  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.380225  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.380232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380245  1 11 json_db_to_gui() operator() switch OBJECT child name=<p2>
09-16 14:45:25.380255  1 13 json_db_to_gui() child args name <p2>
09-16 14:45:25.380263  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380287  1 13 json_db_to_gui() metadata node was found, name=<p2>
09-16 14:45:25.380297  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380305  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.380314  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380328  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.380342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.380358  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.380365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.380401  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380410  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.380417  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.380425  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.380445  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380453  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.380460  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.380468  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.380490  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:45:25.380521  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380538  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.380545  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.380586  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.380594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380606  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:45:25.380617  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:45:25.380625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380651  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:45:25.380660  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380668  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.380676  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380690  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.380703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.380719  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.380726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.380757  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380765  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.380772  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.380780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.380799  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380808  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.380814  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.380821  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.380844  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:25.380854  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380863  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.380871  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.380896  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.380903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380916  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:45:25.380926  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:45:25.380934  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.380958  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:45:25.380968  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.380975  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.380984  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.380998  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.381012  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381029  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.381036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381051  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381067  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381074  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.381082  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.381090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.381109  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381117  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.381124  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.381131  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.381142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.381153  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:25.381164  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381173  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.381181  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.381190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.381206  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.381213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381226  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:45:25.381236  1 13 json_db_to_gui() child args name <producers>
09-16 14:45:25.381245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381269  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:45:25.381279  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381286  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.381294  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.381307  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.381321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381337  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.381345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381374  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381382  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.381389  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.381402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.381420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381428  1 11 json_db_to_gui() operator() switch OBJECT child name=<BuildInfo>
09-16 14:45:25.381437  1 13 json_db_to_gui() child args name <BuildInfo>
09-16 14:45:25.381445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381469  1 13 json_db_to_gui() metadata node was found, name=<BuildInfo>
09-16 14:45:25.381479  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381486  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.381495  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.381508  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.381522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381539  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.381546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381577  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381584  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.381592  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.381600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.381618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381626  1 11 json_db_to_gui() operator() switch OBJECT child name=<instance_name>
09-16 14:45:25.381635  1 13 json_db_to_gui() child args name <instance_name>
09-16 14:45:25.381643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381667  1 13 json_db_to_gui() metadata node was found, name=<instance_name>
09-16 14:45:25.381677  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381684  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.381693  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.381707  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.381721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381737  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.381744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381773  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.381781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381796  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.381803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381815  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.381825  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.381834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381860  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.381869  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.381877  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.381885  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.381899  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.381913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381928  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.381935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.381966  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.381973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.381988  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.381995  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382010  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.382017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382031  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.382038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382052  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.382059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382070  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:45:25.382081  1 13 json_db_to_gui() child args name <process_name>
09-16 14:45:25.382089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382099  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:45:25.382109  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.382118  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.382126  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.382140  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.382153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382180  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.382188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382219  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.382227  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382242  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.382249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382261  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:45:25.382272  1 13 json_db_to_gui() child args name <services>
09-16 14:45:25.382281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382291  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:45:25.382301  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.382310  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.382319  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.382333  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.382347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382363  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.382370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382405  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.382414  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.382421  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.382429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.382447  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382456  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:45:25.382465  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:45:25.382473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382498  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:45:25.382507  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.382514  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.382523  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.382536  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.382551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382567  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.382574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382605  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.382613  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.382620  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.382629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.382645  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382653  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:25.382663  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:25.382671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382695  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:25.382705  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.382712  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.382720  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.382734  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.382748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382764  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.382771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382802  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.382810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382824  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.382832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382844  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:45:25.382854  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:45:25.382863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382886  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:45:25.382896  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.382903  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.382911  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.382924  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.382938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382955  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.382962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.382977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.382992  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.383000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383015  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.383022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383037  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.383044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383055  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:45:25.383066  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:45:25.383074  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383098  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:45:25.383107  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.383115  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.383123  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.383137  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.383151  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.383167  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.383175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.383205  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.383213  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.383220  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.383228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.383246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383254  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:45:25.383263  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:45:25.383271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383296  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:45:25.383305  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.383313  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.383321  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.383336  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.383350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.383366  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.383373  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.383406  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.383414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383430  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.383437  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383452  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.383459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383474  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.383481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383492  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:45:25.383502  1 13 json_db_to_gui() child args name <source>
09-16 14:45:25.383511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383521  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:45:25.383531  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.383539  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.383547  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.383561  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.383574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.383591  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.383598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.383628  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.383636  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.383643  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.383652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.383668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383676  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.383685  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.383694  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383717  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.383727  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.383734  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.383743  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.383757  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.383771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.383787  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.383794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383809  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.383824  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.383831  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383847  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.383854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383869  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.383876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.383905  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:45:25.383927  1 10 json_db_to_gui() created gui_node
09-16 14:45:25.396345  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.13 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_002_t" end time: Sep 16 14:45 CDT
"RoundConvert_GUIJson2DBJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

40/65 Testing: RoundConvert_GUIJson2DBJson_001_t
40/65 Test: RoundConvert_GUIJson2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_001_t.d
"RoundConvert_GUIJson2DBJson_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.314289  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:25.317043  1 14 json_gui_to_db() begin
09-16 14:45:25.349582  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.349948  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.350116  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.350192  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.350248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.350322  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.350490  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.350552  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.350594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350801  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.350811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350826  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.350837  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.350845  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.350852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.350861  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.350876  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.350887  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.350895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.350911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351267  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:45:25.351274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351287  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.351295  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.351303  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.351308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.351316  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351329  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.351376  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:45:25.351387  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:45:25.351400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351491  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351506  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.351517  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:45:25.351526  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:45:25.351533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351550  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351608  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351621  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.351633  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:45:25.351642  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:45:25.351650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351666  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351722  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351736  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.351747  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:25.351756  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.351764  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351836  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351850  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.351866  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:45:25.351876  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:45:25.351883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.351949  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.351961  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.351970  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:45:25.351979  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:45:25.351988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352054  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352066  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.352075  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:45:25.352084  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:45:25.352091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352169  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352183  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.352193  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.352202  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.352210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352279  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352291  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.352300  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.352308  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352349  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352367  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352381  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.352388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352407  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.352417  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.352424  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.352431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.352439  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352451  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.352460  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:45:25.352467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352513  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352542  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:45:25.352550  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352562  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.352571  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.352577  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.352583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.352591  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352604  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.352634  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:45:25.352645  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:45:25.352653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352721  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352733  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.352745  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:45:25.352755  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:45:25.352763  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352829  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352841  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.352852  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:45:25.352861  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:45:25.352870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352941  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.352955  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.352964  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:45:25.352974  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:45:25.352982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.352996  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353056  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.353069  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.353078  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.353086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353163  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:45:25.353171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353185  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.353195  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.353203  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.353209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.353218  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.353231  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.353240  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:45:25.353248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353325  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:45:25.353334  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353347  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.353358  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.353365  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.353371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.353380  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.353393  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.353407  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.353415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353479  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353493  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.353501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353513  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.353523  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.353531  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.353537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.353545  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.353557  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.353570  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.353578  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353621  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:45:25.353631  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353882  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.353913  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.353924  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.353931  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.353937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.353946  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:45:25.353967  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.353998  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:45:25.354008  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.354021  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.354033  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.354044  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:45:25.354053  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.354060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354132  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.354146  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.354156  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.354164  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354193  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354235  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:45:25.354244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354257  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.354266  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.354273  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.354280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.354288  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.354300  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.354309  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:25.354317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354378  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354392  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:45:25.354405  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354419  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.354428  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.354436  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.354442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.354453  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.354467  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.354477  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.354485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354500  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354560  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:45:25.354569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354582  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.354591  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.354599  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.354605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.354613  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.354626  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.354636  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.354645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354676  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354720  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:45:25.354729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354742  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.354751  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.354759  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.354765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.354773  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.354785  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.354796  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.354805  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.354814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354882  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.354895  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.354908  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:45:25.354918  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.354925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354955  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.354996  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.355009  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.355017  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.355026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355040  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355095  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:45:25.355103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355115  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.355123  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.355130  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.355137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.355144  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.355155  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.355164  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:45:25.355172  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.355178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355229  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355238  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.355448  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.355462  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:45:25.355472  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:45:25.355480  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355513  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355552  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.355565  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.355575  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:45:25.355582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355600  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:45:25.355609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355637  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355689  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.355699  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.355707  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.355714  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.355723  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:45:25.355731  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.355743  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.355755  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.355768  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:25.355777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355794  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:45:25.355802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355833  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355880  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.355889  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.355896  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.355901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.355911  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.355922  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.355931  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.355938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355954  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:45:25.355963  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355978  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.355994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356038  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.356046  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.356053  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.356059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.356069  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:25.356077  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.356088  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.356100  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.356111  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.356121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356147  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:45:25.356160  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356256  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356275  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.356289  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.356301  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.356311  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.356326  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:25.356339  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.356358  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.356383  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.356405  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:25.356421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356550  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:45:25.356564  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356587  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.356602  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.356614  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.356625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.356644  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.356668  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.356688  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:45:25.356704  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:45:25.356716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356742  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356838  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.356863  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.356880  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.356895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356947  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356971  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.356999  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357026  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:45:25.357034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357047  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.357065  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.357077  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.357083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.357092  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357105  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.357114  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.357121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357135  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357150  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357190  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:45:25.357198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357209  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.357218  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.357224  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.357231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.357239  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357251  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.357264  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:45:25.357272  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:45:25.357279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357293  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357343  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357355  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.357365  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:45:25.357374  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:45:25.357381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357443  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357453  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357466  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.357476  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:45:25.357485  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.357492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357555  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357567  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.357577  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:45:25.357585  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.357593  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357655  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357666  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.357678  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:45:25.357687  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:45:25.357694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357758  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357771  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.357780  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.357787  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357847  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:45:25.357854  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357863  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.357871  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.357878  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.357884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.357892  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357903  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.357911  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:45:25.357919  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:45:25.357925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357962  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.357980  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.357991  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.358000  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:45:25.358008  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:45:25.358015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358085  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.358095  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.358103  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.358109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358144  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358170  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:45:25.358177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358187  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.358195  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.358202  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.358208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.358215  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.358225  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:45:25.358235  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:45:25.358242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358258  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:45:25.358266  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358348  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:45:25.358356  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.358362  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.358368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.358391  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.358434  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.358453  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.358462  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.358474  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.358483  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.358497  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.358505  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.358517  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.358526  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.358537  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:45:25.358545  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.358560  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.358575  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.358588  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:45:25.358600  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:45:25.358607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358686  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.358700  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:45:25.358710  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:45:25.358720  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:45:25.358729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358800  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.358814  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.358826  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:45:25.358836  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:45:25.358844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.358951  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:45:25.359120  1 14 json_gui_to_db() created db_node
09-16 14:45:25.373097  1 14 json_gui_to_db() created db_json
09-16 14:45:25.373257  1 10 json_db_to_gui() begin
09-16 14:45:25.388045  1 10 json_db_to_gui() read dbAST
09-16 14:45:25.388109  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.388131  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.388139  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.388148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.388167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388193  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:25.388226  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:25.388234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388244  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:25.388253  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.388271  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.388279  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.388296  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.388317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.388356  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.388364  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.388428  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.388438  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.388445  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.388452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.388469  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388478  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:45:25.388488  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:45:25.388495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388533  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:45:25.388543  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.388551  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.388558  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.388570  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.388584  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.388600  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.388607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.388637  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.388646  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.388653  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.388659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.388676  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388684  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:45:25.388694  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:45:25.388700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388731  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:45:25.388741  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.388748  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.388755  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.388766  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.388779  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.388795  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.388802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.388853  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.388861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388878  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.388886  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388910  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:45:25.388920  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:45:25.388927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.388957  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:45:25.388967  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.388975  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.388982  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.388994  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.389007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389021  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.389028  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389057  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.389064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389079  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.389087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389099  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:45:25.389109  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:45:25.389116  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389145  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:45:25.389155  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.389162  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.389170  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.389181  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.389194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389207  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.389214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389241  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.389248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389263  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.389270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389282  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:25.389292  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:25.389299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389328  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:25.389338  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.389346  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.389352  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.389364  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.389376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389392  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.389404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389419  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389434  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.389441  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389456  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.389464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389475  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:45:25.389484  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:45:25.389491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389519  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:45:25.389529  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.389536  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.389543  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.389555  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.389568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389583  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.389590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389636  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.389644  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389660  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.389667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389679  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:45:25.389689  1 13 json_db_to_gui() child args name <use_art>
09-16 14:45:25.389696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389725  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:45:25.389736  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.389743  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.389750  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.389761  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.389773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389787  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.389793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389822  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.389829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389843  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.389851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389862  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:45:25.389873  1 13 json_db_to_gui() child args name <verbose>
09-16 14:45:25.389880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389908  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:45:25.389918  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.389925  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.389932  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.389944  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.389957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.389972  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.389979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.389994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.390009  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.390016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.390030  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.390038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.390053  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.390060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.390070  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:25.390079  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:25.390085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.390112  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:25.390121  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.390129  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.390136  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.390147  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.390161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.390176  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.390183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.390197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525022  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.525036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525059  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.525067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525081  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:45:25.525094  1 13 json_db_to_gui() child args name <metrics>
09-16 14:45:25.525101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525140  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:45:25.525151  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.525159  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.525167  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.525183  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.525197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525213  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.525220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525252  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.525259  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.525268  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.525274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.525294  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525302  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:45:25.525311  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:45:25.525318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525349  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:45:25.525358  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.525366  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.525373  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.525384  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.525412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525428  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.525443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525472  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.525480  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.525487  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.525494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.525510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525518  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:45:25.525528  1 13 json_db_to_gui() child args name <fileName>
09-16 14:45:25.525534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525565  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:45:25.525574  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.525581  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.525588  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.525599  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.525612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525628  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.525635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525674  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.525682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525696  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.525702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525713  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:45:25.525722  1 13 json_db_to_gui() child args name <level>
09-16 14:45:25.525728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525756  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:45:25.525767  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.525774  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.525781  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.525793  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.525806  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525821  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.525828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.525856  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.525863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525877  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.525885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525896  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:45:25.525906  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:45:25.525912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.525941  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:45:25.525950  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.525958  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.525965  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.525977  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.525990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526005  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.526011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526038  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.526046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526060  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.526068  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526080  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:45:25.526091  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:45:25.526098  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526135  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:45:25.526146  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.526161  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.526168  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.526179  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.526192  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526225  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.526233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526266  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.526282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526306  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.526313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526328  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.526344  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526365  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.526371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526384  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.526392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526409  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:45:25.526422  1 13 json_db_to_gui() child args name <outputs>
09-16 14:45:25.526430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526441  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:45:25.526450  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.526458  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.526466  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.526479  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.526493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526508  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.526515  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526546  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.526555  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.526563  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.526570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.526586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526595  1 11 json_db_to_gui() operator() switch OBJECT child name=<rootMPIOutput>
09-16 14:45:25.526605  1 13 json_db_to_gui() child args name <rootMPIOutput>
09-16 14:45:25.526612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526641  1 13 json_db_to_gui() metadata node was found, name=<rootMPIOutput>
09-16 14:45:25.526653  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.526660  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.526668  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.526681  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.526695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526709  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.526717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526748  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.526757  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.526765  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.526773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.526789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526799  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:45:25.526809  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:45:25.526817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526846  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:45:25.526857  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.526865  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.526873  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.526885  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.526899  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526914  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.526921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.526947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.526965  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.526974  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.526982  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.526989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.527018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527028  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:45:25.527038  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:45:25.527054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527093  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:45:25.527114  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.527121  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.527129  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.527142  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.527156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.527173  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.527180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.527229  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.527239  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.527248  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.527256  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.527283  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.527293  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.527311  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.527319  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.527332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.527345  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:45:25.527376  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.527398  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.527417  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.527428  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.527471  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:45:25.527483  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.527491  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.527498  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.527507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.527523  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.527531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527547  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.527555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527568  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.527578  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.527586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527615  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.527626  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.527634  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.527641  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.527654  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.527669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.527684  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.527693  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527708  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.527736  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.527745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527761  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.527770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527785  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.527794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527809  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.527817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527830  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:45:25.527841  1 13 json_db_to_gui() child args name <physics>
09-16 14:45:25.527848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527859  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:45:25.527868  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.527876  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.527883  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.527896  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.527910  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.527924  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.527932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.527948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.527964  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.527973  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.527981  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.527988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.528005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528015  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:45:25.528025  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:45:25.528032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528060  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:45:25.528071  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.528080  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.528087  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.528100  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.528114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.528130  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.528138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528154  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.528170  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.528179  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.528186  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.528194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.528211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528225  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.528233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528246  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:45:25.528257  1 13 json_db_to_gui() child args name <filters>
09-16 14:45:25.528264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528301  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:45:25.528313  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.528321  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.528329  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.528350  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.528365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.528381  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.528389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.528426  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.528434  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.528442  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.528450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.528467  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528476  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:45:25.528487  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:45:25.528495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528524  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:45:25.528536  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.528544  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.528552  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.528564  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.528577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.528594  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.528602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.528635  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.528644  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.528651  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.528659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.528676  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528685  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.528695  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.528702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528732  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.528743  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.528751  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.528759  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.528771  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.528785  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.528802  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.528810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.528841  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.528849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528865  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.528873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528886  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:45:25.528897  1 13 json_db_to_gui() child args name <nth>
09-16 14:45:25.528905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.528934  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:45:25.528945  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.528953  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.528960  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.528973  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.528987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529003  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.529011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529042  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.529050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529066  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.529074  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529090  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.529098  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529110  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:45:25.529121  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:45:25.529128  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529158  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:45:25.529169  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.529177  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.529185  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.529197  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.529211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529227  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.529235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529264  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.529272  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.529279  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.529287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.529315  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529325  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.529344  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.529351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529381  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.529392  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.529413  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.529421  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.529443  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.529458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529475  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.529483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529499  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529515  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.529523  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529538  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.529546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529560  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:45:25.529570  1 13 json_db_to_gui() child args name <nth>
09-16 14:45:25.529578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529608  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:45:25.529620  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.529627  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.529635  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.529647  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.529661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529677  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.529686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529718  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.529725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529741  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.529750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529765  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.529773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529787  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.529794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529807  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:45:25.529817  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:45:25.529825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529853  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:45:25.529864  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.529872  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.529880  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.529893  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.529907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529922  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.529930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.529946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.529962  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.529972  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.529980  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.529987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.530007  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530016  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.530024  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.530031  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.530052  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:45:25.530061  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530069  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.530077  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.530101  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.530109  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530122  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:45:25.530133  1 13 json_db_to_gui() child args name <p1>
09-16 14:45:25.530141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530169  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:45:25.530180  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530188  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.530195  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530208  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.530223  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.530238  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.530247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.530278  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530286  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.530294  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.530302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.530321  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530330  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.530338  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.530346  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.530370  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.530378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530391  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:45:25.530406  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:45:25.530414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530443  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:45:25.530454  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530462  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.530470  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530483  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.530497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.530513  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.530522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530536  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.530552  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530561  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.530569  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.530577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.530596  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530606  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.530614  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.530622  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.530643  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:45:25.530653  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530661  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.530668  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530677  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.530691  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.530700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530713  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:45:25.530725  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:45:25.530732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530760  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:45:25.530772  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530779  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.530787  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530799  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.530813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.530829  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.530838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.530853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.530869  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530879  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.530886  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.530893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.530913  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530923  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.530930  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.530938  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.530958  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:45:25.530969  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.530977  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.530984  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.530992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.531007  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.531016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531029  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:45:25.531039  1 13 json_db_to_gui() child args name <producers>
09-16 14:45:25.531047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531075  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:45:25.531087  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.531095  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.531102  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.531123  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.531138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.531154  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.531162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531195  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.531211  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.531229  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.531237  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.531244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.531261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531274  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.531282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531298  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.531306  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531318  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:45:25.531328  1 13 json_db_to_gui() child args name <process_name>
09-16 14:45:25.531336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531346  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:45:25.531355  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.531364  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.531371  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.531383  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.531401  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.531418  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.531426  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.531458  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.531466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531482  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.531490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531503  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:45:25.531514  1 13 json_db_to_gui() child args name <services>
09-16 14:45:25.531521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531531  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:45:25.531541  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.531549  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.531556  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.531568  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.531583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.531598  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.531607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.531638  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.531647  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.531655  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.531663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.531679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531689  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:45:25.531700  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:45:25.531707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531736  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:45:25.531747  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.531755  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.531763  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.531775  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.531790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.531805  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.531814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.531845  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.531854  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.531862  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.531870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.531887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531896  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:45:25.531906  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:45:25.531913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.531942  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:45:25.531953  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.531961  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.531969  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.531982  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.531996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532012  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.532021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532051  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.532059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532074  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.532083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532095  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:45:25.532106  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:45:25.532114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532143  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:45:25.532154  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.532162  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.532170  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.532182  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.532196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532212  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.532220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532252  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.532260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532276  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.532284  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532296  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:25.532305  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:25.532313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532342  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:25.532353  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.532361  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.532368  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.532381  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.532399  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532415  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.532424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532439  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532454  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.532463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532479  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.532488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532500  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:25.532511  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:25.532518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532547  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:25.532558  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.532566  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.532574  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.532586  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.532601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532617  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.532626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532641  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532658  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.532665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532681  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.532690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532702  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:45:25.532714  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:45:25.532721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532750  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:45:25.532761  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.532769  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.532777  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.532790  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.532803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532818  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.532827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.532858  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.532866  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532882  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.532891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532906  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.532914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532926  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:45:25.532937  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:45:25.532944  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.532971  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:45:25.532982  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.532990  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.532997  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.533010  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.533024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533040  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.533048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533079  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.533087  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.533095  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.533103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.533120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533129  1 11 json_db_to_gui() operator() switch OBJECT child name=<errorOnFailureToPut>
09-16 14:45:25.533139  1 13 json_db_to_gui() child args name <errorOnFailureToPut>
09-16 14:45:25.533146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533175  1 13 json_db_to_gui() metadata node was found, name=<errorOnFailureToPut>
09-16 14:45:25.533186  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.533195  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.533202  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.533214  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.533229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533245  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.533253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533269  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533285  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.533293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533309  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.533317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533331  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:45:25.533342  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:45:25.533349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533378  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:45:25.533389  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.533410  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.533419  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.533440  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.533455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533471  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.533478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533509  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.533518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533534  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.533542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533558  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.533565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533580  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.533589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533602  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:45:25.533612  1 13 json_db_to_gui() child args name <source>
09-16 14:45:25.533619  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533629  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:45:25.533638  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.533646  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.533654  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.533667  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.533681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533696  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.533705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533736  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.533745  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.533753  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.533760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.533777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533787  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type_map>
09-16 14:45:25.533798  1 13 json_db_to_gui() child args name <fragment_type_map>
09-16 14:45:25.533805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533833  1 13 json_db_to_gui() metadata node was found, name=<fragment_type_map>
09-16 14:45:25.533844  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.533852  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.533859  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.533871  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.533886  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533902  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.533910  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.533926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.533942  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.533951  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.533959  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:45:25.533966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.533985  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.533995  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:45:25.534002  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:45:25.534010  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534020  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.534030  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:25.534040  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534048  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.534055  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.534077  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:25.534088  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534096  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.534103  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.534125  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:25.534135  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534144  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.534151  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534160  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.534174  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:25.534184  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534192  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.534200  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.534222  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:25.534232  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534240  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.534248  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.534270  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:45:25.534280  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534288  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:45:25.534295  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:45:25.534320  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.534329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534342  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:45:25.534353  1 13 json_db_to_gui() child args name <module_type>
09-16 14:45:25.534361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534388  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:45:25.534413  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534423  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.534431  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534444  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.534459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.534475  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.534483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534499  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.534515  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.534532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534549  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.534557  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534570  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:45:25.534581  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:45:25.534589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534617  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:45:25.534627  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534635  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.534643  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534656  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.534680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.534696  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.534703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.534733  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.534742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534757  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.534766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534778  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:45:25.534788  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:45:25.534794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534823  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:45:25.534833  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.534840  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.534847  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.534861  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.534875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.534890  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.534898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.534931  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.534940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534957  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.534965  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.534982  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.534990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.535026  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:45:25.535049  1 10 json_db_to_gui() created gui_node
09-16 14:45:25.556632  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.31 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_001_t" end time: Sep 16 14:45 CDT
"RoundConvert_GUIJson2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

45/65 Testing: RoundConvert_Fhicl2DBJson_001_t
45/65 Test: RoundConvert_Fhicl2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/RoundConvert_Fhicl2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/test001.fcl" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.fcl" "-c" "test001.fcl" "-t" "RoundConvert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/RoundConvert_Fhicl2DBJson_001_t.d
"RoundConvert_Fhicl2DBJson_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.324328  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:45:25.324522  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:45:25.324546  1  0 artdaq::database::fhicljson trace_enable
09-16 14:45:25.324571  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:45:25.325930  1  2 fhicl_to_json: begin
09-16 14:45:25.326200  1  2 fhicl_to_json: Created root nodes
09-16 14:45:25.326300  1  2 read_comments begin
09-16 14:45:25.330833  1  2 read_comments end result=1
09-16 14:45:25.330844  1  2 read_data begin
09-16 14:45:25.330856  1  2 read_data() begin
09-16 14:45:25.369475  1  2 parse_document() returned 6 entries.
09-16 14:45:25.369675  1  2 fcl2jsondb() key=<services>
09-16 14:45:25.369764  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:45:25.369873  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.369932  1  2 fcl2jsondb() key=<scheduler>
09-16 14:45:25.369948  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:45:25.369973  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.370003  1  2 fcl2jsondb() key=<fileMode>
09-16 14:45:25.370011  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:45:25.370037  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.370133  1  2 fcl2jsondb() key=<user>
09-16 14:45:25.370162  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:45:25.370188  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.370222  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:45:25.370243  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:45:25.370269  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.370304  1  2 fcl2jsondb() key=<service_provider>
09-16 14:45:25.370312  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:45:25.370339  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.370373  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:45:25.370381  1  2 fcl2jsondb() value=<6>
09-16 14:45:25.370414  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.372527  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.372536  1  2 fcl2jsondb() value=<8>
09-16 14:45:25.372561  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.374155  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.374165  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:45:25.374189  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.375872  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:45:25.375880  1  2 fcl2jsondb() value=<1>
09-16 14:45:25.375975  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.378282  1  2 fcl2jsondb() key=<daq>
09-16 14:45:25.378331  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:45:25.378355  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.378387  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.378407  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:45:25.378433  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.380028  1  2 fcl2jsondb() key=<event_builder>
09-16 14:45:25.380051  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:45:25.380074  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.380102  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.380109  1  2 fcl2jsondb() value=<16>
09-16 14:45:25.380132  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.381713  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:45:25.381722  1  2 fcl2jsondb() value=<0>
09-16 14:45:25.381746  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.383332  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:45:25.383341  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.383366  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.384956  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:45:25.384965  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.384991  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.386651  1  2 fcl2jsondb() key=<use_art>
09-16 14:45:25.386660  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.386684  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.386754  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:45:25.386761  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.386785  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.386817  1  2 fcl2jsondb() key=<verbose>
09-16 14:45:25.386824  1  2 fcl2jsondb() value=<false>
09-16 14:45:25.386850  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.386930  1  2 fcl2jsondb() key=<metrics>
09-16 14:45:25.386958  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:45:25.386983  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.387015  1  2 fcl2jsondb() key=<evbFile>
09-16 14:45:25.387034  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:45:25.387058  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.387086  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:45:25.387094  1  2 fcl2jsondb() value=<"file">
09-16 14:45:25.387119  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.387152  1  2 fcl2jsondb() key=<level>
09-16 14:45:25.387160  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.387186  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.388976  1  2 fcl2jsondb() key=<fileName>
09-16 14:45:25.388985  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:45:25.389096  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.389131  1  2 fcl2jsondb() key=<uniquify>
09-16 14:45:25.389139  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.389166  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.389335  1  2 fcl2jsondb() key=<outputs>
09-16 14:45:25.389398  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:45:25.389426  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.389461  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:45:25.389490  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:45:25.389514  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.389546  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.389554  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:45:25.389580  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.389615  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:45:25.389637  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:45:25.389759  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.389793  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:45:25.389806  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:45:25.389934  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.390119  1  2 fcl2jsondb() key=<physics>
09-16 14:45:25.390174  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:45:25.390201  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.390243  1  2 fcl2jsondb() key=<filters>
09-16 14:45:25.390271  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:45:25.390298  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.390330  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:45:25.390346  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:45:25.390466  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.390497  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.390505  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:45:25.390632  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.390667  1  2 fcl2jsondb() key=<nth>
09-16 14:45:25.390675  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.390801  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.392670  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:45:25.392688  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:45:25.392714  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.392743  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.392750  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:45:25.392776  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.392808  1  2 fcl2jsondb() key=<nth>
09-16 14:45:25.392816  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.392946  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.394760  1  2 fcl2jsondb() key=<pmod2>
09-16 14:45:25.394774  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:45:25.394799  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.394845  1  2 fcl2jsondb() key=<pmod3>
09-16 14:45:25.394857  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:45:25.394980  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.395032  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:45:25.395046  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:45:25.395073  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.395178  1  2 fcl2jsondb() key=<source>
09-16 14:45:25.395196  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:45:25.395221  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.395248  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.395256  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:45:25.395380  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.395419  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:45:25.395427  1  2 fcl2jsondb() value=<900>
09-16 14:45:25.395553  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.397428  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:45:25.397438  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.397568  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.397624  1  2 fcl2jsondb() key=<process_name>
09-16 14:45:25.397632  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:45:25.397658  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.397682  1  2 read_data() end
09-16 14:45:25.397717  1  2 read_data end result=1
09-16 14:45:25.397724  1  2 fhicl_to_json: write() begin
09-16 14:45:25.416740  1  2 fhicl_to_json: write() end
09-16 14:45:25.416752  1  2 fhicl_to_json: end
09-16 14:45:25.416850  1  3 json_to_fhicl: begin
09-16 14:45:25.416857  1  3 json_to_fhicl: Reading json root nodes
09-16 14:45:25.441155  1  2 write_data() begin
09-16 14:45:25.441276  1  2 json2fcldb() key=<services> type=<table>
09-16 14:45:25.441388  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:45:25.441411  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:45:25.441589  1  2 json2fcldb() key=<user> type=<table>
09-16 14:45:25.441607  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:45:25.441623  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:45:25.441643  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:45:25.441699  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:45:25.441722  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:45:25.441743  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:45:25.441813  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:45:25.441830  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:45:25.441853  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:45:25.441870  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:45:25.441891  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:45:25.441911  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:45:25.441931  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:45:25.441952  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:45:25.442001  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:45:25.442022  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:45:25.442058  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:45:25.442075  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:45:25.442091  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:45:25.442112  1  2 json2fcldb() key=<level> type=<number>
09-16 14:45:25.442134  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:45:25.442169  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:45:25.442242  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:45:25.442257  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:45:25.442271  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.442289  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:45:25.442303  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:45:25.442541  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:45:25.442559  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:45:25.442574  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:45:25.442587  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.442605  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:45:25.442643  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:45:25.442658  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.442677  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:45:25.442733  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:45:25.442766  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:45:25.442797  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:45:25.442863  1  2 json2fcldb() key=<source> type=<table>
09-16 14:45:25.442880  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.442900  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:45:25.442922  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:45:25.442953  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:45:25.448565  1  2 write_data() end
09-16 14:45:25.448574  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:45:25.448580  1  3 json_to_fhicl: end
Running test:<RoundConvert_Fhicl2DBJson>
fhicl_to_json succeeded.
json_to_fhicl succeeded.
<end of output>
Test time =   0.31 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_Fhicl2DBJson_001_t" end time: Sep 16 14:45 CDT
"RoundConvert_Fhicl2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

43/65 Testing: Convert_Fhicl2DBJson_001_t
43/65 Test: Convert_Fhicl2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/Convert_Fhicl2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/test001.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/test001.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.fcl" "-c" "test001.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/Convert_Fhicl2DBJson_001_t.d
"Convert_Fhicl2DBJson_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.315636  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:45:25.315748  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:45:25.315775  1  0 artdaq::database::fhicljson trace_enable
09-16 14:45:25.315800  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:45:25.317498  1  2 fhicl_to_json: begin
09-16 14:45:25.317821  1  2 fhicl_to_json: Created root nodes
09-16 14:45:25.317928  1  2 read_comments begin
09-16 14:45:25.326646  1  2 read_comments end result=1
09-16 14:45:25.326662  1  2 read_data begin
09-16 14:45:25.326676  1  2 read_data() begin
09-16 14:45:25.365518  1  2 parse_document() returned 6 entries.
09-16 14:45:25.365668  1  2 fcl2jsondb() key=<services>
09-16 14:45:25.365733  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:45:25.365821  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.365862  1  2 fcl2jsondb() key=<scheduler>
09-16 14:45:25.365872  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:45:25.365886  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.365902  1  2 fcl2jsondb() key=<fileMode>
09-16 14:45:25.365906  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:45:25.365919  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.365986  1  2 fcl2jsondb() key=<user>
09-16 14:45:25.366001  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:45:25.366015  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.366033  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:45:25.366044  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:45:25.366056  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.366072  1  2 fcl2jsondb() key=<service_provider>
09-16 14:45:25.366077  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:45:25.366089  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.366108  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:45:25.366112  1  2 fcl2jsondb() value=<6>
09-16 14:45:25.366125  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.367023  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.367030  1  2 fcl2jsondb() value=<8>
09-16 14:45:25.367047  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.367797  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.367804  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:45:25.367819  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.368656  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:45:25.368662  1  2 fcl2jsondb() value=<1>
09-16 14:45:25.368730  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.369544  1  2 fcl2jsondb() key=<daq>
09-16 14:45:25.369572  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:45:25.369588  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.369609  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.369613  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:45:25.369626  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.370398  1  2 fcl2jsondb() key=<event_builder>
09-16 14:45:25.370418  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:45:25.370435  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.370454  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.370459  1  2 fcl2jsondb() value=<16>
09-16 14:45:25.370473  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.371215  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:45:25.371221  1  2 fcl2jsondb() value=<0>
09-16 14:45:25.371237  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.372003  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:45:25.372010  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.372025  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.372783  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:45:25.372789  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.372805  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.373551  1  2 fcl2jsondb() key=<use_art>
09-16 14:45:25.373557  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.373572  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.373627  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:45:25.373632  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.373646  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.373667  1  2 fcl2jsondb() key=<verbose>
09-16 14:45:25.373671  1  2 fcl2jsondb() value=<false>
09-16 14:45:25.373684  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.373724  1  2 fcl2jsondb() key=<metrics>
09-16 14:45:25.373739  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:45:25.373752  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.373769  1  2 fcl2jsondb() key=<evbFile>
09-16 14:45:25.373779  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:45:25.373791  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.373807  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:45:25.373811  1  2 fcl2jsondb() value=<"file">
09-16 14:45:25.373823  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.373842  1  2 fcl2jsondb() key=<level>
09-16 14:45:25.373846  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.373859  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.374619  1  2 fcl2jsondb() key=<fileName>
09-16 14:45:25.374626  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:45:25.374694  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.374718  1  2 fcl2jsondb() key=<uniquify>
09-16 14:45:25.374722  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.374785  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.374876  1  2 fcl2jsondb() key=<outputs>
09-16 14:45:25.374914  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:45:25.374929  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.374950  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:45:25.374965  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:45:25.374978  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.374995  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.374999  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:45:25.375012  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.375033  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:45:25.375044  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:45:25.375119  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.375141  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:45:25.375149  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:45:25.375222  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.375335  1  2 fcl2jsondb() key=<physics>
09-16 14:45:25.375364  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:45:25.375379  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.375411  1  2 fcl2jsondb() key=<filters>
09-16 14:45:25.375438  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:45:25.375454  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.375473  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:45:25.375482  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:45:25.375554  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.375574  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.375579  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:45:25.375652  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.375675  1  2 fcl2jsondb() key=<nth>
09-16 14:45:25.375680  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.375754  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.376506  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:45:25.376518  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:45:25.376532  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.376548  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.376553  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:45:25.376566  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.376584  1  2 fcl2jsondb() key=<nth>
09-16 14:45:25.376588  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.376663  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.377456  1  2 fcl2jsondb() key=<pmod2>
09-16 14:45:25.377465  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:45:25.377543  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.377578  1  2 fcl2jsondb() key=<pmod3>
09-16 14:45:25.377586  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:45:25.377660  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.377694  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:45:25.377702  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:45:25.377717  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.377772  1  2 fcl2jsondb() key=<source>
09-16 14:45:25.377783  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:45:25.377796  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.377812  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.377816  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:45:25.377889  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.377912  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:45:25.377916  1  2 fcl2jsondb() value=<900>
09-16 14:45:25.377989  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.378757  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:45:25.378763  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.378893  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.378928  1  2 fcl2jsondb() key=<process_name>
09-16 14:45:25.378933  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:45:25.378947  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.378961  1  2 read_data() end
09-16 14:45:25.378984  1  2 read_data end result=1
09-16 14:45:25.378988  1  2 fhicl_to_json: write() begin
09-16 14:45:25.390782  1  2 fhicl_to_json: write() end
09-16 14:45:25.390792  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.31 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_001_t" end time: Sep 16 14:45 CDT
"Convert_Fhicl2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

39/65 Testing: RoundConvert_DBJson2GUIJson_003_t
39/65 Test: RoundConvert_DBJson2GUIJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_003_t.d
"RoundConvert_DBJson2GUIJson_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:24.989994  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:24.994510  1 10 json_db_to_gui() begin
09-16 14:45:25.024305  1 10 json_db_to_gui() read dbAST
09-16 14:45:25.024516  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.024590  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.024658  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.024759  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.024902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.024961  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:45:25.025020  1 13 json_db_to_gui() child args name <prolog>
09-16 14:45:25.025030  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.025112  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:45:25.025125  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.025149  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.025162  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.025282  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.025393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.025495  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.025506  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.025558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.025669  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.025680  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.025688  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.025695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.025714  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.025723  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:45:25.025733  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:45:25.025740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026079  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:45:25.026092  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.026099  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.026106  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.026119  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.026133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.026147  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.026153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.026229  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.026238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026256  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.026263  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026312  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:45:25.026324  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:45:25.026331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026362  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:45:25.026373  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.026380  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.026387  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.026407  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.026422  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.026438  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.026446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.026478  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.026486  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.026494  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.026501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.026522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026531  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:45:25.026541  1 13 json_db_to_gui() child args name <metrics>
09-16 14:45:25.026547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026577  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:45:25.026586  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.026593  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.026599  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.026611  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.026625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.026641  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.026648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.026677  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.026685  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026700  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.026707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026719  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:25.026729  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:25.026735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026764  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:25.026774  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.026781  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.026788  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.026799  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.026811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.026826  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.026833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.026882  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.026890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026905  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.026912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026924  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:45:25.026933  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:45:25.026940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.026969  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:45:25.026979  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.026986  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.026992  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.027005  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.027017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027031  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.027038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027069  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.027077  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.027084  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.027090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.027107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027115  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:25.027125  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:25.027131  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027161  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:25.027171  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.027178  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.027185  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.027196  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.027209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027223  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.027229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027255  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.027262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027278  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.027285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027297  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:45:25.027306  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:45:25.027313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027343  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:45:25.027355  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.027362  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.027369  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.027382  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.027400  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027420  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.027427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027459  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.027466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027482  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.027490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027502  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:45:25.027512  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:45:25.027519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027551  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:45:25.027562  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.027571  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.027578  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.027590  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.027605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027620  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.027628  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027658  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.027665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027679  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.027686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027699  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:45:25.027710  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:45:25.027717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027747  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:45:25.027758  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.027766  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.027773  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.027785  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.027799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027814  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.027822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.027851  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.027857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027872  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.027879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027891  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:45:25.027900  1 13 json_db_to_gui() child args name <generator>
09-16 14:45:25.027907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.027937  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:45:25.027948  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.027955  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.027962  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.027974  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.027988  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028004  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.028011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028043  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.028050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028065  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.028072  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028084  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:45:25.028093  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:45:25.028099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028129  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:45:25.028141  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.028149  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.028156  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.028168  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.028181  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028197  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.028204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028234  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.028242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028258  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.028265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028277  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:45:25.028287  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:45:25.028293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028323  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:45:25.028331  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.028339  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.028345  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.028358  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.028372  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028387  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.028403  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028436  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.028443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028459  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.028466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028477  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:45:25.028487  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:45:25.028493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028523  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:45:25.028533  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.028541  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.028548  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.028560  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.028573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028587  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.028595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028624  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.028632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028646  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.028652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028664  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:45:25.028674  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:45:25.028680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028710  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:45:25.028720  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.028727  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.028733  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.028745  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.028758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028772  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.028779  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028810  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.028818  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.028827  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.028834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.028853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028861  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:45:25.028870  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:45:25.028877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028908  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:45:25.028917  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.028924  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.028931  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.028942  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.028954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.028970  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.028977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.028992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029006  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.029013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029028  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.029035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029047  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:45:25.029057  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:45:25.029064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029094  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:45:25.029104  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.029111  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.029118  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.029129  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.029142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029155  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.029161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029190  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.029197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029212  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.029219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029231  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:45:25.029240  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:45:25.029247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029278  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:45:25.029288  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.029296  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.029303  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.029314  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.029327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029342  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.029348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029375  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.029381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029394  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.029404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029417  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:45:25.029427  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:45:25.029434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029464  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:45:25.029474  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.029482  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.029489  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.029500  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.029513  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029528  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.029535  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029564  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.029570  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029584  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.029591  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029604  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:45:25.029614  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:45:25.029621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029651  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:45:25.029662  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.029669  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.029676  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.029687  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.029700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029715  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.029723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029736  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029751  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.029757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029771  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.029777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029788  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:45:25.029796  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:45:25.029804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029835  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:45:25.029845  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.029852  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.029859  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.029870  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.029884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029899  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.029906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.029935  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.029942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029957  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.029964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.029986  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.029993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030003  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:45:25.030012  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:45:25.030018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030049  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:45:25.030059  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.030066  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.030073  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.030084  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.030097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030112  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.030119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030134  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030150  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.030157  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.030164  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.030171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030194  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:45:25.030202  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:45:25.030208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030239  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:45:25.030249  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.030256  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.030263  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.030274  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.030288  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030303  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.030310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030339  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.030346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030361  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.030373  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030385  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:45:25.030397  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:45:25.030405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030436  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:45:25.030445  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.030451  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.030457  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.030469  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.030483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030498  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.030505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030535  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.030543  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.030550  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.030557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.030573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030581  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:45:25.030590  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:45:25.030597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030628  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:45:25.030638  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.030645  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.030652  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.030664  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.030678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030693  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.030700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030714  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030729  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.030736  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030751  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.030758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030769  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:45:25.030779  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:45:25.030786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030817  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:45:25.030826  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.030833  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.030840  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.030851  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.030863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030878  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.030885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.030913  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.030920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030936  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.030943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.030955  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:45:25.030964  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:45:25.030971  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031001  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:45:25.031011  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.031019  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.031026  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031037  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.031050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031063  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.031069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031098  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.031105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031119  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.031126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031141  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.031147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031159  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:45:25.031168  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:45:25.031175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031205  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:45:25.031215  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.031222  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.031229  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031241  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.031253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031267  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.031273  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031286  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031301  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.031307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031322  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.031329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031341  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:45:25.031350  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:45:25.031357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031388  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:45:25.031402  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.031410  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.031417  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031428  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.031441  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031456  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.031463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031493  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.031500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031514  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.031520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031531  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:45:25.031539  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:45:25.031546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031576  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:45:25.031586  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.031594  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.031601  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031612  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.031625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031640  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.031647  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031675  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.031682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031697  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.031704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031715  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:45:25.031725  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:45:25.031731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031762  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:45:25.031772  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.031780  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.031787  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031798  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.031811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031826  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.031833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.031863  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.031870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031885  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.031892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031904  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:45:25.031913  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:45:25.031920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.031950  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:45:25.031959  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.031966  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.031973  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.031985  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.031998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032012  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.032020  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032049  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.032056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032071  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.032077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032090  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:45:25.032099  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:45:25.032106  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032136  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:45:25.032146  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.032153  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.032159  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.032171  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.032184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032199  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.032207  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032235  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.032242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032257  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.032265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032276  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:45:25.032286  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:45:25.032292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032322  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:45:25.032333  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.032339  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.032346  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.032357  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.032370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032383  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.032390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032426  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.032433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032448  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.032454  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032466  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:45:25.032476  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:45:25.032482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032513  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:45:25.032523  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.032531  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.032537  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.032549  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.032562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032577  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.032583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032596  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032610  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.032617  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032631  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.032638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032650  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:45:25.032659  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:45:25.032666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032697  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:45:25.032707  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.032715  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.032722  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.032733  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.032746  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032761  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.032768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032782  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032796  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.032802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032817  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.032824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032836  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:45:25.032845  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:45:25.032852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032883  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:45:25.032893  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.032900  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.032907  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.032919  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.032932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032947  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.032954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.032968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.032981  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.032988  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033000  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.033007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033018  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:45:25.033027  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:45:25.033034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033064  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:45:25.033074  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.033081  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.033088  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.033100  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.033114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033128  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.033135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033164  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.033171  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033185  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.033192  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033203  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:45:25.033211  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:45:25.033217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033248  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:45:25.033258  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.033265  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.033272  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.033284  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.033297  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033312  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.033319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033334  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033348  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.033355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033370  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.033377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033389  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:45:25.033402  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:45:25.033410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033441  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:45:25.033450  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.033457  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.033464  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.033476  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.033489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033505  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.033511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033525  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033540  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.033547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033561  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.033568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033580  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:45:25.033590  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:45:25.033596  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033627  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:45:25.033636  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.033643  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.033650  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.033662  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.033674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033689  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.033696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033725  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.033732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033746  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.033753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033765  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:45:25.033775  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:45:25.033781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033812  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:45:25.033822  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.033829  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.033835  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.033845  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.033858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033871  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.033878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.033907  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.033912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033926  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.033932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033943  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:45:25.033951  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:45:25.033957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.033985  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:45:25.033994  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.034000  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.034006  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.034016  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.034029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.034042  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.034047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.034074  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.034080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034094  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.034100  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034110  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:45:25.034119  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:45:25.034125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034152  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:45:25.034161  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.034168  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.034176  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.034187  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.034200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.034213  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.034220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.034247  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.034254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034268  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.034274  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034286  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:45:25.034294  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:45:25.034300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034331  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:45:25.034341  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.034347  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.034354  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.034365  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.034377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.034391  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.034402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.034439  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.034445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034459  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.034466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034478  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:45:25.034486  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:45:25.034492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034525  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:45:25.034535  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.034541  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.034548  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.034560  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.034572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.034585  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.034592  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.034618  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.034625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034638  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.034644  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034655  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:45:25.034664  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:45:25.034670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.034701  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:45:25.034711  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.187328  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.187352  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.187381  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.187425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.187453  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.187460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.187493  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.187498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187509  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.187515  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187529  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:45:25.187541  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:45:25.187547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187601  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:45:25.187611  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.187617  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.187623  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.187633  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.187644  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.187656  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.187662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.187684  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.187689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187701  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.187706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187715  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:45:25.187722  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:45:25.187727  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187755  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:45:25.187764  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.187769  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.187775  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.187785  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.187796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.187808  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.187814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.187835  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.187841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187853  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.187859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187868  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:45:25.187875  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:45:25.187880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187909  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:45:25.187917  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.187923  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.187929  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.187939  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.187950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.187963  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.187969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.187981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.187993  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.187999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188013  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.188019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188029  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:45:25.188037  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:45:25.188043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188071  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:45:25.188079  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.188085  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.188091  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.188101  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.188113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188125  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.188132  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188156  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.188163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188176  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.188182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188193  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:45:25.188200  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:45:25.188206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188235  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:45:25.188245  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.188251  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.188257  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.188268  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.188279  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188291  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.188298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188324  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.188330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188343  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.188349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188359  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:45:25.188367  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:45:25.188376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188420  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:45:25.188431  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.188437  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.188452  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.188463  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.188474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188489  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.188496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188525  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.188532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188545  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.188551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188562  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:45:25.188569  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:45:25.188575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188603  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:45:25.188613  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.188620  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.188626  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.188638  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.188650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188666  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.188673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188684  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188695  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.188701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188711  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.188717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188726  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:45:25.188736  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:45:25.188741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188767  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:45:25.188777  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.188784  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.188790  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.188803  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.188821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188834  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.188842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188855  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.188869  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.188876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188889  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.188896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188908  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:45:25.188916  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:45:25.188923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.188950  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:45:25.188959  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.188965  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.188974  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.188987  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.188998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189011  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.189018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189030  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189043  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.189049  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189062  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.189068  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189079  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:45:25.189087  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:45:25.189094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189120  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:45:25.189129  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.189135  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.189142  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.189154  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.189166  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189178  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.189185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189211  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.189217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189231  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.189237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189254  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:45:25.189262  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:45:25.189268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189296  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:45:25.189306  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.189312  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.189319  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.189330  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.189342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189354  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.189361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189387  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.189393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189416  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.189423  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189434  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:45:25.189442  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:45:25.189448  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189479  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:45:25.189488  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.189494  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.189501  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.189512  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.189524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189537  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.189543  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189556  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189569  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.189576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189589  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.189595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189605  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:45:25.189614  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:45:25.189621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189648  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:45:25.189656  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.189662  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.189669  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.189680  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.189691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189703  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.189710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189722  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189734  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.189742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189754  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.189762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189772  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:45:25.189782  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:45:25.189788  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189815  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:45:25.189824  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.189832  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.189838  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.189849  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.189860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189873  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.189879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.189903  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.189909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189923  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.189929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189939  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:45:25.189947  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:45:25.189957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.189995  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:45:25.190005  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.190011  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.190017  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.190028  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.190040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190053  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.190059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190072  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190084  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.190091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190103  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.190109  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190120  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:45:25.190128  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:45:25.190133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190162  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:45:25.190172  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.190178  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.190185  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.190196  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.190208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190222  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.190228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190240  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190253  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.190259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190272  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.190278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190287  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:45:25.190298  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:45:25.190304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190331  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:45:25.190341  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.190347  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.190354  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.190364  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.190376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190388  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.190399  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190426  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.190433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190450  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.190457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190467  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:45:25.190476  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:45:25.190484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190514  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:45:25.190522  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.190528  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.190535  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.190546  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.190557  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190569  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.190577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190601  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.190610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190622  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.190628  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190643  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.190649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190663  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.190669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190683  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.190689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190700  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:25.190709  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:25.190715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190741  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:25.190750  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.190756  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.190763  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.190774  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.190787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190800  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.190808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190834  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.190840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190852  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.190858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190868  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:45:25.190876  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:45:25.190882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.190905  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:45:25.190913  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.190921  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.190927  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.190937  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.190949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.190978  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.190996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191024  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.191032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191044  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.191051  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191061  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:45:25.191069  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:45:25.191076  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191100  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:45:25.191109  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.191115  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.191121  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.191132  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.191145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191158  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.191165  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191192  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.191198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191209  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.191216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191227  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:45:25.191235  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:45:25.191241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191265  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:45:25.191276  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.191282  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.191290  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.191301  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.191314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191326  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.191333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191360  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.191366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191419  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:45:25.191433  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.191440  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191452  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:45:25.191460  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:45:25.191467  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191491  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:45:25.191500  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.191506  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.191513  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.191525  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.191537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191550  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.191556  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191581  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.191588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191600  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.191607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191617  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.191628  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.191634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191656  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.191665  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.191672  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.191679  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.191689  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.191701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191714  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.191720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191743  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.191750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191763  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.191772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191781  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.191790  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.191797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191821  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.191829  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.191835  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.191842  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.191852  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.191863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191876  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.191882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.191907  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.191913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191926  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.191932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191944  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.191953  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.191960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.191988  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.191998  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.192005  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.192012  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.192024  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.192036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192050  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.192057  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192084  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.192091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192103  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.192110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192122  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.192132  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.192139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192166  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.192177  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.192184  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.192190  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.192202  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.192215  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192230  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.192239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192273  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.192281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192296  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.192303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192315  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:45:25.192327  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:45:25.192335  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192369  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:45:25.192381  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.192388  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.192400  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.192413  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.192427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192444  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.192452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192471  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192487  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.192504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192519  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.192527  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192539  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.192551  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.192558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192585  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.192595  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.192605  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.192612  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.192625  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.192637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192651  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.192658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192688  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.192695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192710  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.192719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192731  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.192740  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.192746  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192771  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.192784  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.192792  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.192799  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.192811  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.192823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192836  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.192843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192855  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.192871  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.192878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192893  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.192900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192911  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.192922  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.192933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.192958  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.192967  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.192974  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.192982  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.192992  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.193006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193021  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.193029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193055  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.193061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193074  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.193083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193096  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.193114  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.193120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193143  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.193155  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.193163  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.193169  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.193181  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.193192  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193206  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.193212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193227  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193240  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.193247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193259  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.193265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193275  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:45:25.193283  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:45:25.193289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193312  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:45:25.193320  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.193325  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.193332  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.193341  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.193352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193366  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.193381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193397  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193413  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.193429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193443  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.193449  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193459  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.193467  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.193472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193495  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.193503  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.193510  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.193516  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.193528  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.193540  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193552  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.193558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193570  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193582  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.193589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193604  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.193610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193621  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.193631  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.193637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193661  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.193669  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.193675  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.193681  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.193692  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.193707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193720  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.193726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193738  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193750  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.193756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193769  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.193775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193784  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.193793  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.193799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193822  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.193830  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.193836  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.193842  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.193852  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.193863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193876  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.193882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.193907  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.193913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193925  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.193932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193942  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.193953  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.193959  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.193984  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.193993  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.194000  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.194006  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.194017  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.194030  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194043  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.194050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194076  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.194082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194094  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.194100  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194110  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:45:25.194117  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:45:25.194123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194147  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:45:25.194156  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.194162  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.194169  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.194179  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.194190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194203  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.194209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194234  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.194240  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194251  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.194258  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194269  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.194278  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.194284  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194307  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.194319  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.194325  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.194331  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.194342  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.194356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194368  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.194375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194388  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194415  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.194423  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194435  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.194450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194461  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.194470  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.194477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194505  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.194523  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.194529  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.194536  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.194555  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.194567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194588  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.194594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194637  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.194644  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194665  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.194671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194681  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.194690  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.194696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194719  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.194727  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.194734  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.194741  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.194752  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.194765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194778  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.194785  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194809  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.194816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194828  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.194835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194845  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.194854  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.194860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194883  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.194893  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.194899  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.194906  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.194918  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.194929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194943  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.194949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.194973  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.194980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.194995  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.195002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195013  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:45:25.195022  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:45:25.195027  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195051  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:45:25.195060  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.195075  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.195081  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.195092  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.195104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195117  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.195123  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195148  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.195154  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195184  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.195191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195201  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.195210  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.195216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195240  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.195249  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.195255  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.195262  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.195274  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.195286  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195300  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.195306  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195333  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.195339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195353  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.195360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195371  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.195379  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.195385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195415  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.195425  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.195431  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.195439  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.195450  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.195461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195475  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.195482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195508  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.195514  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195527  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.195534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195547  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.195556  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.195565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195590  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.195598  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.195605  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.195613  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.195624  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.195637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195650  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.195656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195682  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.195688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195699  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.195706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195716  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.195725  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.195732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195756  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.195765  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.195772  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.195779  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.195789  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.195801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195814  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.195821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195849  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.195855  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195868  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.195875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195885  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:45:25.195894  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:45:25.195900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.195925  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:45:25.195934  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.195941  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.195948  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.195958  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.195969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.195982  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.195990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196015  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.196022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196035  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.196041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196052  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.196061  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.196067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196092  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.196101  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.196107  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.196114  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.196125  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.196137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196150  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.196157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196183  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.196191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196204  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.196211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196222  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.196230  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.196237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196262  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.196271  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.196277  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.196284  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.196295  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.196308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196321  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.196327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196357  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.196363  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196376  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.196383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196394  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.196408  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.196415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196442  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.196451  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.196458  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.196464  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.196475  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.196488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196502  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.196509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196534  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.196541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196553  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.196559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196570  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.196579  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.196585  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196609  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.196618  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.196624  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.196632  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.196642  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.196653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196666  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.196673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196698  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.196705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196718  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.196725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196735  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:45:25.196743  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:45:25.196748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196773  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:45:25.196783  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.196789  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.196796  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.196807  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.196819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196832  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.196839  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.196871  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.196880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196899  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.196908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196924  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.196938  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.196945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.196977  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.196993  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.197004  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.197012  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.197025  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.197037  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197050  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.197057  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197083  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.197090  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197103  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.197110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197121  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.197130  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.197136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197164  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.197174  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.197180  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.197186  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.197198  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.197211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197225  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.197232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197259  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.197266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197280  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.197287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197298  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.197307  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.197313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197340  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.197349  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.197356  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.197362  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.197374  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.197387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197407  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.197415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197428  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197443  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.197450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197464  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.197471  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197483  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.197492  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.197498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197526  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.197536  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.197544  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.197550  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.197563  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.197575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197589  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.197597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197624  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.197631  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197644  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.197652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197663  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:45:25.197672  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:45:25.197679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197705  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:45:25.197715  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.197722  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.197729  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.197741  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.197753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197766  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.197773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197803  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.197810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197824  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.197831  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197842  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.197851  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.197858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197884  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.197893  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.197900  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.197907  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.197917  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.197930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197943  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.197950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.197962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.197976  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.197987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198003  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.198010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198020  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.198028  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.198034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198060  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.198068  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.198074  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.198081  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.198092  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.198103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.198116  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.198122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198134  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.198147  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.198153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198165  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.198171  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198182  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.198191  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.198197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198222  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.198230  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.198237  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.198243  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.198256  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.198267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.198280  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.198287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.198314  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.198320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198334  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.198342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198353  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.198361  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.198367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198393  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.198408  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.198415  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.198423  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.198434  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.198446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.198459  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.198466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.198491  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.198498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198512  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.198519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198534  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.198541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198553  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:45:25.198562  1 13 json_db_to_gui() child args name <main>
09-16 14:45:25.198568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198577  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:45:25.198585  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.198593  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.198599  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.198611  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.198623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.198636  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.198642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198655  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.198673  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.198689  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.198697  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.198703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.198723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198734  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.198740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.198823  1 10 json_db_to_gui() created gui_node
09-16 14:45:25.234016  1 10 json_db_to_gui() created gui_json
09-16 14:45:25.234168  1 14 json_gui_to_db() begin
09-16 14:45:25.267233  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.267270  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.267298  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.267312  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.267318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.267348  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267364  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.267371  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:45:25.267376  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267407  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267424  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:45:25.267429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267436  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.267442  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.267446  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.267451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.267455  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267463  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.267482  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:45:25.267488  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:45:25.267493  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267528  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267535  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.267539  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.267543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267582  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.267587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267594  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.267599  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.267603  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.267607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.267611  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267617  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.267624  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:45:25.267629  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.267634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267643  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267651  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267666  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267672  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267679  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.267706  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:45:25.267712  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.267717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267742  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267755  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267762  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.267768  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:25.267772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267796  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267812  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:25.267817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267823  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.267829  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.267833  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.267837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.267841  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267849  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.267855  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:25.267861  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.267865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267904  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267911  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.267917  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:45:25.267923  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:45:25.267927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267964  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.267971  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.267977  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:45:25.267983  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:45:25.267987  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.267995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268024  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268031  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268037  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:45:25.268043  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:45:25.268048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268084  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268091  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.268097  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:45:25.268103  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:45:25.268107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268144  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268151  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.268157  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:45:25.268162  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:45:25.268167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268174  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268197  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268203  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268210  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268216  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:45:25.268222  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:45:25.268227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268243  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268263  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268270  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268277  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:45:25.268282  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:45:25.268286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268323  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268330  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.268336  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:45:25.268340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268356  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268379  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:45:25.268384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268390  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.268399  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.268403  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.268407  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.268412  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268419  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268426  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:45:25.268431  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:45:25.268436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268475  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268482  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268488  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:45:25.268493  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:45:25.268498  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268535  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268542  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268548  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:45:25.268554  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:45:25.268558  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268595  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268602  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268608  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:45:25.268613  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:45:25.268618  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268655  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268662  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268668  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:45:25.268673  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:45:25.268677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268701  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268714  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268721  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268727  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:45:25.268732  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:45:25.268737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268776  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268783  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.268789  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:45:25.268793  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268833  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:45:25.268838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268844  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.268850  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.268854  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.268858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.268862  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268869  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.268876  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:45:25.268881  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:45:25.268886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268924  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.268931  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.268937  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:45:25.268941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268973  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268981  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:45:25.268985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.268992  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.268997  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.269001  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.269005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.269010  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269017  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269023  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:45:25.269028  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:45:25.269033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269065  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269071  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269078  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269084  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:45:25.269090  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:45:25.269094  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269111  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269131  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269139  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269145  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:45:25.269150  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:45:25.269155  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269185  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269192  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269199  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269205  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:45:25.269211  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:45:25.269216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269246  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269252  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269259  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269265  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:45:25.269271  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:45:25.269275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269312  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269319  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269325  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:45:25.269330  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:45:25.269335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269342  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269371  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269378  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269384  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:45:25.269390  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:45:25.269397  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269423  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269435  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269442  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269449  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:45:25.269454  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:45:25.269459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269466  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269495  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269502  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269508  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:45:25.269513  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:45:25.269518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269542  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269555  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269562  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269568  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:45:25.269573  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:45:25.269578  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269614  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269621  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269627  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:45:25.269632  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:45:25.269637  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269673  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269680  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269686  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:45:25.269692  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:45:25.269696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269733  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269740  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269746  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:45:25.269751  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:45:25.269756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269764  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269793  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269799  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269805  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:45:25.269810  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:45:25.269814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269822  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269852  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269859  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269865  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:45:25.269870  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:45:25.269875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269882  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269911  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269918  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269925  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:45:25.269930  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:45:25.269934  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269942  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.269971  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.269978  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.269984  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:45:25.269989  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:45:25.269994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270002  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270031  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270038  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270044  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:45:25.270049  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:45:25.270054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270070  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270091  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270097  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270104  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:45:25.270109  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:45:25.270113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270136  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270143  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270149  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270156  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270162  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:45:25.270167  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:45:25.270172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270208  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270215  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270221  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:45:25.270227  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:45:25.270231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270268  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270275  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270281  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:45:25.270286  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:45:25.270290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270327  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270334  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270340  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:45:25.270345  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:45:25.270350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270386  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270393  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270402  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:45:25.270408  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:45:25.270412  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270443  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270450  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270457  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270463  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:45:25.270468  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:45:25.270473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270510  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270526  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270533  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:45:25.270538  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:45:25.270543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270578  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270591  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270599  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270605  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:45:25.270611  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:45:25.270616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270625  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270649  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270665  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270672  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270678  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:45:25.270683  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:45:25.270688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270719  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270726  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270733  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270739  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:45:25.270753  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:45:25.270758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270766  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270795  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270802  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270808  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:45:25.270813  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:45:25.270818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270842  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270848  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270854  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270861  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270867  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:45:25.270873  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:45:25.270877  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270901  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270908  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270914  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270921  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270927  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:45:25.270932  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:45:25.270937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270953  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.270974  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.270981  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.270987  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:45:25.270992  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:45:25.270997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271033  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271040  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271046  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:45:25.271051  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:45:25.271056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271080  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271093  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271100  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271106  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:45:25.271111  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:45:25.271116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271146  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271152  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271159  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271165  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:45:25.271170  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:45:25.271175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271212  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271219  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271225  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:45:25.271230  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:45:25.271235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271265  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271271  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271278  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271284  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:45:25.271289  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:45:25.271294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271318  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271331  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271337  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271344  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:45:25.271349  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:45:25.271354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271377  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271390  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271400  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271406  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:45:25.271412  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:45:25.271416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271433  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271453  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271460  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271467  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:45:25.271472  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:45:25.271476  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271500  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271507  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271515  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271522  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.271528  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:45:25.271534  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.271538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271575  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271581  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.271587  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:45:25.271593  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:45:25.271597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271613  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271634  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271640  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.271646  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:45:25.271652  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:45:25.271656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271693  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271700  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.271706  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:45:25.271711  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.271716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271723  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271762  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271769  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.271775  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.271781  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:45:25.271785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271794  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271823  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271830  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271845  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:45:25.271851  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.271855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271892  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271899  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.271905  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:45:25.271911  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.271915  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271931  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271951  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.271958  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.271964  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:45:25.271970  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.271975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.271998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272011  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272018  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272024  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:45:25.272030  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.272034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272050  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272070  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272077  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.272083  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.272088  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:45:25.272093  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272130  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272137  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272143  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:45:25.272149  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.272153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272170  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272190  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272197  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272203  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:45:25.272208  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.272213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272229  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272250  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272257  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.272263  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:45:25.272268  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.272272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272310  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272316  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272322  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:45:25.272328  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.272332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272349  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272356  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272369  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272376  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.272382  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.272388  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:45:25.272393  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272404  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272434  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272441  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272447  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:45:25.272453  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.272458  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272488  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272494  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272501  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272507  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:45:25.272512  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.272517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272547  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272553  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272560  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.272566  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:45:25.272572  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.272576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272613  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272619  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272626  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:45:25.272631  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.272635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272666  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272673  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272680  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.272686  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.272691  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:45:25.272695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272732  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272739  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272745  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:45:25.272751  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.272756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272764  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272792  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272799  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272805  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:45:25.272811  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.272815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272852  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272859  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.272865  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:45:25.272870  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.272874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272882  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272920  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272927  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.272933  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:45:25.272939  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.272943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272976  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.272989  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.272996  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.273002  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.273007  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:45:25.273012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273036  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273048  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273055  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273061  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:45:25.273067  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.273071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273079  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273108  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273115  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273121  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:45:25.273126  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.273131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273167  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273174  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.273180  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:45:25.273185  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.273189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273225  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273232  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273238  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:45:25.273244  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.273248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273256  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273284  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273291  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.273297  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.273302  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:45:25.273307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273343  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273350  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273356  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:45:25.273361  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.273366  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273382  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273390  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273399  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273406  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273413  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273419  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:45:25.273424  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.273429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273453  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273466  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273473  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.273479  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:45:25.273484  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.273488  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273525  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273532  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273538  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:45:25.273543  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.273548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273564  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273572  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273579  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273585  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273592  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.273598  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.273603  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:45:25.273608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273654  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273661  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273677  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:45:25.273683  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.273696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273744  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273751  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273767  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:45:25.273773  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.273777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273823  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273830  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.273836  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:45:25.273841  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.273846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273882  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273889  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.273895  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:45:25.273900  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.273905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273941  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.273948  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.273954  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.273959  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:45:25.273964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.273995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274001  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.274007  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.274014  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:45:25.274019  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.274024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274039  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274060  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.274066  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.274073  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:45:25.274078  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.274082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274119  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.274125  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.274131  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:45:25.274136  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.274141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274177  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.274184  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.274190  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:45:25.274196  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.274200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274209  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274239  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.274246  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.274251  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:45:25.274255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274295  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:45:25.274300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.274306  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.274312  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.274316  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.274320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.274330  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:45:25.274417  1 14 json_gui_to_db() created db_node
09-16 14:45:25.289798  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.63 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_003_t" end time: Sep 16 14:45 CDT
"RoundConvert_DBJson2GUIJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

46/65 Testing: RoundConvert_DBJson2Fhicl_004_t
46/65 Test: RoundConvert_DBJson2Fhicl_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/RoundConvert_DBJson2Fhicl_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/test004.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test004.json" "-c" "test004.json" "-t" "RoundConvert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/RoundConvert_DBJson2Fhicl_004_t.d
"RoundConvert_DBJson2Fhicl_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.318827  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:45:25.318945  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:45:25.318972  1  0 artdaq::database::fhicljson trace_enable
09-16 14:45:25.318994  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:45:25.320957  1  3 json_to_fhicl: begin
09-16 14:45:25.320985  1  3 json_to_fhicl: Reading json root nodes
09-16 14:45:25.346085  1  2 write_data() begin
09-16 14:45:25.346230  1  2 json2fcldb() key=<services> type=<table>
09-16 14:45:25.346323  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:45:25.346339  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:45:25.346495  1  2 json2fcldb() key=<user> type=<table>
09-16 14:45:25.346513  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:45:25.346526  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:45:25.346545  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:45:25.346606  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:45:25.346626  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:45:25.346644  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:45:25.346711  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:45:25.346726  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:45:25.346744  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:45:25.346759  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:45:25.346778  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:45:25.346796  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:45:25.346813  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:45:25.346830  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:45:25.346894  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:45:25.346914  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:45:25.346948  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:45:25.346962  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:45:25.346975  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:45:25.346993  1  2 json2fcldb() key=<level> type=<number>
09-16 14:45:25.347012  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:45:25.347051  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:45:25.347125  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:45:25.347140  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:45:25.347154  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.347173  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:45:25.347187  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:45:25.347541  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:45:25.347568  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:45:25.347584  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:45:25.347601  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.347625  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:45:25.347661  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:45:25.347679  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.347700  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:45:25.347747  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:45:25.347788  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:45:25.347824  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:45:25.347894  1  2 json2fcldb() key=<source> type=<table>
09-16 14:45:25.347913  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:45:25.347935  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:45:25.347957  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:45:25.347996  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:45:25.358359  1  2 write_data() end
09-16 14:45:25.358407  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:45:25.358427  1  3 json_to_fhicl: end
09-16 14:45:25.358624  1  2 fhicl_to_json: begin
09-16 14:45:25.358888  1  2 fhicl_to_json: Created root nodes
09-16 14:45:25.359107  1  2 read_comments begin
09-16 14:45:25.363595  1  2 read_comments end result=1
09-16 14:45:25.363607  1  2 read_data begin
09-16 14:45:25.363618  1  2 read_data() begin
09-16 14:45:25.400486  1  2 parse_document() returned 6 entries.
09-16 14:45:25.400662  1  2 fcl2jsondb() key=<services>
09-16 14:45:25.400741  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:45:25.400833  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.400887  1  2 fcl2jsondb() key=<scheduler>
09-16 14:45:25.400903  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:45:25.400926  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.400954  1  2 fcl2jsondb() key=<fileMode>
09-16 14:45:25.400962  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:45:25.400984  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.401063  1  2 fcl2jsondb() key=<user>
09-16 14:45:25.401090  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:45:25.401115  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.401148  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:45:25.401168  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:45:25.401193  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.401221  1  2 fcl2jsondb() key=<service_provider>
09-16 14:45:25.401228  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:45:25.401251  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.401284  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:45:25.401292  1  2 fcl2jsondb() value=<6>
09-16 14:45:25.401317  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.403315  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.403324  1  2 fcl2jsondb() value=<8>
09-16 14:45:25.403350  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.405290  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.405300  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:45:25.405325  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.407359  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:45:25.407369  1  2 fcl2jsondb() value=<1>
09-16 14:45:25.407485  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.409566  1  2 fcl2jsondb() key=<daq>
09-16 14:45:25.409617  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:45:25.409642  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.409680  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.409688  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:45:25.409713  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.411756  1  2 fcl2jsondb() key=<event_builder>
09-16 14:45:25.411780  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:45:25.411802  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.411831  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.411838  1  2 fcl2jsondb() value=<16>
09-16 14:45:25.411860  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.413734  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:45:25.413743  1  2 fcl2jsondb() value=<0>
09-16 14:45:25.413767  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.415608  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:45:25.415618  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.415644  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.417439  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:45:25.417448  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.417472  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.419061  1  2 fcl2jsondb() key=<use_art>
09-16 14:45:25.419070  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.419094  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.419153  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:45:25.419168  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.419190  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.419221  1  2 fcl2jsondb() key=<verbose>
09-16 14:45:25.419228  1  2 fcl2jsondb() value=<false>
09-16 14:45:25.419250  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.419317  1  2 fcl2jsondb() key=<metrics>
09-16 14:45:25.419339  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:45:25.419359  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.419385  1  2 fcl2jsondb() key=<evbFile>
09-16 14:45:25.419413  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:45:25.419443  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.419493  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:45:25.419508  1  2 fcl2jsondb() value=<"file">
09-16 14:45:25.419530  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.419560  1  2 fcl2jsondb() key=<level>
09-16 14:45:25.419567  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.419592  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.421471  1  2 fcl2jsondb() key=<fileName>
09-16 14:45:25.421480  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:45:25.421581  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.421614  1  2 fcl2jsondb() key=<uniquify>
09-16 14:45:25.421622  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.421647  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.421808  1  2 fcl2jsondb() key=<outputs>
09-16 14:45:25.421864  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:45:25.421889  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.421923  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:45:25.421952  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:45:25.421977  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.422008  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.422015  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:45:25.422037  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.422070  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:45:25.422090  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:45:25.422205  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.422238  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:45:25.422252  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:45:25.422372  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.422541  1  2 fcl2jsondb() key=<physics>
09-16 14:45:25.422593  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:45:25.422616  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.422655  1  2 fcl2jsondb() key=<filters>
09-16 14:45:25.422682  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:45:25.422705  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.422733  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:45:25.422746  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:45:25.422860  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.422890  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.422897  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:45:25.423022  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.423056  1  2 fcl2jsondb() key=<nth>
09-16 14:45:25.423063  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.423187  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.425278  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:45:25.425295  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:45:25.425319  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.425345  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.425353  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:45:25.425375  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.425410  1  2 fcl2jsondb() key=<nth>
09-16 14:45:25.425418  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.425545  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.427652  1  2 fcl2jsondb() key=<pmod2>
09-16 14:45:25.427666  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:45:25.427693  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.427743  1  2 fcl2jsondb() key=<pmod3>
09-16 14:45:25.427756  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:45:25.427879  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.427929  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:45:25.427942  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:45:25.427968  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.428070  1  2 fcl2jsondb() key=<source>
09-16 14:45:25.428088  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:45:25.428112  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.428138  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.428146  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:45:25.428286  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.428319  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:45:25.428327  1  2 fcl2jsondb() value=<900>
09-16 14:45:25.428451  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.430486  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:45:25.430495  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.430617  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.430670  1  2 fcl2jsondb() key=<process_name>
09-16 14:45:25.430678  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:45:25.430702  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.430725  1  2 read_data() end
09-16 14:45:25.430756  1  2 read_data end result=1
09-16 14:45:25.430763  1  2 fhicl_to_json: write() begin
09-16 14:45:25.446830  1  2 fhicl_to_json: write() end
09-16 14:45:25.446839  1  2 fhicl_to_json: end
Running test:<RoundConvert_DBJson2Fhicl>
json_to_fhicl succeeded.
fhicl_to_json succeeded.
<end of output>
Test time =   0.31 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2Fhicl_004_t" end time: Sep 16 14:45 CDT
"RoundConvert_DBJson2Fhicl_004_t" time elapsed: 00:00:00
----------------------------------------------------------

48/65 Testing: Convert_Fhicl2DBJson_006_t
48/65 Test: Convert_Fhicl2DBJson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/Convert_Fhicl2DBJson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/test006.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/test006.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test006.fcl" "-c" "test006.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/Convert_Fhicl2DBJson_006_t.d
"Convert_Fhicl2DBJson_006_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.630780  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:45:25.630882  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:45:25.630903  1  0 artdaq::database::fhicljson trace_enable
09-16 14:45:25.630922  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:45:25.632410  1  2 fhicl_to_json: begin
09-16 14:45:25.632690  1  2 fhicl_to_json: Created root nodes
09-16 14:45:25.632785  1  2 read_comments begin
09-16 14:45:25.639134  1  2 read_comments end result=1
09-16 14:45:25.639150  1  2 read_data begin
09-16 14:45:25.639164  1  2 read_data() begin
09-16 14:45:25.663766  1  2 parse_document() returned 6 entries.
09-16 14:45:25.663919  1  2 fcl2jsondb() key=<OnlineMonitoring_standard>
09-16 14:45:25.663966  1  2 fcl2jsondb() value=<{module_type:"OnlineMonitoring" DataDirPath:"/storage/data/" MonitorSavePath:"/data2/lbnedaq/monitoring/" EVDSavePath:"/data2/lbnedaq/eventDisplay/" ChannelMapFile:"/data/lbnedaq/lbne-artdaq-standard/lbne-artdaq/lbne-artdaq/OnlineMonitoring/detailedMap.txt" ImageType:".png" InitialMonitoringUpdate:30 MonitoringRefreshRate:500 EventDisplayRefreshRate:30 DetailedMonitoring:false ScopeMonitoring:false DriftVelocity:9e-1 CollectionPedestal:550 MicroslicePreBuffer:5 MicrosliceTriggerLength:5}>
09-16 14:45:25.664048  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.664087  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.664093  1  2 fcl2jsondb() value=<"OnlineMonitoring">
09-16 14:45:25.664108  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.664163  1  2 fcl2jsondb() key=<DataDirPath>
09-16 14:45:25.664170  1  2 fcl2jsondb() value=<"/storage/data/">
09-16 14:45:25.664298  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.664324  1  2 fcl2jsondb() key=<MonitorSavePath>
09-16 14:45:25.664330  1  2 fcl2jsondb() value=<"/data2/lbnedaq/monitoring/">
09-16 14:45:25.664439  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.664466  1  2 fcl2jsondb() key=<EVDSavePath>
09-16 14:45:25.664471  1  2 fcl2jsondb() value=<"/data2/lbnedaq/eventDisplay/">
09-16 14:45:25.664574  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.664599  1  2 fcl2jsondb() key=<ChannelMapFile>
09-16 14:45:25.664605  1  2 fcl2jsondb() value=<"/data/lbnedaq/lbne-artdaq-standard/lbne-artdaq/lbne-artdaq/OnlineMonitoring/detailedMap.txt">
09-16 14:45:25.664683  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.664707  1  2 fcl2jsondb() key=<ImageType>
09-16 14:45:25.664713  1  2 fcl2jsondb() value=<".png">
09-16 14:45:25.664790  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.664815  1  2 fcl2jsondb() key=<InitialMonitoringUpdate>
09-16 14:45:25.664821  1  2 fcl2jsondb() value=<30>
09-16 14:45:25.664926  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.665818  1  2 fcl2jsondb() key=<MonitoringRefreshRate>
09-16 14:45:25.665826  1  2 fcl2jsondb() value=<500>
09-16 14:45:25.665923  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.666746  1  2 fcl2jsondb() key=<EventDisplayRefreshRate>
09-16 14:45:25.666761  1  2 fcl2jsondb() value=<30>
09-16 14:45:25.666883  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.667726  1  2 fcl2jsondb() key=<DetailedMonitoring>
09-16 14:45:25.667744  1  2 fcl2jsondb() value=<false>
09-16 14:45:25.667892  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.667973  1  2 fcl2jsondb() key=<ScopeMonitoring>
09-16 14:45:25.667979  1  2 fcl2jsondb() value=<false>
09-16 14:45:25.668085  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.668114  1  2 fcl2jsondb() key=<DriftVelocity>
09-16 14:45:25.668118  1  2 fcl2jsondb() value=<9e-1>
09-16 14:45:25.668227  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.669322  1  2 fcl2jsondb() key=<CollectionPedestal>
09-16 14:45:25.669345  1  2 fcl2jsondb() value=<550>
09-16 14:45:25.669517  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.670284  1  2 fcl2jsondb() key=<MicroslicePreBuffer>
09-16 14:45:25.670292  1  2 fcl2jsondb() value=<5>
09-16 14:45:25.670392  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.671168  1  2 fcl2jsondb() key=<MicrosliceTriggerLength>
09-16 14:45:25.671175  1  2 fcl2jsondb() value=<5>
09-16 14:45:25.671284  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.672077  1  2 fcl2jsondb() key=<OnlineMonitoring_detailed>
09-16 14:45:25.672084  1  2 fcl2jsondb() value=<"@local::OnlineMonitoring_standard">
09-16 14:45:25.672100  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.672117  1  2 fcl2jsondb() key=<OnlineMonitoring_detailed.DetailedMonitoring>
09-16 14:45:25.672122  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.672135  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.672153  1  2 fcl2jsondb() key=<OnlineMonitoring_scope>
09-16 14:45:25.672158  1  2 fcl2jsondb() value=<"@local::OnlineMonitoring_standard">
09-16 14:45:25.672170  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.672185  1  2 fcl2jsondb() key=<OnlineMonitoring_scope.ScopeMonitoring>
09-16 14:45:25.672190  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.672202  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.672234  1  2 fcl2jsondb() key=<process_name>
09-16 14:45:25.672240  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:45:25.672253  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.672266  1  2 read_data() end
09-16 14:45:25.672285  1  2 read_data end result=1
09-16 14:45:25.672290  1  2 fhicl_to_json: write() begin
09-16 14:45:25.679333  1  2 fhicl_to_json: write() end
09-16 14:45:25.679344  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_006_t" end time: Sep 16 14:45 CDT
"Convert_Fhicl2DBJson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

42/65 Testing: RoundConvert_GUIJson2DBJson_003_t
42/65 Test: RoundConvert_GUIJson2DBJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_003_t.d
"RoundConvert_GUIJson2DBJson_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.311195  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:45:25.316224  1 14 json_gui_to_db() begin
09-16 14:45:25.399241  1 14 json_gui_to_db() read guiAST
09-16 14:45:25.399418  1 14 json_gui_to_db() created dbAST
09-16 14:45:25.399502  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.399542  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.399562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.399600  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.399681  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.399715  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:45:25.399737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399837  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:45:25.399842  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399849  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.399854  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.399858  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.399862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.399866  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.399873  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.399892  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:45:25.399898  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:45:25.399902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399950  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.399957  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.399962  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.399966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.399997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400003  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.400007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400014  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.400019  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.400023  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.400026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.400031  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400037  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.400043  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:45:25.400047  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:45:25.400052  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400088  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400094  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400122  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:45:25.400128  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:45:25.400132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400156  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400168  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400174  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.400179  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:25.400183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400220  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:45:25.400225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400231  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.400236  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.400240  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.400243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.400248  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400254  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400261  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:45:25.400265  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:45:25.400270  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400285  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400304  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400310  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400316  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:45:25.400321  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:45:25.400325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400333  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400359  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400366  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400371  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:45:25.400377  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:45:25.400381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400399  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400419  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400426  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400432  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:45:25.400437  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:45:25.400441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400456  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400475  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400481  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.400487  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:45:25.400492  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:45:25.400496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400529  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400536  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.400541  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:45:25.400546  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:45:25.400550  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400572  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400578  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400583  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400589  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400595  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:45:25.400600  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:45:25.400604  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400619  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400638  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400644  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400650  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:45:25.400654  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:45:25.400659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400693  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400699  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.400704  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:45:25.400708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400745  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:45:25.400749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400755  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.400761  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.400765  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.400768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.400773  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400779  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400785  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:45:25.400790  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:45:25.400794  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400829  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400835  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400841  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:45:25.400846  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:45:25.400850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400884  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400890  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400896  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:45:25.400900  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:45:25.400905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400912  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400939  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.400946  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.400951  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:45:25.400956  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:45:25.400960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.400994  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401000  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401006  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:45:25.401011  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:45:25.401015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401022  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401049  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401055  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401060  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:45:25.401065  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:45:25.401069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401109  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401116  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.401121  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:45:25.401125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401155  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401162  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:45:25.401166  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401172  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.401177  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.401181  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.401185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.401189  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401195  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401201  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:45:25.401206  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:45:25.401210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401246  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401252  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.401257  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:45:25.401261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401298  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:45:25.401302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401308  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.401313  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.401317  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.401321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.401325  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401331  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401337  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:45:25.401342  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:45:25.401346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401362  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401381  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401387  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401393  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:45:25.401401  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:45:25.401405  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401434  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401440  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401446  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401452  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:45:25.401457  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:45:25.401461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401468  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401476  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401496  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401502  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401508  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:45:25.401512  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:45:25.401517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401551  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401558  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401563  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:45:25.401568  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:45:25.401572  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401606  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401612  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401618  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:45:25.401622  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:45:25.401626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401660  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401666  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401671  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:45:25.401676  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:45:25.401680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401713  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401720  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401725  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:45:25.401730  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:45:25.401734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401742  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401767  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401774  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401779  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:45:25.401784  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:45:25.401788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401796  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401822  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401829  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401834  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:45:25.401839  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:45:25.401843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401851  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401877  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401883  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401889  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:45:25.401893  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:45:25.401897  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401912  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401931  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401937  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401943  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:45:25.401947  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:45:25.401951  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.401985  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.401991  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.401997  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:45:25.402001  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:45:25.402005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402039  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402045  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402050  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:45:25.402055  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:45:25.402059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402093  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402099  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402105  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:45:25.402110  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:45:25.402114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402136  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402147  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402153  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402159  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:45:25.402164  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:45:25.402168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402201  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402207  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402213  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:45:25.402217  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:45:25.402222  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402229  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402243  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402250  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402255  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402261  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402267  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:45:25.402271  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:45:25.402276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402309  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402315  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402321  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:45:25.402326  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:45:25.402330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402353  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402364  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402370  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402376  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:45:25.402381  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:45:25.402385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402423  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402428  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402435  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402441  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:45:25.402446  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:45:25.402450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402458  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402466  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402479  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402484  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402490  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402496  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:45:25.402500  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:45:25.402505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402538  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402544  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402550  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:45:25.402555  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:45:25.402559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402592  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402598  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402604  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:45:25.402608  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:45:25.402612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402647  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402653  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402658  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:45:25.402663  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:45:25.402667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402700  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402707  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402713  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:45:25.402717  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:45:25.402721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402755  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402761  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402767  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:45:25.402771  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:45:25.402776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402809  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402815  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402821  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:45:25.402826  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:45:25.402830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402863  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402869  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402875  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:45:25.402879  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:45:25.402883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402899  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402912  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402917  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402924  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402929  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:45:25.402934  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:45:25.402938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402946  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402954  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.402972  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.402978  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.402983  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:45:25.402988  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:45:25.402992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403014  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403025  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403032  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403037  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:45:25.403042  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:45:25.403046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403068  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403079  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403086  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403091  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:45:25.403096  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:45:25.403100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403108  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403128  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403133  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403139  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403145  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:45:25.403150  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:45:25.403154  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403169  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403187  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403193  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403199  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:45:25.403204  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:45:25.403208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403216  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403223  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403242  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403248  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403253  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:45:25.403258  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:45:25.403262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403270  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403284  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403296  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403302  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403307  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:45:25.403312  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:45:25.403316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403350  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403356  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403361  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:45:25.403366  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:45:25.403370  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403377  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403408  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403415  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403420  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:45:25.403425  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:45:25.403429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403499  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403513  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403525  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:45:25.403536  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:45:25.403545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403588  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403595  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403601  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:45:25.403606  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:45:25.403610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403618  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403647  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403653  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.403659  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:45:25.403663  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:45:25.403668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403702  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403708  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.403713  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:45:25.403718  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:45:25.403722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403756  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403762  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.403768  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:45:25.403772  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:45:25.403776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403810  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403821  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.403826  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:45:25.403832  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:45:25.403836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403871  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403877  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.403882  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.403887  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:45:25.403891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403899  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403913  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403925  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403931  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403937  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:45:25.403942  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.403946  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403953  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.403980  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.403986  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.403991  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:45:25.403996  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.404000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404022  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404034  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.404040  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.404046  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:45:25.404050  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.404055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404088  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.404094  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.404100  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:45:25.404105  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.404110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404143  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.404150  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.404155  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.404160  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:45:25.404164  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404197  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.404203  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.404209  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:45:25.404214  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.404218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404246  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404251  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.404258  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.404263  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:45:25.404268  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.404272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404306  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.404312  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.404318  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:45:25.404323  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.404327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404334  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404342  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.404355  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.424976  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.424995  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425006  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:45:25.425016  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.425024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425067  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425074  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.425081  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.425086  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:45:25.425090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425124  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425130  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425136  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:45:25.425141  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.425145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425160  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425178  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425185  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425190  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:45:25.425195  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.425199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425232  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425238  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.425244  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:45:25.425249  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.425253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425286  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425292  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425298  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:45:25.425303  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.425306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425334  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425339  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425346  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.425351  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.425356  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:45:25.425360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425367  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425393  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425405  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425411  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:45:25.425416  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.425420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425443  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425454  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425460  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425466  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:45:25.425471  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.425475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425508  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425514  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.425519  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:45:25.425524  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.425528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425535  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425543  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425555  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425561  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425567  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425572  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:45:25.425577  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.425581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425588  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425603  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425614  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425620  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.425625  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.425630  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:45:25.425634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425649  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425666  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425672  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425678  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:45:25.425683  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.425687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425708  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425720  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425726  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425731  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:45:25.425736  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.425740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425747  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425773  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425779  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.425785  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:45:25.425790  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.425794  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425827  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425833  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425838  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:45:25.425843  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.425847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425854  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425874  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425880  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425886  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.425891  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.425896  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:45:25.425900  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425915  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425933  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425939  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425944  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:45:25.425949  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.425953  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.425986  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.425992  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.425997  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:45:25.426002  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.426006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426039  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426045  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.426050  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:45:25.426055  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.426059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426080  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426091  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426098  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.426103  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:45:25.426108  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.426112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426144  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426151  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.426156  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.426161  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:45:25.426165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426200  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426208  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.426215  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:45:25.426220  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.426224  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426262  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426269  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.426275  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:45:25.426281  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.426286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426293  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426323  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426330  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.426346  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:45:25.426352  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.426356  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426364  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426398  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426410  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.426427  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:45:25.426433  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.426437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426456  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426478  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426485  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.426492  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:45:25.426497  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:45:25.426503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426540  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426548  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.426554  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:45:25.426560  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.426565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426573  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426603  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426610  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.426616  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:45:25.426622  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.426626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426665  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426672  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:45:25.426678  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:45:25.426684  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.426689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426726  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426733  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:45:25.426740  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:45:25.426745  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.426749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426789  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:45:25.426797  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:45:25.426802  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:45:25.426806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426832  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426851  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:45:25.426859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.426870  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:45:25.426877  1 15 json_gui_to_db() operator() begin
09-16 14:45:25.426882  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:45:25.426886  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:45:25.426912  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:45:25.427013  1 14 json_gui_to_db() created db_node
09-16 14:45:25.443991  1 14 json_gui_to_db() created db_json
09-16 14:45:25.444166  1 10 json_db_to_gui() begin
09-16 14:45:25.461338  1 10 json_db_to_gui() read dbAST
09-16 14:45:25.461390  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.461426  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.461432  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.461438  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.461478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.461506  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:45:25.461531  1 13 json_db_to_gui() child args name <prolog>
09-16 14:45:25.461536  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.461560  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:45:25.461565  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.461577  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.461582  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.461618  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.461641  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.461668  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.461673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.461700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.461741  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.461747  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.461751  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.461764  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.461774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.461779  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:45:25.461784  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:45:25.461787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.461962  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:45:25.461970  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.461974  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.461978  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.461987  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.461996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462004  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462045  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.462050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462059  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.462063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462074  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:45:25.462081  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:45:25.462085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462104  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:45:25.462110  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462113  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.462118  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.462125  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.462133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462142  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462163  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462168  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.462172  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.462176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.462186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462191  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:45:25.462196  1 13 json_db_to_gui() child args name <metrics>
09-16 14:45:25.462201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462218  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:45:25.462224  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462228  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.462232  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.462239  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.462248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462256  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462276  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.462280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462288  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.462292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462298  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:45:25.462304  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:45:25.462308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462325  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:45:25.462331  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462335  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.462340  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.462347  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.462355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462363  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462392  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.462401  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462409  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.462414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462420  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:45:25.462426  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:45:25.462431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462447  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:45:25.462453  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462458  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.462462  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.462470  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.462478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462487  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462508  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462512  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.462516  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.462521  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.462531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462536  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:45:25.462541  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:45:25.462545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462562  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:45:25.462568  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462573  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.462577  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.462585  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.462593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462602  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462606  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462621  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.462626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462633  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.462637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462643  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:45:25.462649  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:45:25.462654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462670  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:45:25.462676  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462681  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.462685  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.462693  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.462701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462709  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462728  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.462733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462740  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.462744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462750  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:45:25.462756  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:45:25.462761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462778  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:45:25.462783  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462788  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.462792  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.462800  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.462808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462816  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462828  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462836  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.462840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462847  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.462851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462857  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:45:25.462863  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:45:25.462868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462885  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:45:25.462890  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.462895  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.462899  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.462907  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.462915  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462923  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.462927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462934  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.462942  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.462947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462954  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.462958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462964  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:45:25.462970  1 13 json_db_to_gui() child args name <generator>
09-16 14:45:25.462975  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.462991  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:45:25.462997  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463002  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463006  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463013  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463029  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463049  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.463053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463060  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.463065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463071  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:45:25.463077  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:45:25.463080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463106  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:45:25.463113  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463118  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463122  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463130  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463146  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463151  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463160  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463177  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.463183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463192  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.463197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463205  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:45:25.463215  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:45:25.463219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463237  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:45:25.463244  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463249  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463253  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463270  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463287  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463306  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.463311  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463318  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.463322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463328  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:45:25.463334  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:45:25.463338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463355  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:45:25.463361  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463366  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463370  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463377  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463393  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463418  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.463422  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463430  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.463434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463440  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:45:25.463446  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:45:25.463450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463468  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:45:25.463474  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463477  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463482  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463489  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463505  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463526  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463531  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.463535  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.463539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.463548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463553  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:45:25.463558  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:45:25.463563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463580  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:45:25.463586  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463590  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463594  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463602  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463618  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463630  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463638  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.463642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463650  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.463654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463660  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:45:25.463666  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:45:25.463669  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463688  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:45:25.463694  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463697  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463702  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463709  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463725  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463737  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463745  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.463749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463756  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.463760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463767  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:45:25.463772  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:45:25.463776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463792  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:45:25.463798  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463802  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463807  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463814  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463830  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463849  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.463853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463860  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.463865  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463871  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:45:25.463876  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:45:25.463880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463897  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:45:25.463903  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.463906  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.463911  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.463918  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.463926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463934  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.463938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.463953  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.463958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463965  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.463969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.463975  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:45:25.463981  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:45:25.463985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464002  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:45:25.464008  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464011  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464016  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464023  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464039  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464058  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.464063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464069  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464074  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464080  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:45:25.464086  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:45:25.464089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464107  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:45:25.464113  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464117  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464121  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464128  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464144  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464164  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.464168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464175  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464187  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464197  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:45:25.464203  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:45:25.464207  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464223  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:45:25.464229  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464233  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464237  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464244  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464261  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464281  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464286  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.464290  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.464294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.464304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464309  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:45:25.464314  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:45:25.464318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464336  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:45:25.464342  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464345  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464350  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464357  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464374  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464393  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.464402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464410  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464421  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:45:25.464426  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:45:25.464431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464448  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:45:25.464454  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464458  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464463  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464470  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464486  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464507  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464512  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.464516  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.464520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.464529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464535  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:45:25.464540  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:45:25.464544  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464562  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:45:25.464568  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464571  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464576  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464583  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464591  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464599  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464619  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.464624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464631  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464641  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:45:25.464647  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:45:25.464651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464669  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:45:25.464675  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464679  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464683  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464690  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464706  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464726  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.464730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464737  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464748  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:45:25.464754  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:45:25.464757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464775  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:45:25.464781  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464785  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464790  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464796  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464812  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464832  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.464836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464843  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464855  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464865  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:45:25.464871  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:45:25.464874  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464891  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:45:25.464897  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.464901  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.464904  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.464912  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.464919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464926  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.464930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.464946  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.464950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464957  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.464962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464968  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:45:25.464973  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:45:25.464977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.464995  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:45:25.465001  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465005  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465009  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465016  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465032  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465051  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465063  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465073  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:45:25.465079  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:45:25.465083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465100  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:45:25.465106  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465110  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465114  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465121  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465129  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465137  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465156  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465168  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465178  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:45:25.465184  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:45:25.465187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465205  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:45:25.465211  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465215  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465220  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465226  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465242  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465261  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465273  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465287  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:45:25.465294  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:45:25.465299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465317  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:45:25.465322  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465326  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465331  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465338  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465354  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465374  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465385  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465400  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:45:25.465407  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:45:25.465411  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465429  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:45:25.465435  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465440  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465444  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465451  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465467  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465479  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465487  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465499  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465509  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:45:25.465515  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:45:25.465520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465537  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:45:25.465543  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465548  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465552  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465560  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465576  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465580  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465595  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465600  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465607  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465617  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:45:25.465623  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:45:25.465627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465644  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:45:25.465650  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465655  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465659  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465667  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465683  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465703  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465714  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465725  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:45:25.465730  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:45:25.465735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465752  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:45:25.465758  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465762  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465766  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465773  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465789  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465808  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465819  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465830  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:45:25.465835  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:45:25.465840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465857  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:45:25.465863  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465868  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465872  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465880  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465888  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465896  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.465900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.465915  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.465919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465926  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.465931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465937  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:45:25.465943  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:45:25.465947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.465964  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:45:25.465970  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.465975  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.465979  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.465987  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.465995  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466003  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466022  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466027  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466034  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466037  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466043  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:45:25.466057  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:45:25.466061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466077  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:45:25.466083  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466087  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466091  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466097  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466113  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466124  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466132  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466143  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466153  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:45:25.466159  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:45:25.466163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466180  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:45:25.466186  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466191  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466195  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466202  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466217  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466236  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466240  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466247  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466258  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:45:25.466263  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:45:25.466268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466285  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:45:25.466290  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466295  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466299  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466306  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466322  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466326  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466341  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466352  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466362  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:45:25.466367  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:45:25.466372  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466389  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:45:25.466397  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466411  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466415  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466432  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466459  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466487  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466499  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466509  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:45:25.466515  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:45:25.466519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466536  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:45:25.466542  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466546  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466550  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466557  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466573  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466584  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466591  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466596  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466603  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466613  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:45:25.466618  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:45:25.466622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466639  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:45:25.466645  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466649  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466653  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466660  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466675  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466694  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466705  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466715  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:45:25.466721  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:45:25.466724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466741  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:45:25.466747  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466751  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466754  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466761  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466777  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466788  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466795  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466807  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466817  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:45:25.466822  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:45:25.466826  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466843  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:45:25.466849  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466852  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466857  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466864  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466879  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466883  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466898  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.466902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466909  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.466913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466920  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:45:25.466925  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:45:25.466929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466946  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:45:25.466952  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.466956  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.466960  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.466967  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.466974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.466982  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.466987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.466993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467001  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467012  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467023  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:45:25.467028  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:45:25.467031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467049  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:45:25.467055  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467059  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467063  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467070  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467085  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467104  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467115  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467125  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:45:25.467131  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:45:25.467135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467152  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:45:25.467158  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467162  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467166  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467173  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467188  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467192  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467207  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467218  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467228  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:45:25.467233  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:45:25.467238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467255  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:45:25.467265  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467281  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467287  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467294  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467311  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467339  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467350  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467361  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:45:25.467385  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:45:25.467390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467412  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:45:25.467419  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467432  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467436  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467444  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467460  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467471  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467479  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467490  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467501  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:45:25.467506  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:45:25.467511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467528  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:45:25.467534  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467538  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467542  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467549  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467557  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467565  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467584  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467595  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467605  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:45:25.467611  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:45:25.467614  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467632  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:45:25.467638  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467642  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467646  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467653  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467669  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467688  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467699  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467709  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:45:25.467715  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:45:25.467718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467737  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:45:25.467742  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467746  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467750  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467758  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467773  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467785  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467792  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467803  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467814  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:45:25.467819  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:45:25.467823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467841  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:45:25.467847  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467851  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467855  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467862  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467877  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467888  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467896  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.467900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467907  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.467911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467917  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:45:25.467923  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:45:25.467927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467944  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:45:25.467950  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.467954  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.467959  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.467966  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.467973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.467981  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.467986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.467993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468000  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468004  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468011  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468022  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:45:25.468027  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:45:25.468031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468049  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:45:25.468055  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468058  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468063  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468070  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468085  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468090  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468104  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468115  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468126  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:45:25.468131  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:45:25.468135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468153  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:45:25.468158  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468162  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468166  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468173  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468181  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468189  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468217  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468229  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468239  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:45:25.468245  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:45:25.468249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468267  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:45:25.468273  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468277  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468281  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468297  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468305  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468313  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468332  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468343  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468353  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:45:25.468359  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:45:25.468362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468380  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:45:25.468386  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468390  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468397  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468406  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468422  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468426  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468441  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468452  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468463  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:45:25.468468  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:45:25.468472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468490  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:45:25.468496  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468500  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468505  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468512  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468527  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468532  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468546  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468558  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468568  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:45:25.468573  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:45:25.468577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468594  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:45:25.468600  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468604  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468609  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468615  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468631  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468650  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468661  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468681  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:45:25.468686  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:45:25.468690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468709  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:45:25.468714  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468718  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468723  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468730  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468738  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468746  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468765  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468777  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468787  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:45:25.468793  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:45:25.468797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468815  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:45:25.468821  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468825  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468829  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468836  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468844  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468852  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468864  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468872  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468883  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.468888  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468894  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:45:25.468900  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:45:25.468903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468922  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:45:25.468928  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.468932  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.468936  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.468943  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.468954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468967  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.468972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.468987  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.468992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.468999  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469011  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469015  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469022  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469033  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469037  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469043  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:45:25.469049  1 13 json_db_to_gui() child args name <daq>
09-16 14:45:25.469053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469070  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:45:25.469076  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469080  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469084  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469092  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469100  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469108  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469128  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.469141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469149  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469159  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:45:25.469165  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:45:25.469168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469184  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:45:25.469190  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469194  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469198  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469205  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469220  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469239  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.469244  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469250  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469255  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469261  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:45:25.469266  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:45:25.469270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469286  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:45:25.469291  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469295  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469299  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469306  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469322  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469326  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469341  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.469345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469352  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469362  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:45:25.469368  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:45:25.469380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469400  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:45:25.469408  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469415  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469421  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469437  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469454  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469473  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.469478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469505  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:45:25.469512  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469523  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:45:25.469529  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:45:25.469533  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469548  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:45:25.469554  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469558  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469563  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469570  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469585  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469604  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.469609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469616  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469626  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.469632  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.469635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469650  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.469656  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469660  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469664  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469671  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469687  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469706  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.469710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469717  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469727  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.469733  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.469736  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469752  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:45:25.469757  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469761  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469766  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469772  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469788  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469792  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469807  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.469811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469818  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469829  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.469834  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.469838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469853  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:45:25.469858  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469862  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469866  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469873  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469881  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469889  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469893  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469907  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.469912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469919  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.469923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469929  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.469935  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.469939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.469954  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.469960  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.469964  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.469968  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.469975  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.469982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.469990  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.469995  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470010  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470021  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470025  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470031  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:45:25.470037  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:45:25.470040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470056  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:45:25.470061  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470065  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470070  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470076  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470092  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470111  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470122  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470133  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.470138  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.470142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470158  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.470164  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470167  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470172  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470179  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470194  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470213  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470218  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470224  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470235  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.470241  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.470244  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470260  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:45:25.470266  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470270  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470273  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470280  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470288  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470296  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470314  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470326  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470336  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.470341  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.470345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470361  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:45:25.470367  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470371  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470375  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470382  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470401  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470422  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470426  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470433  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470437  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470443  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.470449  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.470454  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470469  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.470475  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470479  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470484  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470491  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470506  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470525  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470530  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470537  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470547  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:45:25.470553  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:45:25.470556  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470571  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:45:25.470577  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470581  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470585  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470592  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470600  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470608  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470619  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470627  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470631  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470638  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470649  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.470654  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.470658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470674  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.470680  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470684  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470688  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470695  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470711  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470722  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470730  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470741  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470751  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.470757  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.470760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470777  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:45:25.470783  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470786  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470791  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470798  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470813  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470832  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470853  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470864  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.470870  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.470874  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470899  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:45:25.470904  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.470908  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.470913  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.470919  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.470927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470935  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.470939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.470954  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.470958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470965  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.470970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.470976  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.470982  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.470985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471000  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.471006  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471010  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471014  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471021  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471037  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471056  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471067  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471071  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471077  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:45:25.471083  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:45:25.471086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471102  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:45:25.471108  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471112  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471116  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471123  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471138  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471143  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471150  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471157  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471169  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471179  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.471185  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.471189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471204  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.471210  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471214  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471218  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471225  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471240  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471260  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471271  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471281  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.471287  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.471290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471305  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:45:25.471311  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471315  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471319  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471326  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471334  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471342  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471361  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471384  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471407  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.471413  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.471418  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471440  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:45:25.471447  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471452  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471456  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471465  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471482  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471502  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471506  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471513  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471524  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.471530  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.471533  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471550  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.471556  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471559  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471564  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471571  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471587  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471592  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471607  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471618  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471629  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:45:25.471634  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:45:25.471638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471655  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:45:25.471660  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471664  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471669  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471676  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471692  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471711  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471716  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471723  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471727  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471733  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.471739  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.471742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471758  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.471764  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471768  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471772  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471779  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471795  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471815  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471826  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471831  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471837  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.471843  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.471846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471863  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:45:25.471869  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471873  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471878  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471884  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471900  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.471905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.471920  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.471925  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471932  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.471936  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471942  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.471948  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.471952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.471967  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:45:25.471973  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.471977  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.471982  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.471988  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.471996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472004  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472024  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472028  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472035  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472046  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.472052  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.472056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472071  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.472077  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472081  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472085  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472093  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472109  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472128  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472140  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472150  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:45:25.472156  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:45:25.472160  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472176  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:45:25.472182  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472186  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472191  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472198  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472205  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472214  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472218  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472233  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472245  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472255  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.472261  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.472264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472280  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.472286  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472290  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472294  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472301  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472317  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472337  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472341  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472348  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472359  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.472364  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.472368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472384  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:45:25.472389  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472393  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472402  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472441  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472460  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472489  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472501  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472511  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.472517  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.472521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472539  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:45:25.472545  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472549  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472554  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472561  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472577  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472597  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472609  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472619  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.472625  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.472629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472645  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.472651  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472655  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472660  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472666  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472683  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472694  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472702  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472714  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472724  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:45:25.472730  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:45:25.472733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472750  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:45:25.472756  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472760  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472765  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472772  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472788  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472808  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472819  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472830  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.472836  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.472839  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472856  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.472862  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472866  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472870  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472877  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472893  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.472898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472913  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.472917  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472925  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.472929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472935  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.472941  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.472945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.472961  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:45:25.472967  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.472971  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.472975  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.472982  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.472990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.472999  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473018  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.473023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473030  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473041  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.473047  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.473050  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473066  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:45:25.473072  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473076  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.473080  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.473087  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.473095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473103  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473123  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.473127  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473134  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473145  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.473151  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.473155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473171  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.473177  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473180  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.473185  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.473192  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.473200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473208  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473228  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.473232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473239  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473244  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473250  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:45:25.473255  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:45:25.473259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473276  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:45:25.473282  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473285  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.473290  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.473306  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.473315  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473323  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473328  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473335  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473343  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.473348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473355  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473366  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.473372  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.473376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473392  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.473417  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473423  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.473427  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.473435  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.473444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473452  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473472  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.473477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473484  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473495  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.473501  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.473504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473522  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:45:25.473528  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473532  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.473537  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.473544  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.473552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473560  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473564  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473580  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.473584  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473591  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473602  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.473608  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.473611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473629  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:45:25.473635  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473639  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.473643  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.473650  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.473658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473667  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473671  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473686  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.473691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473698  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473708  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.473714  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.473718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473734  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:45:25.473740  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473744  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.473749  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.473756  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.473764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473772  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473791  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:45:25.473796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473803  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473815  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473825  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:45:25.473831  1 13 json_db_to_gui() child args name <main>
09-16 14:45:25.473835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473841  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:45:25.473846  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473850  1 11 json_db_to_gui() operator() switch DATA
09-16 14:45:25.473855  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:45:25.473861  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:45:25.473869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473877  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:45:25.473882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:45:25.473898  1 11 json_db_to_gui() operator() begin
09-16 14:45:25.473903  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:45:25.473907  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:45:25.473911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:45:25.473921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473929  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:45:25.473933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:45:25.473956  1 10 json_db_to_gui() created gui_node
09-16 14:45:25.506596  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.40 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_003_t" end time: Sep 16 14:45 CDT
"RoundConvert_GUIJson2DBJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

47/65 Testing: Convert_Fhicl2DBJson_005_t
47/65 Test: Convert_Fhicl2DBJson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/Convert_Fhicl2DBJson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/test005.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/test005.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test005.fcl" "-c" "test005.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/Convert_Fhicl2DBJson_005_t.d
"Convert_Fhicl2DBJson_005_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.630354  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:45:25.630469  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:45:25.630488  1  0 artdaq::database::fhicljson trace_enable
09-16 14:45:25.630506  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:45:25.631861  1  2 fhicl_to_json: begin
09-16 14:45:25.632130  1  2 fhicl_to_json: Created root nodes
09-16 14:45:25.632209  1  2 read_comments begin
09-16 14:45:25.636087  1  2 read_comments end result=1
09-16 14:45:25.636102  1  2 read_data begin
09-16 14:45:25.636112  1  2 read_data() begin
09-16 14:45:25.670268  1  2 parse_document() returned 6 entries.
09-16 14:45:25.670425  1  2 fcl2jsondb() key=<services>
09-16 14:45:25.670476  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE" errorOnFailureToPut:false} NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:4 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:45:25.670564  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.670602  1  2 fcl2jsondb() key=<scheduler>
09-16 14:45:25.670613  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE" errorOnFailureToPut:false}>
09-16 14:45:25.670626  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.670641  1  2 fcl2jsondb() key=<fileMode>
09-16 14:45:25.670645  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:45:25.670658  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.670709  1  2 fcl2jsondb() key=<errorOnFailureToPut>
09-16 14:45:25.670715  1  2 fcl2jsondb() value=<false>
09-16 14:45:25.670728  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.670791  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:45:25.670804  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:4 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:45:25.670817  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.670832  1  2 fcl2jsondb() key=<service_provider>
09-16 14:45:25.670836  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:45:25.670848  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.670866  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:45:25.670870  1  2 fcl2jsondb() value=<4>
09-16 14:45:25.670883  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.671775  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.671781  1  2 fcl2jsondb() value=<8>
09-16 14:45:25.671798  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.672563  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.672569  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:45:25.672585  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.673393  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:45:25.673404  1  2 fcl2jsondb() value=<1>
09-16 14:45:25.673475  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.674253  1  2 fcl2jsondb() key=<daq>
09-16 14:45:25.674291  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:45:25.674308  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.674327  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.674331  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:45:25.674344  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.675577  1  2 fcl2jsondb() key=<event_builder>
09-16 14:45:25.675603  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:45:25.675629  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.675661  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.675669  1  2 fcl2jsondb() value=<16>
09-16 14:45:25.675695  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.676492  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:45:25.676499  1  2 fcl2jsondb() value=<0>
09-16 14:45:25.676515  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.677249  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:45:25.677255  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.677270  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.678022  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:45:25.678028  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.678052  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.678792  1  2 fcl2jsondb() key=<use_art>
09-16 14:45:25.678798  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.678813  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.678834  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:45:25.678838  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.678851  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.678869  1  2 fcl2jsondb() key=<verbose>
09-16 14:45:25.678873  1  2 fcl2jsondb() value=<false>
09-16 14:45:25.678886  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.678923  1  2 fcl2jsondb() key=<metrics>
09-16 14:45:25.678937  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:45:25.678950  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.678966  1  2 fcl2jsondb() key=<evbFile>
09-16 14:45:25.678976  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:45:25.678988  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.679001  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:45:25.679005  1  2 fcl2jsondb() value=<"file">
09-16 14:45:25.679017  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.679034  1  2 fcl2jsondb() key=<level>
09-16 14:45:25.679038  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.679050  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.679805  1  2 fcl2jsondb() key=<fileName>
09-16 14:45:25.679811  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:45:25.679826  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.679844  1  2 fcl2jsondb() key=<uniquify>
09-16 14:45:25.679848  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.679861  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.679943  1  2 fcl2jsondb() key=<outputs>
09-16 14:45:25.679981  1  2 fcl2jsondb() value=<{rootMPIOutput:{module_type:"RootMPIOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:45:25.679996  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.680014  1  2 fcl2jsondb() key=<rootMPIOutput>
09-16 14:45:25.680029  1  2 fcl2jsondb() value=<{module_type:"RootMPIOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:45:25.680042  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.680057  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.680061  1  2 fcl2jsondb() value=<"RootMPIOutput">
09-16 14:45:25.680073  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.680092  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:45:25.680103  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:45:25.680115  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.680130  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:45:25.680137  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:45:25.680149  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.680251  1  2 fcl2jsondb() key=<physics>
09-16 14:45:25.680284  1  2 fcl2jsondb() value=<{analyzers:{} producers:{} filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} p1:[] pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["rootMPIOutput"]}>
09-16 14:45:25.680299  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.680320  1  2 fcl2jsondb() key=<analyzers>
09-16 14:45:25.680326  1  2 fcl2jsondb() value=<{}>
09-16 14:45:25.680337  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.680363  1  2 fcl2jsondb() key=<producers>
09-16 14:45:25.680369  1  2 fcl2jsondb() value=<{}>
09-16 14:45:25.680382  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.680411  1  2 fcl2jsondb() key=<filters>
09-16 14:45:25.680427  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:45:25.680440  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.680456  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:45:25.680464  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:45:25.680477  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.680491  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.680495  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:45:25.680507  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.680524  1  2 fcl2jsondb() key=<nth>
09-16 14:45:25.680528  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.680540  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.681281  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:45:25.681292  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:45:25.681306  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.681320  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.681324  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:45:25.681336  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.681352  1  2 fcl2jsondb() key=<nth>
09-16 14:45:25.681356  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.681368  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.682120  1  2 fcl2jsondb() key=<p1>
09-16 14:45:25.682128  1  2 fcl2jsondb() value=<[]>
09-16 14:45:25.682143  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.682169  1  2 fcl2jsondb() key=<pmod2>
09-16 14:45:25.682177  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:45:25.682190  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.682217  1  2 fcl2jsondb() key=<pmod3>
09-16 14:45:25.682224  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:45:25.682238  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.682264  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:45:25.682271  1  2 fcl2jsondb() value=<["rootMPIOutput"]>
09-16 14:45:25.682285  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.682348  1  2 fcl2jsondb() key=<source>
09-16 14:45:25.682379  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:2.5e6 resume_after_timeout:true fragment_type_map:[[1,"missed"],[3,"V1720"],[4,"V1724"],[6,"TOY1"],[7,"TOY2"],[8,"ASCII"]]}>
09-16 14:45:25.682393  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.682417  1  2 fcl2jsondb() key=<module_type>
09-16 14:45:25.682421  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:45:25.682433  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.682454  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:45:25.682458  1  2 fcl2jsondb() value=<2.5e6>
09-16 14:45:25.682470  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.683871  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:45:25.683878  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.683893  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.683918  1  2 fcl2jsondb() key=<fragment_type_map>
09-16 14:45:25.683939  1  2 fcl2jsondb() value=<[[1,"missed"],[3,"V1720"],[4,"V1724"],[6,"TOY1"],[7,"TOY2"],[8,"ASCII"]]>
09-16 14:45:25.683952  1  2 fcl2jsondb() value type=<sequence>
09-16 14:45:25.688343  1  2 fcl2jsondb() key=<process_name>
09-16 14:45:25.688350  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:45:25.688364  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.688378  1  2 read_data() end
09-16 14:45:25.688404  1  2 read_data end result=1
09-16 14:45:25.688408  1  2 fhicl_to_json: write() begin
09-16 14:45:25.700243  1  2 fhicl_to_json: write() end
09-16 14:45:25.700254  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_005_t" end time: Sep 16 14:45 CDT
"Convert_Fhicl2DBJson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

49/65 Testing: Convert_Fhicl2DBJson_007_t
49/65 Test: Convert_Fhicl2DBJson_007_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/Convert_Fhicl2DBJson_007_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/test007.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/test007.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test007.fcl" "-c" "test007.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/Convert_Fhicl2DBJson_007_t.d
"Convert_Fhicl2DBJson_007_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.630377  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:45:25.630491  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:45:25.630513  1  0 artdaq::database::fhicljson trace_enable
09-16 14:45:25.630534  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:45:25.633227  1  2 fhicl_to_json: begin
09-16 14:45:25.633514  1  2 fhicl_to_json: Created root nodes
09-16 14:45:25.633612  1  2 read_comments begin
09-16 14:45:25.641436  1  2 read_comments end result=1
09-16 14:45:25.641452  1  2 read_data begin
09-16 14:45:25.641467  1  2 read_data() begin
09-16 14:45:25.693265  1  2 parse_document() returned 86 entries.
09-16 14:45:25.693383  1  2 fcl2jsondb() key=<fhicl_pound_include_0>
09-16 14:45:25.693393  1  2 fcl2jsondb() value=<"metrics.fcl">
09-16 14:45:25.693458  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.693513  1  2 fcl2jsondb() key=<rce_standard>
09-16 14:45:25.693562  1  2 fcl2jsondb() value=<{metrics:"@local::metrics" max_fragment_size_words:1.048576e6 fragment_receiver:{mpi_buffer_count:16 mpi_sync_interval:24000 first_event_builder_rank:-1 event_builder_count:-1 generator:"TpcRceReceiver" fragment_type:"TPC" sleep_on_stop_us:0 number_of_microslices_per_millislice:10 rce_client_host_port:8090 rce_client_timeout_usecs:500000 rce_xml_config_file:"config/defaults.xml" rce_daq_mode:"Trigger" rce_feb_emulation_mode:false receiver_debug_level:0 receiver_tick_period_usecs:10000 reporting_interval_fragments:100 reporting_interval_time:10 raw_buffer_size:1.6e7 raw_buffer_precommit:100 use_fragments_as_raw_buffer:true data_timeout_usecs:3e7}}>
09-16 14:45:25.693587  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.693623  1  2 fcl2jsondb() key=<metrics>
09-16 14:45:25.693628  1  2 fcl2jsondb() value=<"@local::metrics">
09-16 14:45:25.693641  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.693664  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:45:25.693669  1  2 fcl2jsondb() value=<1.048576e6>
09-16 14:45:25.693682  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.694653  1  2 fcl2jsondb() key=<fragment_receiver>
09-16 14:45:25.694676  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 mpi_sync_interval:24000 first_event_builder_rank:-1 event_builder_count:-1 generator:"TpcRceReceiver" fragment_type:"TPC" sleep_on_stop_us:0 number_of_microslices_per_millislice:10 rce_client_host_port:8090 rce_client_timeout_usecs:500000 rce_xml_config_file:"config/defaults.xml" rce_daq_mode:"Trigger" rce_feb_emulation_mode:false receiver_debug_level:0 receiver_tick_period_usecs:10000 reporting_interval_fragments:100 reporting_interval_time:10 raw_buffer_size:1.6e7 raw_buffer_precommit:100 use_fragments_as_raw_buffer:true data_timeout_usecs:3e7}>
09-16 14:45:25.694693  1  2 fcl2jsondb() value type=<table>
09-16 14:45:25.694714  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:45:25.694719  1  2 fcl2jsondb() value=<16>
09-16 14:45:25.694732  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.695541  1  2 fcl2jsondb() key=<mpi_sync_interval>
09-16 14:45:25.695548  1  2 fcl2jsondb() value=<24000>
09-16 14:45:25.695564  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.696330  1  2 fcl2jsondb() key=<first_event_builder_rank>
09-16 14:45:25.696337  1  2 fcl2jsondb() value=<-1>
09-16 14:45:25.696442  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.697200  1  2 fcl2jsondb() key=<event_builder_count>
09-16 14:45:25.697206  1  2 fcl2jsondb() value=<-1>
09-16 14:45:25.697221  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.697984  1  2 fcl2jsondb() key=<generator>
09-16 14:45:25.697990  1  2 fcl2jsondb() value=<"TpcRceReceiver">
09-16 14:45:25.698005  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.698025  1  2 fcl2jsondb() key=<fragment_type>
09-16 14:45:25.698029  1  2 fcl2jsondb() value=<"TPC">
09-16 14:45:25.698042  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.698061  1  2 fcl2jsondb() key=<sleep_on_stop_us>
09-16 14:45:25.698065  1  2 fcl2jsondb() value=<0>
09-16 14:45:25.698133  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.698880  1  2 fcl2jsondb() key=<number_of_microslices_per_millislice>
09-16 14:45:25.698887  1  2 fcl2jsondb() value=<10>
09-16 14:45:25.698903  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.699677  1  2 fcl2jsondb() key=<rce_client_host_port>
09-16 14:45:25.699683  1  2 fcl2jsondb() value=<8090>
09-16 14:45:25.699698  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.700500  1  2 fcl2jsondb() key=<rce_client_timeout_usecs>
09-16 14:45:25.700506  1  2 fcl2jsondb() value=<500000>
09-16 14:45:25.700521  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.701268  1  2 fcl2jsondb() key=<rce_xml_config_file>
09-16 14:45:25.701274  1  2 fcl2jsondb() value=<"config/defaults.xml">
09-16 14:45:25.701346  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.701370  1  2 fcl2jsondb() key=<rce_daq_mode>
09-16 14:45:25.701375  1  2 fcl2jsondb() value=<"Trigger">
09-16 14:45:25.701523  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.701548  1  2 fcl2jsondb() key=<rce_feb_emulation_mode>
09-16 14:45:25.701553  1  2 fcl2jsondb() value=<false>
09-16 14:45:25.701630  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.701686  1  2 fcl2jsondb() key=<receiver_debug_level>
09-16 14:45:25.701692  1  2 fcl2jsondb() value=<0>
09-16 14:45:25.701706  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.702578  1  2 fcl2jsondb() key=<receiver_tick_period_usecs>
09-16 14:45:25.702585  1  2 fcl2jsondb() value=<10000>
09-16 14:45:25.702600  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.703376  1  2 fcl2jsondb() key=<reporting_interval_fragments>
09-16 14:45:25.703382  1  2 fcl2jsondb() value=<100>
09-16 14:45:25.703400  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.704175  1  2 fcl2jsondb() key=<reporting_interval_time>
09-16 14:45:25.704181  1  2 fcl2jsondb() value=<10>
09-16 14:45:25.704196  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.705596  1  2 fcl2jsondb() key=<raw_buffer_size>
09-16 14:45:25.705604  1  2 fcl2jsondb() value=<1.6e7>
09-16 14:45:25.705619  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.706392  1  2 fcl2jsondb() key=<raw_buffer_precommit>
09-16 14:45:25.706403  1  2 fcl2jsondb() value=<100>
09-16 14:45:25.706445  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.707204  1  2 fcl2jsondb() key=<use_fragments_as_raw_buffer>
09-16 14:45:25.707210  1  2 fcl2jsondb() value=<true>
09-16 14:45:25.707226  1  2 fcl2jsondb() value type=<bool>
09-16 14:45:25.707247  1  2 fcl2jsondb() key=<data_timeout_usecs>
09-16 14:45:25.707252  1  2 fcl2jsondb() value=<3e7>
09-16 14:45:25.707264  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.708122  1  2 fcl2jsondb() key=<daq>
09-16 14:45:25.708133  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.708149  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.708165  1  2 fcl2jsondb() key=<fhicl_pound_include_1>
09-16 14:45:25.708169  1  2 fcl2jsondb() value=<"rce_expert_run_options.fcl">
09-16 14:45:25.708180  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.708193  1  2 fcl2jsondb() key=<fhicl_pound_include_2>
09-16 14:45:25.708197  1  2 fcl2jsondb() value=<"user_run_options.fcl">
09-16 14:45:25.708208  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.708230  1  2 fcl2jsondb() key=<rce_standard>
09-16 14:45:25.708234  1  2 fcl2jsondb() value=<"@local::daq">
09-16 14:45:25.708247  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.708261  1  2 fcl2jsondb() key=<rce00_standard>
09-16 14:45:25.708265  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.708277  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.708291  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.fragment_id>
09-16 14:45:25.708295  1  2 fcl2jsondb() value=<100>
09-16 14:45:25.708307  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.709068  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.board_id>
09-16 14:45:25.709074  1  2 fcl2jsondb() value=<0>
09-16 14:45:25.709090  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.709872  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.709878  1  2 fcl2jsondb() value=<"10.0.1.191">
09-16 14:45:25.709894  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.709909  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.receive_port>
09-16 14:45:25.709913  1  2 fcl2jsondb() value=<7991>
09-16 14:45:25.709926  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.710692  1  2 fcl2jsondb() key=<rce01_standard>
09-16 14:45:25.710698  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.710713  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.710727  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.fragment_id>
09-16 14:45:25.710731  1  2 fcl2jsondb() value=<101>
09-16 14:45:25.710744  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.711534  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.board_id>
09-16 14:45:25.711540  1  2 fcl2jsondb() value=<1>
09-16 14:45:25.711555  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.712287  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.712293  1  2 fcl2jsondb() value=<"10.0.1.192">
09-16 14:45:25.712307  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.712331  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.receive_port>
09-16 14:45:25.712336  1  2 fcl2jsondb() value=<7992>
09-16 14:45:25.712361  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.713137  1  2 fcl2jsondb() key=<rce02_standard>
09-16 14:45:25.713143  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.713157  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.713172  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.fragment_id>
09-16 14:45:25.713176  1  2 fcl2jsondb() value=<102>
09-16 14:45:25.713189  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.713979  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.board_id>
09-16 14:45:25.713985  1  2 fcl2jsondb() value=<2>
09-16 14:45:25.714000  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.714758  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.714764  1  2 fcl2jsondb() value=<"10.0.1.193">
09-16 14:45:25.714779  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.714794  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.receive_port>
09-16 14:45:25.714798  1  2 fcl2jsondb() value=<7993>
09-16 14:45:25.714810  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.715625  1  2 fcl2jsondb() key=<rce03_standard>
09-16 14:45:25.715631  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.715646  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.715662  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.fragment_id>
09-16 14:45:25.715666  1  2 fcl2jsondb() value=<103>
09-16 14:45:25.715678  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.716448  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.board_id>
09-16 14:45:25.716454  1  2 fcl2jsondb() value=<3>
09-16 14:45:25.716469  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.717215  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.717221  1  2 fcl2jsondb() value=<"10.0.1.194">
09-16 14:45:25.717236  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.717251  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.receive_port>
09-16 14:45:25.717255  1  2 fcl2jsondb() value=<7994>
09-16 14:45:25.717267  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.718030  1  2 fcl2jsondb() key=<rce04_standard>
09-16 14:45:25.718036  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.718051  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.718066  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:45:25.718070  1  2 fcl2jsondb() value=<104>
09-16 14:45:25.718082  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.718852  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.board_id>
09-16 14:45:25.718858  1  2 fcl2jsondb() value=<4>
09-16 14:45:25.718873  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.719623  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.719629  1  2 fcl2jsondb() value=<"10.0.1.195">
09-16 14:45:25.719644  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.719659  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.receive_port>
09-16 14:45:25.719664  1  2 fcl2jsondb() value=<7995>
09-16 14:45:25.719676  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.720459  1  2 fcl2jsondb() key=<rce05_standard>
09-16 14:45:25.720465  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.720478  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.720493  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:45:25.720498  1  2 fcl2jsondb() value=<105>
09-16 14:45:25.720510  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.721274  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.board_id>
09-16 14:45:25.721280  1  2 fcl2jsondb() value=<5>
09-16 14:45:25.721295  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.722082  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.722089  1  2 fcl2jsondb() value=<"10.0.1.196">
09-16 14:45:25.722103  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.722119  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.receive_port>
09-16 14:45:25.722123  1  2 fcl2jsondb() value=<7996>
09-16 14:45:25.722135  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.722891  1  2 fcl2jsondb() key=<rce06_standard>
09-16 14:45:25.722897  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.722912  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.722927  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.fragment_id>
09-16 14:45:25.722931  1  2 fcl2jsondb() value=<106>
09-16 14:45:25.722943  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.723724  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.board_id>
09-16 14:45:25.723730  1  2 fcl2jsondb() value=<6>
09-16 14:45:25.723745  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.724496  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.724502  1  2 fcl2jsondb() value=<"10.0.1.197">
09-16 14:45:25.724516  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.724532  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.receive_port>
09-16 14:45:25.724536  1  2 fcl2jsondb() value=<7997>
09-16 14:45:25.724548  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.725376  1  2 fcl2jsondb() key=<rce07_standard>
09-16 14:45:25.725382  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.725401  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.725426  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.fragment_id>
09-16 14:45:25.725431  1  2 fcl2jsondb() value=<107>
09-16 14:45:25.725444  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.726238  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.board_id>
09-16 14:45:25.726245  1  2 fcl2jsondb() value=<7>
09-16 14:45:25.726270  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.727046  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.727054  1  2 fcl2jsondb() value=<"10.0.1.198">
09-16 14:45:25.727069  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.727085  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.receive_port>
09-16 14:45:25.727090  1  2 fcl2jsondb() value=<7998>
09-16 14:45:25.727113  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.727922  1  2 fcl2jsondb() key=<rce08_standard>
09-16 14:45:25.727929  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.727953  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.727970  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.fragment_id>
09-16 14:45:25.727974  1  2 fcl2jsondb() value=<108>
09-16 14:45:25.727996  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.728800  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.board_id>
09-16 14:45:25.728808  1  2 fcl2jsondb() value=<8>
09-16 14:45:25.728823  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.729586  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.729593  1  2 fcl2jsondb() value=<"10.0.1.181">
09-16 14:45:25.729609  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.729625  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.receive_port>
09-16 14:45:25.729629  1  2 fcl2jsondb() value=<8991>
09-16 14:45:25.729642  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.730436  1  2 fcl2jsondb() key=<rce09_standard>
09-16 14:45:25.730443  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.730468  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.730484  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.fragment_id>
09-16 14:45:25.730489  1  2 fcl2jsondb() value=<109>
09-16 14:45:25.730502  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.731264  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.board_id>
09-16 14:45:25.731271  1  2 fcl2jsondb() value=<9>
09-16 14:45:25.731296  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.732067  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.732074  1  2 fcl2jsondb() value=<"10.0.1.182">
09-16 14:45:25.732089  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.732105  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.receive_port>
09-16 14:45:25.732109  1  2 fcl2jsondb() value=<8992>
09-16 14:45:25.732122  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.732895  1  2 fcl2jsondb() key=<rce10_standard>
09-16 14:45:25.732902  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.732918  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.732933  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.fragment_id>
09-16 14:45:25.732938  1  2 fcl2jsondb() value=<110>
09-16 14:45:25.732951  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.733745  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.board_id>
09-16 14:45:25.733752  1  2 fcl2jsondb() value=<10>
09-16 14:45:25.733767  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.734524  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.734531  1  2 fcl2jsondb() value=<"10.0.1.183">
09-16 14:45:25.734546  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.734562  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.receive_port>
09-16 14:45:25.734567  1  2 fcl2jsondb() value=<8993>
09-16 14:45:25.734579  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.735335  1  2 fcl2jsondb() key=<rce11_standard>
09-16 14:45:25.735342  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.735366  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.735383  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.fragment_id>
09-16 14:45:25.735388  1  2 fcl2jsondb() value=<111>
09-16 14:45:25.735405  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.736184  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.board_id>
09-16 14:45:25.736191  1  2 fcl2jsondb() value=<11>
09-16 14:45:25.736207  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.736988  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.736995  1  2 fcl2jsondb() value=<"10.0.1.184">
09-16 14:45:25.737011  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.737026  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.receive_port>
09-16 14:45:25.737031  1  2 fcl2jsondb() value=<8994>
09-16 14:45:25.737043  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.737811  1  2 fcl2jsondb() key=<rce12_standard>
09-16 14:45:25.737818  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.737833  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.737849  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.fragment_id>
09-16 14:45:25.737853  1  2 fcl2jsondb() value=<112>
09-16 14:45:25.737866  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.738634  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.board_id>
09-16 14:45:25.738641  1  2 fcl2jsondb() value=<12>
09-16 14:45:25.738666  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.739510  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.739518  1  2 fcl2jsondb() value=<"10.0.1.185">
09-16 14:45:25.739543  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.739578  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.receive_port>
09-16 14:45:25.739584  1  2 fcl2jsondb() value=<8995>
09-16 14:45:25.739597  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.740401  1  2 fcl2jsondb() key=<rce13_standard>
09-16 14:45:25.740408  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.740434  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.740451  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.fragment_id>
09-16 14:45:25.740456  1  2 fcl2jsondb() value=<113>
09-16 14:45:25.740488  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.741252  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.board_id>
09-16 14:45:25.741259  1  2 fcl2jsondb() value=<13>
09-16 14:45:25.741275  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.742056  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.742063  1  2 fcl2jsondb() value=<"10.0.1.186">
09-16 14:45:25.742079  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.742094  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.receive_port>
09-16 14:45:25.742099  1  2 fcl2jsondb() value=<8996>
09-16 14:45:25.742112  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.742887  1  2 fcl2jsondb() key=<rce14_standard>
09-16 14:45:25.742894  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.742909  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.742925  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.fragment_id>
09-16 14:45:25.742930  1  2 fcl2jsondb() value=<114>
09-16 14:45:25.742943  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.743721  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.board_id>
09-16 14:45:25.743729  1  2 fcl2jsondb() value=<14>
09-16 14:45:25.743744  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.744529  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.744536  1  2 fcl2jsondb() value=<"10.0.1.187">
09-16 14:45:25.744552  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.744577  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.receive_port>
09-16 14:45:25.744582  1  2 fcl2jsondb() value=<8997>
09-16 14:45:25.744614  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.745383  1  2 fcl2jsondb() key=<rce15_standard>
09-16 14:45:25.745390  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:45:25.745409  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.745425  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.fragment_id>
09-16 14:45:25.745431  1  2 fcl2jsondb() value=<115>
09-16 14:45:25.745443  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.746211  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.board_id>
09-16 14:45:25.746217  1  2 fcl2jsondb() value=<15>
09-16 14:45:25.746242  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.747039  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.rce_client_host_addr>
09-16 14:45:25.747046  1  2 fcl2jsondb() value=<"10.0.1.188">
09-16 14:45:25.747062  1  2 fcl2jsondb() value type=<string>
09-16 14:45:25.747077  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.receive_port>
09-16 14:45:25.747083  1  2 fcl2jsondb() value=<8998>
09-16 14:45:25.747095  1  2 fcl2jsondb() value type=<number>
09-16 14:45:25.747897  1  2 read_data() end
09-16 14:45:25.747925  1  2 read_data end result=1
09-16 14:45:25.747931  1  2 fhicl_to_json: write() begin
09-16 14:45:25.764761  1  2 fhicl_to_json: write() end
09-16 14:45:25.764772  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_007_t" end time: Sep 16 14:45 CDT
"Convert_Fhicl2DBJson_007_t" time elapsed: 00:00:00
----------------------------------------------------------

53/65 Testing: MongoJson_update_003_t
53/65 Test: MongoJson_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test003/MongoJson_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.cmp.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.update.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "update" "-o" "test003.update.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test003/MongoJson_update_003_t.d
"MongoJson_update_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.644897  1  0 artdaq::database::mongo trace_enable
09-16 14:45:25.645062  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.649004  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.649821  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:25.789849  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba34237a97a1"
}
09-16 14:45:25.789901  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:25.789906  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4bd51a72ba34237a97a1"
}, "collection":"testJSON_V001"}>
09-16 14:45:25.789972  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4bd51a72ba34237a97a1"
}>
09-16 14:45:25.790062  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba34237a97a1"
            }
        ]
    }
}>
09-16 14:45:25.790457  1  3 found_count=1
09-16 14:45:25.791044  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba34237a97a1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.791164  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba34237a97a1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.791171  1  3 deleteChild() args  path=<_id>
09-16 14:45:25.795276  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.798036  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4bd51a72ba34237a97a1"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.798103  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:25.798390  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.798469  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4bd51a72ba34237a97a1"
}>
09-16 14:45:25.798477  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.798549  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.798555  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.798559  1  4 replaceChild() args  path=<document>
09-16 14:45:25.799236  1  4 replaceChild() new child value=object(...)
09-16 14:45:25.799246  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:25.799532  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.799574  1  4 replaceChild() found child value=object(...)
09-16 14:45:25.799797  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.800051  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.800058  1  4 replaceChild() Replace succeeded.
09-16 14:45:25.800115  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.800169  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4bd51a72ba34237a97a1"
}>
09-16 14:45:25.800189  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba34237a97a1"
            }
        ]
    }
}>
09-16 14:45:25.800942  1  8 modified_count=1
09-16 14:45:25.800959  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:25.800963  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4bd51a72ba34237a97a1"
}, "collection":"testJSON_V001"}>
09-16 14:45:25.801000  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4bd51a72ba34237a97a1"
}>
09-16 14:45:25.801018  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba34237a97a1"
            }
        ]
    }
}>
09-16 14:45:25.801267  1  3 found_count=1
09-16 14:45:25.801626  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba34237a97a1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.801698  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba34237a97a1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.801703  1  3 deleteChild() args  path=<_id>
09-16 14:45:25.802092  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.802383  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4bd51a72ba34237a97a1"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.802446  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:25.802670  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.802748  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4bd51a72ba34237a97a1"
}>
09-16 14:45:25.802753  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.802782  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.802788  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.803448  1 10 matches() JSON buffers are equal.
Running test:<update>
Search criteria {"filter":{
    "$oid" : "57dc4bd51a72ba34237a97a1"
}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"MongoJson_update_003_t" end time: Sep 16 14:45 CDT
"MongoJson_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

51/65 Testing: MongoJson_insert_001_t
51/65 Test: MongoJson_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test001/MongoJson_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test001/test001.cmp.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test001/MongoJson_insert_001_t.d
"MongoJson_insert_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.638810  1  0 artdaq::database::mongo trace_enable
09-16 14:45:25.638972  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.641693  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.642183  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:25.789848  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba341c31f611"
}
09-16 14:45:25.789901  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:25.789906  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4bd51a72ba341c31f611"
}, "collection":"testJSON_V001"}>
09-16 14:45:25.789972  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4bd51a72ba341c31f611"
}>
09-16 14:45:25.790062  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba341c31f611"
            }
        ]
    }
}>
09-16 14:45:25.790459  1  3 found_count=1
09-16 14:45:25.791043  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba341c31f611"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:45:25.791171  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba341c31f611"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:45:25.791178  1  3 deleteChild() args  path=<_id>
09-16 14:45:25.795311  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.798054  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4bd51a72ba341c31f611"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:45:25.798110  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:25.798424  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:45:25.798497  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4bd51a72ba341c31f611"
}>
09-16 14:45:25.798504  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.798547  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:45:25.798555  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:45:25.799711  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{
    "$oid" : "57dc4bd51a72ba341c31f611"
}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"MongoJson_insert_001_t" end time: Sep 16 14:45 CDT
"MongoJson_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

50/65 Testing: Convert_DBJson2Fhicl_008_t
50/65 Test: Convert_DBJson2Fhicl_008_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/Convert_DBJson2Fhicl_008_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/test008.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/test008.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test008.json" "-c" "test008.fcl" "-t" "Convert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/Convert_DBJson2Fhicl_008_t.d
"Convert_DBJson2Fhicl_008_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.630384  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:45:25.630495  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:45:25.630518  1  0 artdaq::database::fhicljson trace_enable
09-16 14:45:25.630538  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:45:25.631940  1  3 json_to_fhicl: begin
09-16 14:45:25.631964  1  3 json_to_fhicl: Reading json root nodes
09-16 14:45:25.643898  1  2 write_data() begin
09-16 14:45:25.644031  1  2 json2fcldb() key=<fhicl_pound_include_0> type=<string>
09-16 14:45:25.644043  1  2 json2fcldb() name override to #include
09-16 14:45:25.644168  1  2 json2fcldb() key=<rce_standard> type=<table>
09-16 14:45:25.644240  1  2 json2fcldb() key=<metrics> type=<string>
09-16 14:45:25.644262  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:45:25.644318  1  2 json2fcldb() key=<fragment_receiver> type=<table>
09-16 14:45:25.644329  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:45:25.644340  1  2 json2fcldb() key=<mpi_sync_interval> type=<number>
09-16 14:45:25.644406  1  2 json2fcldb() key=<daq> type=<string>
09-16 14:45:25.644419  1  2 json2fcldb() key=<fhicl_pound_include_1> type=<string>
09-16 14:45:25.644423  1  2 json2fcldb() name override to #include
09-16 14:45:25.644433  1  2 json2fcldb() key=<fhicl_pound_include_2> type=<string>
09-16 14:45:25.644437  1  2 json2fcldb() name override to #include
09-16 14:45:25.644446  1  2 json2fcldb() key=<rce_standard> type=<table>
09-16 14:45:25.644454  1  2 json2fcldb() type override to string
09-16 14:45:25.644471  1  2 json2fcldb() key=<rce04_standard> type=<string>
09-16 14:45:25.644482  1  2 json2fcldb() key=<rce04_standard.fragment_receiver.fragment_id> type=<number>
09-16 14:45:25.644494  1  2 json2fcldb() key=<rce04_standard.fragment_receiver.board_id> type=<number>
09-16 14:45:25.646717  1  2 json2fcldb() key=<rce05_standard> type=<string>
09-16 14:45:25.646746  1  2 json2fcldb() key=<rce05_standard.fragment_receiver.fragment_id> type=<number>
09-16 14:45:25.646762  1  2 json2fcldb() key=<rce05_standard.fragment_receiver.board_id> type=<number>
09-16 14:45:25.649014  1  2 write_data() end
09-16 14:45:25.649040  1  3 json_to_fhicl: fcl=<BEGIN_PROLOG
 
#include "metrics.fcl" 
rce_standard: {
 
metrics: @local::metrics  
 
max_fragment_size_words: 1048576  
 
fragment_receiver: {
 
mpi_buffer_count: 16  
 
mpi_sync_interval: 24000  

}
} 
daq: @local::rce_standard  
 
#include "rce_expert_run_options.fcl" 
#include "user_run_options.fcl" 
rce_standard: @local::daq 
rce04_standard: @local::rce_standard  
 
rce04_standard.fragment_receiver.fragment_id: 104  
 
rce04_standard.fragment_receiver.board_id: 4  

END_PROLOG
 
rce05_standard: @local::rce_standard  
 
rce05_standard.fragment_receiver.fragment_id: 105  
 
rce05_standard.fragment_receiver.board_id: 5  
>
09-16 14:45:25.649045  1  3 json_to_fhicl: end
Running test:<Convert_DBJson2Fhicl>
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2Fhicl_008_t" end time: Sep 16 14:45 CDT
"Convert_DBJson2Fhicl_008_t" time elapsed: 00:00:00
----------------------------------------------------------

52/65 Testing: MongoJson_search1_002_t
52/65 Test: MongoJson_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/MongoJson_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.src.502.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.cmp.502.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.opts.502.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test002.src.502.json" "-c" "test002.cmp.502.json" "-t" "search1" "-o" "test002.opts.502.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/MongoJson_search1_002_t.d
"MongoJson_search1_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.638810  1  0 artdaq::database::mongo trace_enable
09-16 14:45:25.638972  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.641691  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.642183  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:25.789848  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba341f576991"
}
09-16 14:45:25.789902  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:25.789907  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
 "document.data.daq.event_builder.mpi_buffer_count" : 1502
}
, "collection":"testJSON_V001"}>
09-16 14:45:25.789994  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "document.data.daq.event_builder.mpi_buffer_count" : 1502
}>
09-16 14:45:25.790019  1  2 collection_name="testJSON_V001", search filter=<{
    "document.data.daq.event_builder.mpi_buffer_count" : 1502
}>
09-16 14:45:25.790438  1  3 found_count=1
09-16 14:45:25.791044  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba341f576991"
    }, 
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1502, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.791174  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba341f576991"
    }, 
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1502, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.791182  1  3 deleteChild() args  path=<_id>
09-16 14:45:25.795311  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.798036  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4bd51a72ba341f576991"
},
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1502,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.798103  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:25.798429  1  3 deleteChild() resultDocument=<{
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1502,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.798503  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4bd51a72ba341f576991"
}>
09-16 14:45:25.798511  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.798551  1 10 operator==() begin _json_buffer=<{
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1502,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.798558  1 10 operator==() args  other.__json_buffer=<{
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1502, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.799612  1 10 matches() JSON buffers are equal.
Running test:<search1>
Search criteria {"filter":{
 "document.data.daq.event_builder.mpi_buffer_count" : 1502
}
, "collection":"testJSON_V001"}
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"MongoJson_search1_002_t" end time: Sep 16 14:45 CDT
"MongoJson_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

60/65 Testing: FileSystemJson_search1_002_t
60/65 Test: FileSystemJson_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/FileSystemJson_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.src.154.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.cmp.154.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.opts.154.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test002.src.154.json" "-c" "test002.cmp.154.json" "-t" "search1" "-o" "test002.opts.154.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/FileSystemJson_search1_002_t.d
"FileSystemJson_search1_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.857878  1  0 artdaq::database::filesystem trace_enable
09-16 14:45:25.858032  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:45:25.858104  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.860605  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:25.860622  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "version154"
}, "collection":"testJSON_V001"}>
09-16 14:45:25.860723  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version154"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.860732  1  5 findChild() args  path=<collection>
09-16 14:45:25.867587  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.876592  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.876665  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:25.876847  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:25.876856  1  5 findChild() Find succeeded.
09-16 14:45:25.879984  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version154"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.880002  1  5 findChild() args  path=<filter>
09-16 14:45:25.881274  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.881998  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.882013  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:25.882812  1 12 StorageProvider::FileSystemDB generate_oid=6c80c9027dd7439188fa6327
09-16 14:45:25.885318  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version154"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.885332  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "6c80c9027dd7439188fa6327"
    }
}>
09-16 14:45:25.885339  1  2 insertChild() args  path=<document._id>
09-16 14:45:25.886948  1  4 insertChild() new child value=object(...)
09-16 14:45:25.886972  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:25.887659  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.887673  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:25.888254  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154"
}>
09-16 14:45:25.888320  1  4 insertChild() found child value=object(...)
09-16 14:45:25.889032  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154",
"_id" : {
"_oid" : "6c80c9027dd7439188fa6327"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.889140  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154",
"_id" : {
"_oid" : "6c80c9027dd7439188fa6327"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.889155  1  4 insertChild() Insert succeeded.
09-16 14:45:25.889224  1  4 StorageProvider::FileSystemDB::store() using generated oid=<6c80c9027dd7439188fa6327>.
09-16 14:45:25.889279  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:25.889322  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.889381  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.889572  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/6c80c9027dd7439188fa6327.json>.
09-16 14:45:25.889633  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154",
"_id" : {
"_oid" : "6c80c9027dd7439188fa6327"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.889642  1  5 findChild() args  path=<document>
09-16 14:45:25.890837  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.891638  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154",
"_id" : {
"_oid" : "6c80c9027dd7439188fa6327"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.891662  1  5 findChild() found child value=object(...)
09-16 14:45:25.892364  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version154",
"_id" : {
"_oid" : "6c80c9027dd7439188fa6327"
}
}
}>
09-16 14:45:25.892373  1  5 findChild() Find succeeded.
09-16 14:45:25.898209  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:25.898220  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:25.898262  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.899058  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:25.899068  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version154", 
        "_id" : {
            "_oid" : "6c80c9027dd7439188fa6327"
        }
    }>.
09-16 14:45:25.899075  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<6c80c9027dd7439188fa6327>.
09-16 14:45:25.900190  1  5 StorageProvider::FileSystemDB::index::addDocument() found 3 keys.
09-16 14:45:25.900222  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:25.900230  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<6c80c9027dd7439188fa6327>.
09-16 14:45:25.900236  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<version154>.
09-16 14:45:25.900437  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:25.900446  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<version>
09-16 14:45:25.900452  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:25.900536  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=configurations
09-16 14:45:25.900561  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:25.900572  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:25.901317  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.906503  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:25.906532  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:25.906537  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{
 "version":"version154"
}
, "collection":"testJSON_V001"}>
09-16 14:45:25.906582  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "version" : "version154"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.906588  1  5 findChild() args  path=<collection>
09-16 14:45:25.906787  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.906909  1  5 findChild() recurse() args currentView=<{
"filter" : {
"version" : "version154"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.906922  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:25.906994  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:25.906999  1  5 findChild() Find succeeded.
09-16 14:45:25.907934  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "version" : "version154"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.907940  1  5 findChild() args  path=<filter>
09-16 14:45:25.908109  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.908218  1  5 findChild() recurse() args currentView=<{
"filter" : {
"version" : "version154"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.908230  1  5 findChild() found child value=object(...)
09-16 14:45:25.908318  1  5 findChild() resultDocument=<{
"filter" : {
"version" : "version154"
}
}>
09-16 14:45:25.908323  1  5 findChild() Find succeeded.
09-16 14:45:25.909288  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:25.909295  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.909305  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.909326  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:25.909330  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:25.981092  1  3 StorageProvider::FileSystemDB::index::_open() json=<>
FileSystemJson_t: /home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/artdaq-database/DataFormats/Json/json_reader.cpp:12: bool artdaq::database::json::JsonReader::read(const string&, artdaq::database::json::object_t&): Assertion `!in.empty()' failed.
Running test:<search1>
Search criteria {"filter":{
 "version":"version154"
}
, "collection":"testJSON_V001"}
09-16 14:45:25.981189  1  1 Caught signal 6 (SIGABRT)
09-16 14:45:25.982599  1  1 Stack trace [15 frames]:
 15 FileSystemJson_t() [0x42da59]
 14 libc.so.6(__libc_start_main+0xf5) [0x7f37874f8b15]
 13 FileSystemJson_t(main+0x9f8) [0x4312f2]
 12 FileSystemJson_t(test_search1(std::string const&, std::string const&, std::string const&)+0x369) [0x432326]
 11 libartdaq-database_StorageProviders_FileSystemDB.so(std::list<artdaq::database::basictypes::JsonData, std::allocator<artdaq::database::basictypes::JsonData> > artdaq::database::StorageProvider<artdaq::database::basictypes::JsonData, artdaq::database::filesystem::FileSystemDB>::load<artdaq::database::basictypes::JsonData>(artdaq::database::basictypes::JsonData const&)+0xa73) [0x7f378be21cdf]
 10 libartdaq-database_StorageProviders_FileSystemDB.so(artdaq::database::filesystem::index::SearchIndex::SearchIndex(boost::filesystem::path const&)+0x5e) [0x7f378bde8b60]
  9 libartdaq-database_StorageProviders_FileSystemDB.so(artdaq::database::filesystem::index::SearchIndex::_open(boost::filesystem::path const&)+0x1080) [0x7f378bdf366e]
  8 libartdaq-database_DataFormats_Json.so(artdaq::database::json::JsonReader::read(std::string const&, artdaq::database::json::object_t&)+0x53) [0x7f378947fcf5]
  7 libc.so.6(+0x2e612) [0x7f3787505612]
  6 libc.so.6(+0x2e566) [0x7f3787505566]
  5 libc.so.6(abort+0x148) [0x7f378750dce8]
  4 libc.so.6(gsignal+0x37) [0x7f378750c5f7]
  3 libc.so.6(+0x35670) [0x7f378750c670]
  2 libartdaq-database_StackTrace.so(debug::signalHandler(int)+0x717) [0x7f378c107e2c]
  1 libartdaq-database_StackTrace.so(debug::getStackTrace()+0x29) [0x7f378c106fe9]
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Failed.
"FileSystemJson_search1_002_t" end time: Sep 16 14:45 CDT
"FileSystemJson_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

56/65 Testing: MongoFhicl_search1_002_t
56/65 Test: MongoFhicl_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/MongoFhicl_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.src.947.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.cmp.947.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.opts.947.json" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test002.src.947.fcl" "-c" "test002.cmp.947.fcl" "-t" "search1" "-o" "test002.opts.947.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/MongoFhicl_search1_002_t.d
"MongoFhicl_search1_002_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.852056  1  0 artdaq::database::mongo trace_enable
09-16 14:45:25.852215  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.899165  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.899542  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.064486  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345c78d501"
}
09-16 14:45:26.064555  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:26.064567  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
 "document.data.main.source.waiting_time" : 1947
}
, "collection":"testFHICL_V001"}>
09-16 14:45:26.064730  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "document.data.main.source.waiting_time" : 1947
}>
09-16 14:45:26.064792  1  2 collection_name="testFHICL_V001", search filter=<{
    "document.data.main.source.waiting_time" : 1947
}>
09-16 14:45:26.065553  1  3 found_count=1
09-16 14:45:26.067802  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345c78d501"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1947
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.068503  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345c78d501"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1947
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.068523  1  3 deleteChild() args  path=<_id>
09-16 14:45:26.079063  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.082178  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4bd51a72ba345c78d501"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1947
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.082301  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:26.085149  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1947
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.085297  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4bd51a72ba345c78d501"
}>
09-16 14:45:26.085311  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.085404  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1947
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.085421  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1947
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.094475  1 10 matches() JSON buffers are equal.
Running test:<search1>
Search criteria {"filter":{
 "document.data.main.source.waiting_time" : 1947
}
, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.28 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_search1_002_t" end time: Sep 16 14:45 CDT
"MongoFhicl_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

57/65 Testing: MongoFhicl_update_003_t
57/65 Test: MongoFhicl_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/MongoFhicl_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.cmp.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.update.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test003.src.fcl" "-c" "test003.cmp.fcl" "-t" "update" "-o" "test003.update.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/MongoFhicl_update_003_t.d
"MongoFhicl_update_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.852056  1  0 artdaq::database::mongo trace_enable
09-16 14:45:25.852215  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.919750  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:25.919761  1  3 deleteChild() args  path=<comments>
09-16 14:45:25.924945  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.926215  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:25.926281  1  3 deleteChild() deleted child value=array(...)
09-16 14:45:25.927331  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:25.927624  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
]
}>
09-16 14:45:25.927633  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.927849  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:45:25.927859  1  3 deleteChild() args  path=<comments>
09-16 14:45:25.930461  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.932745  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:25.932761  1  3 deleteChild() deleted child value=array(...)
09-16 14:45:25.934913  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:25.935037  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:45:25.935043  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.935240  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:45:25.935249  1  3 deleteChild() args  path=<comments>
09-16 14:45:25.937871  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.940121  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:25.940136  1  3 deleteChild() deleted child value=array(...)
09-16 14:45:25.942270  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:25.942397  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:45:25.942403  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.942830  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.943161  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.064643  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345e1627c1"
}
09-16 14:45:26.064708  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:26.064719  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4bd51a72ba345e1627c1"
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.064839  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4bd51a72ba345e1627c1"
}>
09-16 14:45:26.065002  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba345e1627c1"
            }
        ]
    }
}>
09-16 14:45:26.065709  1  3 found_count=1
09-16 14:45:26.067596  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345e1627c1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.068122  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345e1627c1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.068140  1  3 deleteChild() args  path=<_id>
09-16 14:45:26.072367  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.075103  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4bd51a72ba345e1627c1"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.075148  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:26.077619  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.077767  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4bd51a72ba345e1627c1"
}>
09-16 14:45:26.077779  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.077860  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.077873  1  5 findChild() args  path=<document>
09-16 14:45:26.084894  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.090034  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.090101  1  5 findChild() found child value=object(...)
09-16 14:45:26.094881  1  5 findChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
}
}>
09-16 14:45:26.094895  1  5 findChild() Find succeeded.
09-16 14:45:26.095279  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.095294  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                   
09-16 14:45:26.095308  1  4 replaceChild() args  path=<document>
09-16 14:45:26.100220  1  4 replaceChild() new child value=object(...)
09-16 14:45:26.100232  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:26.101595  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.101669  1  4 replaceChild() found child value=object(...)
09-16 14:45:26.104447  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.105449  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.105459  1  4 replaceChild() Replace succeeded.
09-16 14:45:26.105616  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.105697  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4bd51a72ba345e1627c1"
}>
09-16 14:45:26.105721  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba345e1627c1"
            }
        ]
    }
}>
09-16 14:45:26.107517  1  8 modified_count=1
09-16 14:45:26.107540  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:26.107545  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4bd51a72ba345e1627c1"
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.107593  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4bd51a72ba345e1627c1"
}>
09-16 14:45:26.107617  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba345e1627c1"
            }
        ]
    }
}>
09-16 14:45:26.107975  1  3 found_count=1
09-16 14:45:26.109137  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345e1627c1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                              
09-16 14:45:26.109528  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345e1627c1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
            
09-16 14:45:26.109542  1  3 deleteChild() args  path=<_id>
09-16 14:45:26.112788  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.115544  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4bd51a72ba345e1627c1"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.115563  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:26.118154  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.118239  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4bd51a72ba345e1627c1"
}>
09-16 14:45:26.118246  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.118297  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.118308  1 10 operator==() args  other.__json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
Running test:<update>
Search criteria {"filter":{
    "$oid" : "57dc4bd51a72ba345e1627c1"
}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.30 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_update_003_t" end time: Sep 16 14:45 CDT
"MongoFhicl_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

59/65 Testing: FileSystemJson_insert_001_t
59/65 Test: FileSystemJson_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/FileSystemJson_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/test001.cmp.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/FileSystemJson_insert_001_t.d
"FileSystemJson_insert_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.850260  1  0 artdaq::database::filesystem trace_enable
09-16 14:45:25.850419  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:45:25.850490  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.853086  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:25.853106  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}, "collection":"testJSON_V001"}>
09-16 14:45:25.853206  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.853215  1  5 findChild() args  path=<collection>
09-16 14:45:25.860001  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.864635  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.864712  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:25.864948  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:25.864957  1  5 findChild() Find succeeded.
09-16 14:45:25.867782  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.867795  1  5 findChild() args  path=<filter>
09-16 14:45:25.868886  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.869575  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.869590  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:25.870807  1 12 StorageProvider::FileSystemDB generate_oid=4e871eb234594692852754fb
09-16 14:45:25.873275  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.873312  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "4e871eb234594692852754fb"
    }
}>
09-16 14:45:25.873321  1  2 insertChild() args  path=<document._id>
09-16 14:45:25.875236  1  4 insertChild() new child value=object(...)
09-16 14:45:25.875264  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:25.875934  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.875949  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:25.876469  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:45:25.876533  1  4 insertChild() found child value=object(...)
09-16 14:45:25.877245  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "4e871eb234594692852754fb"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.877356  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "4e871eb234594692852754fb"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.877373  1  4 insertChild() Insert succeeded.
09-16 14:45:25.877447  1  4 StorageProvider::FileSystemDB::store() using generated oid=<4e871eb234594692852754fb>.
09-16 14:45:25.877501  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:25.877529  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.878146  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/4e871eb234594692852754fb.json>.
09-16 14:45:25.878208  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "4e871eb234594692852754fb"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.878217  1  5 findChild() args  path=<document>
09-16 14:45:25.880091  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.880901  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "4e871eb234594692852754fb"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.880930  1  5 findChild() found child value=object(...)
09-16 14:45:25.881671  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "4e871eb234594692852754fb"
}
}
}>
09-16 14:45:25.881683  1  5 findChild() Find succeeded.
09-16 14:45:25.887579  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:25.887593  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:25.887917  1  3 StorageProvider::FileSystemDB::index::_open() json=<{"version":{},"configurations.name":{}, "configurable_entity.name":{} }>
09-16 14:45:25.888274  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:25.888284  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \"", 
        "_id" : {
            "_oid" : "4e871eb234594692852754fb"
        }
    }>.
09-16 14:45:25.888292  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<4e871eb234594692852754fb>.
09-16 14:45:25.889435  1  5 StorageProvider::FileSystemDB::index::addDocument() found 3 keys.
09-16 14:45:25.889468  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:25.889474  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<4e871eb234594692852754fb>.
09-16 14:45:25.889481  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<\n AA \">.
09-16 14:45:25.889735  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:25.889744  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<version>
09-16 14:45:25.889749  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:25.889846  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=configurations
09-16 14:45:25.889872  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:25.889882  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:25.890576  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.890697  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:25.890719  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:25.890726  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "4e871eb234594692852754fb"}, "collection":"testJSON_V001"}>
09-16 14:45:25.890877  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "4e871eb234594692852754fb"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.890886  1  5 findChild() args  path=<collection>
09-16 14:45:25.891421  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.891600  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "4e871eb234594692852754fb"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.891617  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:25.891727  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:25.891735  1  5 findChild() Find succeeded.
09-16 14:45:25.893700  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "4e871eb234594692852754fb"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.893710  1  5 findChild() args  path=<filter>
09-16 14:45:25.894067  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.894251  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "4e871eb234594692852754fb"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.894267  1  5 findChild() found child value=object(...)
09-16 14:45:25.894422  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "4e871eb234594692852754fb"
}
}>
09-16 14:45:25.894431  1  5 findChild() Find succeeded.
09-16 14:45:25.897206  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:25.897218  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.897238  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.897277  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:25.897285  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:25.897318  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.898078  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:45:25.898087  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "4e871eb234594692852754fb"
    }>.
09-16 14:45:25.898255  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:45:25.898402  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:45:25.898412  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<4e871eb234594692852754fb>.
09-16 14:45:25.898455  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:45:25.898534  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/4e871eb234594692852754fb.json>.
09-16 14:45:25.898612  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:25.898862  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.898935  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:25.899040  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \"", 
    "_id" : {
        "_oid" : "4e871eb234594692852754fb"
    }
}>
09-16 14:45:25.899050  1  3 deleteChild() args  path=<_id>
09-16 14:45:25.900247  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.900876  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "4e871eb234594692852754fb"
}
}>
09-16 14:45:25.900947  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:25.901443  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:45:25.901518  1  3 deleteChild() deletedChild=<{
"_oid" : "4e871eb234594692852754fb"
}>
09-16 14:45:25.901523  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.901559  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:45:25.901567  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:45:25.902704  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{ "$oid" : "4e871eb234594692852754fb"}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.30 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_insert_001_t" end time: Sep 16 14:45 CDT
"FileSystemJson_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

55/65 Testing: MongoFhicl_insert_001_t
55/65 Test: MongoFhicl_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/MongoFhicl_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/test001.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/test001.cmp.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test001.src.fcl" "-c" "test001.cmp.fcl" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/MongoFhicl_insert_001_t.d
"MongoFhicl_insert_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.845450  1  0 artdaq::database::mongo trace_enable
09-16 14:45:25.845615  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.910917  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.911449  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.064643  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345b43aed1"
}
09-16 14:45:26.064708  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:26.064719  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4bd51a72ba345b43aed1"
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.064839  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4bd51a72ba345b43aed1"
}>
09-16 14:45:26.065002  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba345b43aed1"
            }
        ]
    }
}>
09-16 14:45:26.065680  1  3 found_count=1
09-16 14:45:26.067824  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345b43aed1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.068432  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345b43aed1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.068450  1  3 deleteChild() args  path=<_id>
09-16 14:45:26.079066  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.082238  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4bd51a72ba345b43aed1"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.082332  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:26.085138  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.085279  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4bd51a72ba345b43aed1"
}>
09-16 14:45:26.085294  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.085385  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.085406  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.094634  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{
    "$oid" : "57dc4bd51a72ba345b43aed1"
}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.31 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_insert_001_t" end time: Sep 16 14:45 CDT
"MongoFhicl_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

61/65 Testing: FileSystemJson_update_003_t
61/65 Test: FileSystemJson_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/FileSystemJson_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.cmp.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.update.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "update" "-o" "test003.update.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/FileSystemJson_update_003_t.d
"FileSystemJson_update_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.863466  1  0 artdaq::database::filesystem trace_enable
09-16 14:45:25.863626  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:45:25.863694  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.866213  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:25.866243  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}, "collection":"testJSON_V001"}>
09-16 14:45:25.866387  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.866404  1  5 findChild() args  path=<collection>
09-16 14:45:25.874208  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.878732  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.878878  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:25.879239  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:25.879251  1  5 findChild() Find succeeded.
09-16 14:45:25.882301  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.882318  1  5 findChild() args  path=<filter>
09-16 14:45:25.883524  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.884172  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.884185  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:25.884703  1 12 StorageProvider::FileSystemDB generate_oid=b5c46641ee714acbb367416a
09-16 14:45:25.886876  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.886888  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "b5c46641ee714acbb367416a"
    }
}>
09-16 14:45:25.886895  1  2 insertChild() args  path=<document._id>
09-16 14:45:25.888248  1  4 insertChild() new child value=object(...)
09-16 14:45:25.888267  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:25.888865  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.888878  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:25.889356  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.889417  1  4 insertChild() found child value=object(...)
09-16 14:45:25.890050  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.890156  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.890170  1  4 insertChild() Insert succeeded.
09-16 14:45:25.890233  1  4 StorageProvider::FileSystemDB::store() using generated oid=<b5c46641ee714acbb367416a>.
09-16 14:45:25.890279  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:25.890304  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.890343  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.890500  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b5c46641ee714acbb367416a.json>.
09-16 14:45:25.890560  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.890569  1  5 findChild() args  path=<document>
09-16 14:45:25.891621  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.892284  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.892305  1  5 findChild() found child value=object(...)
09-16 14:45:25.892935  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
}
}>
09-16 14:45:25.892944  1  5 findChild() Find succeeded.
09-16 14:45:25.896963  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:25.896973  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:25.897013  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.897673  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:25.897681  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "_id" : {
            "_oid" : "b5c46641ee714acbb367416a"
        }
    }>.
09-16 14:45:25.897686  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<b5c46641ee714acbb367416a>.
09-16 14:45:25.898178  1  5 StorageProvider::FileSystemDB::index::addDocument() found 2 keys.
09-16 14:45:25.898234  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:25.898239  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:25.898307  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:25.898323  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:25.898330  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:25.898855  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.898934  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:25.898955  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:25.898959  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "b5c46641ee714acbb367416a"}, "collection":"testJSON_V001"}>
09-16 14:45:25.899052  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "b5c46641ee714acbb367416a"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.899059  1  5 findChild() args  path=<collection>
09-16 14:45:25.899239  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.899353  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.899366  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:25.899441  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:25.899447  1  5 findChild() Find succeeded.
09-16 14:45:25.900414  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "b5c46641ee714acbb367416a"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.900421  1  5 findChild() args  path=<filter>
09-16 14:45:25.900602  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.900713  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.900726  1  5 findChild() found child value=object(...)
09-16 14:45:25.900814  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
}
}>
09-16 14:45:25.900820  1  5 findChild() Find succeeded.
09-16 14:45:25.901833  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:25.901840  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.901850  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.901871  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:25.901875  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:25.906521  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.906844  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:45:25.906851  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "b5c46641ee714acbb367416a"
    }>.
09-16 14:45:25.906949  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:45:25.907079  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:45:25.907084  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<b5c46641ee714acbb367416a>.
09-16 14:45:25.907121  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:45:25.907256  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b5c46641ee714acbb367416a.json>.
09-16 14:45:25.907313  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:25.907527  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.981092  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:25.981234  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "_id" : {
        "_oid" : "b5c46641ee714acbb367416a"
    }
}>
09-16 14:45:25.981243  1  3 deleteChild() args  path=<_id>
09-16 14:45:25.982085  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:25.982607  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
}>
09-16 14:45:25.982695  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:25.983073  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.983175  1  3 deleteChild() deletedChild=<{
"_oid" : "b5c46641ee714acbb367416a"
}>
09-16 14:45:25.983183  1  3 deleteChild() Delete succeeded.
09-16 14:45:25.983233  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.983242  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:25.983247  1  4 replaceChild() args  path=<document>
09-16 14:45:25.984180  1  4 replaceChild() new child value=object(...)
09-16 14:45:25.984191  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:25.984622  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.984731  1  4 replaceChild() found child value=object(...)
09-16 14:45:25.985016  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.985347  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.985355  1  4 replaceChild() Replace succeeded.
09-16 14:45:25.985433  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:25.985442  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}, "filter":{ "$oid" : "b5c46641ee714acbb367416a"},"collection":"testJSON_V001"}>
09-16 14:45:25.985501  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "b5c46641ee714acbb367416a"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.985510  1  5 findChild() args  path=<collection>
09-16 14:45:25.986098  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.986515  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.986531  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:25.986627  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:25.986634  1  5 findChild() Find succeeded.
09-16 14:45:25.987883  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "b5c46641ee714acbb367416a"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.987890  1  5 findChild() args  path=<filter>
09-16 14:45:25.988472  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.988880  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.988896  1  5 findChild() found child value=object(...)
09-16 14:45:25.989017  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
}
}>
09-16 14:45:25.989025  1  5 findChild() Find succeeded.
09-16 14:45:25.990394  1  4 StorageProvider::FileSystemDB::store() found filter=<{
        "$oid" : "b5c46641ee714acbb367416a"
    }>.
09-16 14:45:25.991440  1 12 value()JSON regex_search() result=b5c46641ee714acbb367416a
09-16 14:45:25.991457  1  4 StorageProvider::FileSystemDB::store() using provided oid=<b5c46641ee714acbb367416a>.
09-16 14:45:25.992706  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "b5c46641ee714acbb367416a"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:25.992715  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "b5c46641ee714acbb367416a"
    }
}>
09-16 14:45:25.992719  1  2 insertChild() args  path=<document._id>
09-16 14:45:25.993469  1  4 insertChild() new child value=object(...)
09-16 14:45:25.993479  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:25.993869  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.993881  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:25.994170  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:25.994191  1  4 insertChild() found child value=object(...)
09-16 14:45:25.994639  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
},
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.994730  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
},
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.994737  1  4 insertChild() Insert succeeded.
09-16 14:45:25.994776  1  4 StorageProvider::FileSystemDB::store() using generated oid=<b5c46641ee714acbb367416a>.
09-16 14:45:25.994792  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:25.994798  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.994815  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:25.994844  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b5c46641ee714acbb367416a.json>.
09-16 14:45:25.994878  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
},
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.994884  1  5 findChild() args  path=<document>
09-16 14:45:25.995512  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:25.995960  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
},
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:25.995979  1  5 findChild() found child value=object(...)
09-16 14:45:25.996343  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
}
}>
09-16 14:45:25.996349  1  5 findChild() Find succeeded.
09-16 14:45:25.999177  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:25.999186  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:25.999220  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:25.999626  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:25.999636  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "_id" : {
            "_oid" : "b5c46641ee714acbb367416a"
        }
    }>.
09-16 14:45:25.999642  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<b5c46641ee714acbb367416a>.
09-16 14:45:26.000098  1  5 StorageProvider::FileSystemDB::index::addDocument() found 2 keys.
09-16 14:45:26.000134  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:26.000138  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:26.000153  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:26.000160  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:26.000164  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.000348  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.001684  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.001701  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:26.001707  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "b5c46641ee714acbb367416a"}, "collection":"testJSON_V001"}>
09-16 14:45:26.001745  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "b5c46641ee714acbb367416a"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:26.001752  1  5 findChild() args  path=<collection>
09-16 14:45:26.001986  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.002135  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:26.002150  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:26.002240  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:26.002248  1  5 findChild() Find succeeded.
09-16 14:45:26.003414  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "b5c46641ee714acbb367416a"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:26.003422  1  5 findChild() args  path=<filter>
09-16 14:45:26.003661  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.003801  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
},
"collection" : "testJSON_V001"
}>
09-16 14:45:26.003815  1  5 findChild() found child value=object(...)
09-16 14:45:26.003928  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "b5c46641ee714acbb367416a"
}
}>
09-16 14:45:26.003935  1  5 findChild() Find succeeded.
09-16 14:45:26.005202  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:26.005211  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.005223  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.005245  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.005251  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:26.005283  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.005648  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:45:26.005656  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "b5c46641ee714acbb367416a"
    }>.
09-16 14:45:26.005779  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:45:26.005803  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:45:26.005808  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<b5c46641ee714acbb367416a>.
09-16 14:45:26.005819  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:45:26.005833  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b5c46641ee714acbb367416a.json>.
09-16 14:45:26.005878  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.006122  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.013207  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.013285  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "_id" : {
        "_oid" : "b5c46641ee714acbb367416a"
    }
}>
09-16 14:45:26.013293  1  3 deleteChild() args  path=<_id>
09-16 14:45:26.013796  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.014123  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "b5c46641ee714acbb367416a"
}
}>
09-16 14:45:26.014141  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:26.014410  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:26.014501  1  3 deleteChild() deletedChild=<{
"_oid" : "b5c46641ee714acbb367416a"
}>
09-16 14:45:26.014509  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.014550  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:45:26.014558  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:45:26.015518  1 10 matches() JSON buffers are equal.
Running test:<update>
Search criteria {"filter":{ "$oid" : "b5c46641ee714acbb367416a"}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.30 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_update_003_t" end time: Sep 16 14:45 CDT
"FileSystemJson_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

54/65 Testing: MongoJson_search2_004_t
54/65 Test: MongoJson_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test004/MongoJson_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test004/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test004/test004.cmp.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test004/MongoJson_search2_004_t.d
"MongoJson_search2_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.844267  1  0 artdaq::database::mongo trace_enable
09-16 14:45:25.844434  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.847303  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.848333  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:25.857951  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345a65fc01"
}
09-16 14:45:25.858068  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.858366  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:25.866240  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345a65fc02"
}
09-16 14:45:25.866303  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.866598  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:25.874389  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345a65fc03"
}
09-16 14:45:25.874466  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.874796  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:25.882791  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345a65fc04"
}
09-16 14:45:25.882864  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.883178  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:25.890946  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345a65fc05"
}
09-16 14:45:25.891017  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.891309  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.064329  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba345a65fc06"
}
09-16 14:45:26.064357  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.064785  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.075661  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba345a65fc07"
}
09-16 14:45:26.075685  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.076043  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.085934  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba345a65fc08"
}
09-16 14:45:26.085955  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.086292  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.095574  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba345a65fc09"
}
09-16 14:45:26.095597  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.095927  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.101463  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba345a65fc0a"
}
09-16 14:45:26.101493  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:26.101541  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc4bd51a72ba345a65fc01"
},{
    "$oid" : "57dc4bd51a72ba345a65fc02"
},{
    "$oid" : "57dc4bd51a72ba345a65fc03"
},{
    "$oid" : "57dc4bd51a72ba345a65fc04"
},{
    "$oid" : "57dc4bd51a72ba345a65fc05"
},{
    "$oid" : "57dc4bd51a72ba345a65fc06"
},{
    "$oid" : "57dc4bd61a72ba345a65fc07"
},{
    "$oid" : "57dc4bd61a72ba345a65fc08"
},{
    "$oid" : "57dc4bd61a72ba345a65fc09"
},{
    "$oid" : "57dc4bd61a72ba345a65fc0a"
}]} }, "collection":"testJSON_V001"}>
09-16 14:45:26.101709  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba345a65fc01"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc02"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc03"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc04"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc05"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc06"
            }, 
            {
                "$oid" : "57dc4bd61a72ba345a65fc07"
            }, 
            {
                "$oid" : "57dc4bd61a72ba345a65fc08"
            }, 
            {
                "$oid" : "57dc4bd61a72ba345a65fc09"
            }, 
            {
                "$oid" : "57dc4bd61a72ba345a65fc0a"
            }
        ]
    }
}>
09-16 14:45:26.101772  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba345a65fc01"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc02"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc03"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc04"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc05"
            }, 
            {
                "$oid" : "57dc4bd51a72ba345a65fc06"
            }, 
            {
                "$oid" : "57dc4bd61a72ba345a65fc07"
            }, 
            {
                "$oid" : "57dc4bd61a72ba345a65fc08"
            }, 
            {
                "$oid" : "57dc4bd61a72ba345a65fc09"
            }, 
            {
                "$oid" : "57dc4bd61a72ba345a65fc0a"
            }
        ]
    }
}>
09-16 14:45:26.102393  1  3 found_count=10
09-16 14:45:26.129423  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345a65fc01"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.131051  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345a65fc02"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.132479  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345a65fc03"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.133890  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345a65fc04"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.135105  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345a65fc05"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.137183  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba345a65fc06"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.139002  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba345a65fc07"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.140702  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba345a65fc08"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.142351  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba345a65fc09"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:45:26.143989  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba345a65fc0a"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc4bd51a72ba345a65fc01"
},{
    "$oid" : "57dc4bd51a72ba345a65fc02"
},{
    "$oid" : "57dc4bd51a72ba345a65fc03"
},{
    "$oid" : "57dc4bd51a72ba345a65fc04"
},{
    "$oid" : "57dc4bd51a72ba345a65fc05"
},{
    "$oid" : "57dc4bd51a72ba345a65fc06"
},{
    "$oid" : "57dc4bd61a72ba345a65fc07"
},{
    "$oid" : "57dc4bd61a72ba345a65fc08"
},{
    "$oid" : "57dc4bd61a72ba345a65fc09"
},{
    "$oid" : "57dc4bd61a72ba345a65fc0a"
}]} }, "collection":"testJSON_V001"}
<end of output>
Test time =   0.42 sec
----------------------------------------------------------
Test Passed.
"MongoJson_search2_004_t" end time: Sep 16 14:45 CDT
"MongoJson_search2_004_t" time elapsed: 00:00:00
----------------------------------------------------------

58/65 Testing: MongoFhicl_search2_004_t
58/65 Test: MongoFhicl_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/MongoFhicl_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/test004.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/test004.cmp.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test004.src.fcl" "-c" "test004.cmp.fcl" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/MongoFhicl_search2_004_t.d
"MongoFhicl_search2_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:25.845450  1  0 artdaq::database::mongo trace_enable
09-16 14:45:25.845611  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:25.891381  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:25.892161  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.064472  1  5 inserted_id={
    "$oid" : "57dc4bd51a72ba34610879a1"
}
09-16 14:45:26.064554  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.064714  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.066212  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879a2"
}
09-16 14:45:26.066230  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.066345  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.067785  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879a3"
}
09-16 14:45:26.067803  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.067950  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.069555  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879a4"
}
09-16 14:45:26.069572  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.069680  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.071076  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879a5"
}
09-16 14:45:26.071094  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.071217  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.072628  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879a6"
}
09-16 14:45:26.072643  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.072751  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.074051  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879a7"
}
09-16 14:45:26.074065  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.074157  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.075411  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879a8"
}
09-16 14:45:26.075433  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.075561  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.076777  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879a9"
}
09-16 14:45:26.076792  1  4 StorageProvider::MongoDB::store() begin
09-16 14:45:26.076884  1  4 Search filter is missing, proceeding with insert.
09-16 14:45:26.078094  1  5 inserted_id={
    "$oid" : "57dc4bd61a72ba34610879aa"
}
09-16 14:45:26.078123  1  3 StorageProvider::MongoDB::load() begin
09-16 14:45:26.078137  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc4bd51a72ba34610879a1"
},{
    "$oid" : "57dc4bd61a72ba34610879a2"
},{
    "$oid" : "57dc4bd61a72ba34610879a3"
},{
    "$oid" : "57dc4bd61a72ba34610879a4"
},{
    "$oid" : "57dc4bd61a72ba34610879a5"
},{
    "$oid" : "57dc4bd61a72ba34610879a6"
},{
    "$oid" : "57dc4bd61a72ba34610879a7"
},{
    "$oid" : "57dc4bd61a72ba34610879a8"
},{
    "$oid" : "57dc4bd61a72ba34610879a9"
},{
    "$oid" : "57dc4bd61a72ba34610879aa"
}]} }, "collection":"testFHICL_V001"}>
09-16 14:45:26.078298  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba34610879a1"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a2"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a3"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a4"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a5"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a6"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a7"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a8"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a9"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879aa"
            }
        ]
    }
}>
09-16 14:45:26.078353  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4bd51a72ba34610879a1"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a2"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a3"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a4"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a5"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a6"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a7"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a8"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879a9"
            }, 
            {
                "$oid" : "57dc4bd61a72ba34610879aa"
            }
        ]
    }
}>
09-16 14:45:26.078963  1  3 found_count=10
09-16 14:45:26.084380  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd51a72ba34610879a1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.084642  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879a2"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.084868  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879a3"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.085091  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879a4"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.085430  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879a5"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.085815  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879a6"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.086040  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879a7"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.086260  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879a8"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.086484  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879a9"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.086705  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4bd61a72ba34610879aa"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc4bd51a72ba34610879a1"
},{
    "$oid" : "57dc4bd61a72ba34610879a2"
},{
    "$oid" : "57dc4bd61a72ba34610879a3"
},{
    "$oid" : "57dc4bd61a72ba34610879a4"
},{
    "$oid" : "57dc4bd61a72ba34610879a5"
},{
    "$oid" : "57dc4bd61a72ba34610879a6"
},{
    "$oid" : "57dc4bd61a72ba34610879a7"
},{
    "$oid" : "57dc4bd61a72ba34610879a8"
},{
    "$oid" : "57dc4bd61a72ba34610879a9"
},{
    "$oid" : "57dc4bd61a72ba34610879aa"
}]} }, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.42 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_search2_004_t" end time: Sep 16 14:45 CDT
"MongoFhicl_search2_004_t" time elapsed: 00:00:00
----------------------------------------------------------

63/65 Testing: FileSystemFhicl_insert_001_t
63/65 Test: FileSystemFhicl_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/FileSystemFhicl_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/test001.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/test001.cmp.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test001.src.fcl" "-c" "test001.cmp.fcl" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/FileSystemFhicl_insert_001_t.d
"FileSystemFhicl_insert_001_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:26.150943  1  0 artdaq::database::filesystem trace_enable
09-16 14:45:26.151056  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:45:26.151109  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:26.181350  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.181406  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.181756  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.181901  1  5 findChild() args  path=<collection>
09-16 14:45:26.191163  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.192784  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.192877  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.193022  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.193031  1  5 findChild() Find succeeded.
09-16 14:45:26.194079  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.194090  1  5 findChild() args  path=<filter>
09-16 14:45:26.196138  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.197546  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.197559  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.197901  1 12 StorageProvider::FileSystemDB generate_oid=6ac4fc41a40f4dc9ada2b677
09-16 14:45:26.198946  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.198957  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "6ac4fc41a40f4dc9ada2b677"
    }
}>
09-16 14:45:26.198963  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.201124  1  4 insertChild() new child value=object(...)
09-16 14:45:26.201142  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.202993  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.203007  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.204336  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.204386  1  4 insertChild() found child value=object(...)
09-16 14:45:26.206261  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6ac4fc41a40f4dc9ada2b677"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.206379  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6ac4fc41a40f4dc9ada2b677"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.206399  1  4 insertChild() Insert succeeded.
09-16 14:45:26.206470  1  4 StorageProvider::FileSystemDB::store() using generated oid=<6ac4fc41a40f4dc9ada2b677>.
09-16 14:45:26.206510  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.206533  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.206567  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.206675  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/6ac4fc41a40f4dc9ada2b677.json>.
09-16 14:45:26.206728  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6ac4fc41a40f4dc9ada2b677"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.206736  1  5 findChild() args  path=<document>
09-16 14:45:26.208781  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.210191  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6ac4fc41a40f4dc9ada2b677"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.210231  1  5 findChild() found child value=object(...)
09-16 14:45:26.211732  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6ac4fc41a40f4dc9ada2b677"
}
}
}>
09-16 14:45:26.211741  1  5 findChild() Find succeeded.
09-16 14:45:26.220828  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.220837  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.220878  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.221192  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.221202  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "6ac4fc41a40f4dc9ada2b677"
        }
    }>.
09-16 14:45:26.221212  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<6ac4fc41a40f4dc9ada2b677>.
09-16 14:45:26.223087  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.223112  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.223119  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<6ac4fc41a40f4dc9ada2b677>.
09-16 14:45:26.223125  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.223204  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.223211  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<6ac4fc41a40f4dc9ada2b677>.
09-16 14:45:26.223217  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.223248  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.223495  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.223578  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.223604  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:26.223611  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "6ac4fc41a40f4dc9ada2b677"}, "collection":"testFHICL_V001"}>
09-16 14:45:26.223727  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "6ac4fc41a40f4dc9ada2b677"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.223763  1  5 findChild() args  path=<collection>
09-16 14:45:26.223959  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.224077  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "6ac4fc41a40f4dc9ada2b677"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.224093  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.224171  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.224179  1  5 findChild() Find succeeded.
09-16 14:45:26.225071  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "6ac4fc41a40f4dc9ada2b677"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.225079  1  5 findChild() args  path=<filter>
09-16 14:45:26.225277  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.225398  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "6ac4fc41a40f4dc9ada2b677"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.225413  1  5 findChild() found child value=object(...)
09-16 14:45:26.225512  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "6ac4fc41a40f4dc9ada2b677"
}
}>
09-16 14:45:26.225520  1  5 findChild() Find succeeded.
09-16 14:45:26.226795  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.226804  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.226818  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.226844  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.226850  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.226888  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.227608  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:45:26.227616  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "6ac4fc41a40f4dc9ada2b677"
    }>.
09-16 14:45:26.227785  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:45:26.227921  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:45:26.227929  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<6ac4fc41a40f4dc9ada2b677>.
09-16 14:45:26.227965  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:45:26.228113  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/6ac4fc41a40f4dc9ada2b677.json>.
09-16 14:45:26.228317  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.228705  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.228786  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.229039  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ], 
    "_id" : {
        "_oid" : "6ac4fc41a40f4dc9ada2b677"
    }
}>
09-16 14:45:26.229050  1  3 deleteChild() args  path=<_id>
09-16 14:45:26.232584  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.233870  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "6ac4fc41a40f4dc9ada2b677"
}
}>
09-16 14:45:26.233919  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:26.235216  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.235291  1  3 deleteChild() deletedChild=<{
"_oid" : "6ac4fc41a40f4dc9ada2b677"
}>
09-16 14:45:26.235297  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.235337  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.235345  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.239185  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{ "$oid" : "6ac4fc41a40f4dc9ada2b677"}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.41 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_insert_001_t" end time: Sep 16 14:45 CDT
"FileSystemFhicl_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

64/65 Testing: FileSystemFhicl_update_003_t
64/65 Test: FileSystemFhicl_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/FileSystemFhicl_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.cmp.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.update.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test003.src.fcl" "-c" "test003.cmp.fcl" "-t" "update" "-o" "test003.update.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/FileSystemFhicl_update_003_t.d
"FileSystemFhicl_update_003_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:26.150943  1  0 artdaq::database::filesystem trace_enable
09-16 14:45:26.151057  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:45:26.151111  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:26.202831  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:45:26.202843  1  3 deleteChild() args  path=<comments>
09-16 14:45:26.208273  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.209545  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.209659  1  3 deleteChild() deleted child value=array(...)
09-16 14:45:26.210695  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.210972  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
]
}>
09-16 14:45:26.210982  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.211214  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:45:26.211225  1  3 deleteChild() args  path=<comments>
09-16 14:45:26.214062  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.216422  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.216440  1  3 deleteChild() deleted child value=array(...)
09-16 14:45:26.218667  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.218799  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:45:26.218804  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.219014  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:45:26.219025  1  3 deleteChild() args  path=<comments>
09-16 14:45:26.221959  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.224688  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.224707  1  3 deleteChild() deleted child value=array(...)
09-16 14:45:26.226934  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.227066  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:45:26.227072  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.227146  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.227157  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.227283  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.227290  1  5 findChild() args  path=<collection>
09-16 14:45:26.228857  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.230063  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.230094  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.230177  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.230183  1  5 findChild() Find succeeded.
09-16 14:45:26.231248  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.231256  1  5 findChild() args  path=<filter>
09-16 14:45:26.232808  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.233953  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.233963  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.234299  1 12 StorageProvider::FileSystemDB generate_oid=055868b34ada49c6a590f426
09-16 14:45:26.235354  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.235363  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "055868b34ada49c6a590f426"
    }
}>
09-16 14:45:26.235367  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.237070  1  4 insertChild() new child value=object(...)
09-16 14:45:26.237080  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.238225  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.238236  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.239266  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.239307  1  4 insertChild() found child value=object(...)
09-16 14:45:26.240552  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.240662  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.240671  1  4 insertChild() Insert succeeded.
09-16 14:45:26.240731  1  4 StorageProvider::FileSystemDB::store() using generated oid=<055868b34ada49c6a590f426>.
09-16 14:45:26.240772  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.240801  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.240839  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.240972  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/055868b34ada49c6a590f426.json>.
09-16 14:45:26.241030  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.241038  1  5 findChild() args  path=<document>
09-16 14:45:26.242636  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.243831  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.243865  1  5 findChild() found child value=object(...)
09-16 14:45:26.245068  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
}
}>
09-16 14:45:26.245077  1  5 findChild() Find succeeded.
09-16 14:45:26.252269  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.252278  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.252319  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.252686  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.252697  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "055868b34ada49c6a590f426"
        }
    }>.
09-16 14:45:26.252706  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<055868b34ada49c6a590f426>.
09-16 14:45:26.254223  1  5 StorageProvider::FileSystemDB::index::addDocument() found 6 keys.
09-16 14:45:26.254251  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.254258  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<055868b34ada49c6a590f426>.
09-16 14:45:26.254264  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.254353  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.254360  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<055868b34ada49c6a590f426>.
09-16 14:45:26.254366  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.254401  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.254663  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.254759  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.254784  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:26.254790  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "055868b34ada49c6a590f426"}, "collection":"testFHICL_V001"}>
09-16 14:45:26.254887  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "055868b34ada49c6a590f426"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.254894  1  5 findChild() args  path=<collection>
09-16 14:45:26.255070  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.255182  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.255196  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.255270  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.255277  1  5 findChild() Find succeeded.
09-16 14:45:26.256213  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "055868b34ada49c6a590f426"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.256221  1  5 findChild() args  path=<filter>
09-16 14:45:26.256411  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.256552  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.256566  1  5 findChild() found child value=object(...)
09-16 14:45:26.256661  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
}
}>
09-16 14:45:26.256668  1  5 findChild() Find succeeded.
09-16 14:45:26.257665  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.257674  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.257687  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.257709  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.257716  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.257750  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.258161  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:45:26.258169  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "055868b34ada49c6a590f426"
    }>.
09-16 14:45:26.258281  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:45:26.258406  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:45:26.258413  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<055868b34ada49c6a590f426>.
09-16 14:45:26.258446  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:45:26.258559  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/055868b34ada49c6a590f426.json>.
09-16 14:45:26.258674  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.258919  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.258989  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.259112  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ], 
    "_id" : {
        "_oid" : "055868b34ada49c6a590f426"
    }
}>
09-16 14:45:26.259121  1  3 deleteChild() args  path=<_id>
09-16 14:45:26.260717  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.261775  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
}>
09-16 14:45:26.261796  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:26.262844  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.262948  1  3 deleteChild() deletedChild=<{
"_oid" : "055868b34ada49c6a590f426"
}>
09-16 14:45:26.262957  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.263001  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.263010  1  5 findChild() args  path=<document>
09-16 14:45:26.265575  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.267696  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.267735  1  5 findChild() found child value=object(...)
09-16 14:45:26.269790  1  5 findChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
}
}>
09-16 14:45:26.269800  1  5 findChild() Find succeeded.
09-16 14:45:26.270052  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.270063  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                   
09-16 14:45:26.270074  1  4 replaceChild() args  path=<document>
09-16 14:45:26.273841  1  4 replaceChild() new child value=object(...)
09-16 14:45:26.273851  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:45:26.274840  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.274932  1  4 replaceChild() found child value=object(...)
09-16 14:45:26.277089  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.277953  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.277963  1  4 replaceChild() Replace succeeded.
09-16 14:45:26.278155  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.278164  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "filter":{ "$oid" : "055868b34ada49c6a590f426"},"collection":"testFHICL_V001"}>
09-16 14:45:26.278411  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
     
09-16 14:45:26.278425  1  5 findChild() args  path=<collection>
09-16 14:45:26.281361  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.283735  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.283751  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.283851  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.283859  1  5 findChild() Find succeeded.
09-16 14:45:26.284801  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
     
09-16 14:45:26.284816  1  5 findChild() args  path=<filter>
09-16 14:45:26.288031  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.290364  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.290381  1  5 findChild() found child value=object(...)
09-16 14:45:26.290520  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
}
}>
09-16 14:45:26.290528  1  5 findChild() Find succeeded.
09-16 14:45:26.291547  1  4 StorageProvider::FileSystemDB::store() found filter=<{
        "$oid" : "055868b34ada49c6a590f426"
    }>.
09-16 14:45:26.292253  1 12 value()JSON regex_search() result=055868b34ada49c6a590f426
09-16 14:45:26.292269  1  4 StorageProvider::FileSystemDB::store() using provided oid=<055868b34ada49c6a590f426>.
09-16 14:45:26.293227  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
   
09-16 14:45:26.293241  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "055868b34ada49c6a590f426"
    }
}>
09-16 14:45:26.293247  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.296262  1  4 insertChild() new child value=object(...)
09-16 14:45:26.296272  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.298594  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.298607  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.300791  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.300811  1  4 insertChild() found child value=object(...)
09-16 14:45:26.303224  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
},
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.303326  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
},
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.303335  1  4 insertChild() Insert succeeded.
09-16 14:45:26.303387  1  4 StorageProvider::FileSystemDB::store() using generated oid=<055868b34ada49c6a590f426>.
09-16 14:45:26.303404  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.303411  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.303423  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.303446  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/055868b34ada49c6a590f426.json>.
09-16 14:45:26.303479  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
},
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.303489  1  5 findChild() args  path=<document>
09-16 14:45:26.306351  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.308716  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
},
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.308760  1  5 findChild() found child value=object(...)
09-16 14:45:26.311176  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
}
}>
09-16 14:45:26.311185  1  5 findChild() Find succeeded.
09-16 14:45:26.325466  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.325478  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.325540  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.326027  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.326038  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                         
09-16 14:45:26.326055  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<055868b34ada49c6a590f426>.
09-16 14:45:26.328875  1  5 StorageProvider::FileSystemDB::index::addDocument() found 6 keys.
09-16 14:45:26.328888  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.328894  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<055868b34ada49c6a590f426>.
09-16 14:45:26.328899  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.328929  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.328935  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<055868b34ada49c6a590f426>.
09-16 14:45:26.328941  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.328973  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.329255  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"055868b34ada49c6a590f426",
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.329331  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.329353  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:26.329360  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "055868b34ada49c6a590f426"}, "collection":"testFHICL_V001"}>
09-16 14:45:26.329415  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "055868b34ada49c6a590f426"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.329440  1  5 findChild() args  path=<collection>
09-16 14:45:26.329635  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.329748  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.329764  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.329839  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.329846  1  5 findChild() Find succeeded.
09-16 14:45:26.331176  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "055868b34ada49c6a590f426"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.331184  1  5 findChild() args  path=<filter>
09-16 14:45:26.331509  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.331686  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.331700  1  5 findChild() found child value=object(...)
09-16 14:45:26.331834  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "055868b34ada49c6a590f426"
}
}>
09-16 14:45:26.331841  1  5 findChild() Find succeeded.
09-16 14:45:26.334096  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.334105  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.334117  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.334143  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.334149  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.334191  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.334954  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:45:26.334960  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "055868b34ada49c6a590f426"
    }>.
09-16 14:45:26.335052  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:45:26.335069  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:45:26.335072  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<055868b34ada49c6a590f426>.
09-16 14:45:26.335080  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:45:26.335091  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/055868b34ada49c6a590f426.json>.
09-16 14:45:26.335290  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.335565  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.335622  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.335827  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:45:26.335837  1  3 deleteChild() args  path=<_id>
09-16 14:45:26.338762  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:45:26.341051  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "055868b34ada49c6a590f426"
}
}>
09-16 14:45:26.341067  1  3 deleteChild() deleted child value=object(...)
09-16 14:45:26.343317  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.343387  1  3 deleteChild() deletedChild=<{
"_oid" : "055868b34ada49c6a590f426"
}>
09-16 14:45:26.343392  1  3 deleteChild() Delete succeeded.
09-16 14:45:26.343441  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.343449  1 10 operator==() args  other.__json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
Running test:<update>
Search criteria {"filter":{ "$oid" : "055868b34ada49c6a590f426"}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.41 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_update_003_t" end time: Sep 16 14:45 CDT
"FileSystemFhicl_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

65/65 Testing: FileSystemFhicl_search2_004_t
65/65 Test: FileSystemFhicl_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/FileSystemFhicl_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/test004.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/test004.cmp.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test004.src.fcl" "-c" "test004.cmp.fcl" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/FileSystemFhicl_search2_004_t.d
"FileSystemFhicl_search2_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:26.155656  1  0 artdaq::database::filesystem trace_enable
09-16 14:45:26.155759  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:45:26.155807  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:26.184312  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.184345  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.185318  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.185329  1  5 findChild() args  path=<collection>
09-16 14:45:26.190635  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.192266  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.192392  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.192574  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.192581  1  5 findChild() Find succeeded.
09-16 14:45:26.193749  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.193759  1  5 findChild() args  path=<filter>
09-16 14:45:26.195658  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.197036  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.197046  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.197512  1 12 StorageProvider::FileSystemDB generate_oid=ffe7b977d4e040cbaa750614
09-16 14:45:26.198581  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.198590  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "ffe7b977d4e040cbaa750614"
    }
}>
09-16 14:45:26.198594  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.200583  1  4 insertChild() new child value=object(...)
09-16 14:45:26.200601  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.201960  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.201971  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.203191  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.203238  1  4 insertChild() found child value=object(...)
09-16 14:45:26.204635  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "ffe7b977d4e040cbaa750614"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.204710  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "ffe7b977d4e040cbaa750614"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.204722  1  4 insertChild() Insert succeeded.
09-16 14:45:26.204775  1  4 StorageProvider::FileSystemDB::store() using generated oid=<ffe7b977d4e040cbaa750614>.
09-16 14:45:26.204807  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.204826  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.205232  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/ffe7b977d4e040cbaa750614.json>.
09-16 14:45:26.205278  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "ffe7b977d4e040cbaa750614"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.205284  1  5 findChild() args  path=<document>
09-16 14:45:26.207117  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.208532  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "ffe7b977d4e040cbaa750614"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.208561  1  5 findChild() found child value=object(...)
09-16 14:45:26.209940  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "ffe7b977d4e040cbaa750614"
}
}
}>
09-16 14:45:26.209947  1  5 findChild() Find succeeded.
09-16 14:45:26.218295  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.218303  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.218382  1  3 StorageProvider::FileSystemDB::index::_open() json=<{"version":{},"configurations.name":{}, "configurable_entity.name":{} }>
09-16 14:45:26.218551  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.218559  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "ffe7b977d4e040cbaa750614"
        }
    }>.
09-16 14:45:26.218566  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<ffe7b977d4e040cbaa750614>.
09-16 14:45:26.220318  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.220340  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.220343  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<ffe7b977d4e040cbaa750614>.
09-16 14:45:26.220347  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.220427  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.220433  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<ffe7b977d4e040cbaa750614>.
09-16 14:45:26.220436  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.220462  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.220655  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.220738  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.220755  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.220761  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.220894  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.220901  1  5 findChild() args  path=<collection>
09-16 14:45:26.222729  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.224081  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.224093  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.224164  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.224169  1  5 findChild() Find succeeded.
09-16 14:45:26.225075  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.225083  1  5 findChild() args  path=<filter>
09-16 14:45:26.226903  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.228266  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.228275  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.228400  1 12 StorageProvider::FileSystemDB generate_oid=7d967cf7b0c7404c9b266477
09-16 14:45:26.229430  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.229439  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "7d967cf7b0c7404c9b266477"
    }
}>
09-16 14:45:26.229443  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.231379  1  4 insertChild() new child value=object(...)
09-16 14:45:26.231387  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.232812  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.232825  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.234071  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.234088  1  4 insertChild() found child value=object(...)
09-16 14:45:26.236022  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "7d967cf7b0c7404c9b266477"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.236115  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "7d967cf7b0c7404c9b266477"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.236123  1  4 insertChild() Insert succeeded.
09-16 14:45:26.236167  1  4 StorageProvider::FileSystemDB::store() using generated oid=<7d967cf7b0c7404c9b266477>.
09-16 14:45:26.236181  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.236187  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.236202  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.236226  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/7d967cf7b0c7404c9b266477.json>.
09-16 14:45:26.236277  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "7d967cf7b0c7404c9b266477"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.236284  1  5 findChild() args  path=<document>
09-16 14:45:26.239162  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.240830  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "7d967cf7b0c7404c9b266477"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.240858  1  5 findChild() found child value=object(...)
09-16 14:45:26.242236  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "7d967cf7b0c7404c9b266477"
}
}
}>
09-16 14:45:26.242243  1  5 findChild() Find succeeded.
09-16 14:45:26.250468  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.250475  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.250504  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.250843  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.250850  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "7d967cf7b0c7404c9b266477"
        }
    }>.
09-16 14:45:26.330629  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<7d967cf7b0c7404c9b266477>.
09-16 14:45:26.332431  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.332449  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.332453  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<7d967cf7b0c7404c9b266477>.
09-16 14:45:26.332456  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.332506  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.332510  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<7d967cf7b0c7404c9b266477>.
09-16 14:45:26.332513  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.332533  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.332787  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.332859  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.332873  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.332879  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.333019  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.333026  1  5 findChild() args  path=<collection>
09-16 14:45:26.334800  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.336194  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.336217  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.336286  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.336291  1  5 findChild() Find succeeded.
09-16 14:45:26.337162  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.337171  1  5 findChild() args  path=<filter>
09-16 14:45:26.338957  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.340261  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.340270  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.340365  1 12 StorageProvider::FileSystemDB generate_oid=1084e21ee52c4ed28922f7b7
09-16 14:45:26.341315  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.341325  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "1084e21ee52c4ed28922f7b7"
    }
}>
09-16 14:45:26.341328  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.343186  1  4 insertChild() new child value=object(...)
09-16 14:45:26.343195  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.344534  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.344546  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.345845  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.345866  1  4 insertChild() found child value=object(...)
09-16 14:45:26.347231  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1084e21ee52c4ed28922f7b7"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.347313  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1084e21ee52c4ed28922f7b7"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.347320  1  4 insertChild() Insert succeeded.
09-16 14:45:26.347367  1  4 StorageProvider::FileSystemDB::store() using generated oid=<1084e21ee52c4ed28922f7b7>.
09-16 14:45:26.347380  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.347384  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.347401  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.347430  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/1084e21ee52c4ed28922f7b7.json>.
09-16 14:45:26.347500  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1084e21ee52c4ed28922f7b7"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.347507  1  5 findChild() args  path=<document>
09-16 14:45:26.349284  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.350653  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1084e21ee52c4ed28922f7b7"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.350681  1  5 findChild() found child value=object(...)
09-16 14:45:26.352053  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1084e21ee52c4ed28922f7b7"
}
}
}>
09-16 14:45:26.352061  1  5 findChild() Find succeeded.
09-16 14:45:26.360287  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.360294  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.360333  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.360732  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.360741  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "1084e21ee52c4ed28922f7b7"
        }
    }>.
09-16 14:45:26.360746  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<1084e21ee52c4ed28922f7b7>.
09-16 14:45:26.362496  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.362506  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.362509  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<1084e21ee52c4ed28922f7b7>.
09-16 14:45:26.362521  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.362546  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.362552  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<1084e21ee52c4ed28922f7b7>.
09-16 14:45:26.362555  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.362575  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.362872  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.362964  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.362976  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.362991  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.363128  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.363135  1  5 findChild() args  path=<collection>
09-16 14:45:26.364993  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.366313  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.366326  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.366419  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.366425  1  5 findChild() Find succeeded.
09-16 14:45:26.367356  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.367365  1  5 findChild() args  path=<filter>
09-16 14:45:26.369147  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.370492  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.370502  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.370580  1 12 StorageProvider::FileSystemDB generate_oid=a5fece6aee6c429988bbd988
09-16 14:45:26.371514  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.371523  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "a5fece6aee6c429988bbd988"
    }
}>
09-16 14:45:26.371526  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.373436  1  4 insertChild() new child value=object(...)
09-16 14:45:26.373444  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.374758  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.374769  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.375949  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.375965  1  4 insertChild() found child value=object(...)
09-16 14:45:26.377309  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a5fece6aee6c429988bbd988"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.377379  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a5fece6aee6c429988bbd988"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.377385  1  4 insertChild() Insert succeeded.
09-16 14:45:26.377422  1  4 StorageProvider::FileSystemDB::store() using generated oid=<a5fece6aee6c429988bbd988>.
09-16 14:45:26.377432  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.377436  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.377444  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.377459  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/a5fece6aee6c429988bbd988.json>.
09-16 14:45:26.377494  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a5fece6aee6c429988bbd988"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.377500  1  5 findChild() args  path=<document>
09-16 14:45:26.379229  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.380586  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a5fece6aee6c429988bbd988"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.380613  1  5 findChild() found child value=object(...)
09-16 14:45:26.381933  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a5fece6aee6c429988bbd988"
}
}
}>
09-16 14:45:26.381941  1  5 findChild() Find succeeded.
09-16 14:45:26.389877  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.389883  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.389931  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.390372  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.390380  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "a5fece6aee6c429988bbd988"
        }
    }>.
09-16 14:45:26.390386  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<a5fece6aee6c429988bbd988>.
09-16 14:45:26.392087  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.392095  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.392099  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<a5fece6aee6c429988bbd988>.
09-16 14:45:26.392102  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.392118  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.392122  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<a5fece6aee6c429988bbd988>.
09-16 14:45:26.392125  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.392152  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.392454  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.392514  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.392525  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.392531  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.392655  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.392662  1  5 findChild() args  path=<collection>
09-16 14:45:26.394406  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.395738  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.395750  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.395818  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.395823  1  5 findChild() Find succeeded.
09-16 14:45:26.396681  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.396690  1  5 findChild() args  path=<filter>
09-16 14:45:26.398456  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.399775  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.399785  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.399857  1 12 StorageProvider::FileSystemDB generate_oid=1617c84bcb42420589d50396
09-16 14:45:26.400779  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.400788  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "1617c84bcb42420589d50396"
    }
}>
09-16 14:45:26.400792  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.402666  1  4 insertChild() new child value=object(...)
09-16 14:45:26.402674  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.403994  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.404004  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.405159  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.405175  1  4 insertChild() found child value=object(...)
09-16 14:45:26.406492  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1617c84bcb42420589d50396"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.406571  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1617c84bcb42420589d50396"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.406577  1  4 insertChild() Insert succeeded.
09-16 14:45:26.406620  1  4 StorageProvider::FileSystemDB::store() using generated oid=<1617c84bcb42420589d50396>.
09-16 14:45:26.406629  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.406633  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.406641  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.406656  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/1617c84bcb42420589d50396.json>.
09-16 14:45:26.406690  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1617c84bcb42420589d50396"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.406697  1  5 findChild() args  path=<document>
09-16 14:45:26.408469  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.409806  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1617c84bcb42420589d50396"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.409833  1  5 findChild() found child value=object(...)
09-16 14:45:26.411145  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "1617c84bcb42420589d50396"
}
}
}>
09-16 14:45:26.411153  1  5 findChild() Find succeeded.
09-16 14:45:26.419131  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.419137  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.419199  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.419712  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.419720  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "1617c84bcb42420589d50396"
        }
    }>.
09-16 14:45:26.419725  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<1617c84bcb42420589d50396>.
09-16 14:45:26.421490  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.421499  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.421502  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<1617c84bcb42420589d50396>.
09-16 14:45:26.421505  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.421523  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.421527  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<1617c84bcb42420589d50396>.
09-16 14:45:26.421530  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.421551  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.421882  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.421945  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.421958  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.421963  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.422090  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.422098  1  5 findChild() args  path=<collection>
09-16 14:45:26.423896  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.425216  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.425229  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.425296  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.425302  1  5 findChild() Find succeeded.
09-16 14:45:26.426151  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.426160  1  5 findChild() args  path=<filter>
09-16 14:45:26.427969  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.429269  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.429278  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.429369  1 12 StorageProvider::FileSystemDB generate_oid=feb051e948c040e6b838db63
09-16 14:45:26.430319  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.430328  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "feb051e948c040e6b838db63"
    }
}>
09-16 14:45:26.430331  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.432312  1  4 insertChild() new child value=object(...)
09-16 14:45:26.432319  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.433675  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.433685  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.434873  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.434888  1  4 insertChild() found child value=object(...)
09-16 14:45:26.436247  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "feb051e948c040e6b838db63"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.436325  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "feb051e948c040e6b838db63"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.436332  1  4 insertChild() Insert succeeded.
09-16 14:45:26.436376  1  4 StorageProvider::FileSystemDB::store() using generated oid=<feb051e948c040e6b838db63>.
09-16 14:45:26.436385  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.436390  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.436401  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.436416  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/feb051e948c040e6b838db63.json>.
09-16 14:45:26.436449  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "feb051e948c040e6b838db63"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.436455  1  5 findChild() args  path=<document>
09-16 14:45:26.438179  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.439593  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "feb051e948c040e6b838db63"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.439619  1  5 findChild() found child value=object(...)
09-16 14:45:26.440923  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "feb051e948c040e6b838db63"
}
}
}>
09-16 14:45:26.440929  1  5 findChild() Find succeeded.
09-16 14:45:26.448850  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.448856  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.448909  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.449471  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.449478  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "feb051e948c040e6b838db63"
        }
    }>.
09-16 14:45:26.449484  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<feb051e948c040e6b838db63>.
09-16 14:45:26.451218  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.451226  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.451229  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<feb051e948c040e6b838db63>.
09-16 14:45:26.451232  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.451249  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.451253  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<feb051e948c040e6b838db63>.
09-16 14:45:26.451256  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.451276  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.451657  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.451719  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.451730  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.451735  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.451858  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.451866  1  5 findChild() args  path=<collection>
09-16 14:45:26.453596  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.454909  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.454921  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.455000  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.455006  1  5 findChild() Find succeeded.
09-16 14:45:26.455946  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.455953  1  5 findChild() args  path=<filter>
09-16 14:45:26.457731  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.459070  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.459080  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.459153  1 12 StorageProvider::FileSystemDB generate_oid=d7cbd5a345eb4b52a624e78f
09-16 14:45:26.460139  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.460147  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "d7cbd5a345eb4b52a624e78f"
    }
}>
09-16 14:45:26.460151  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.462032  1  4 insertChild() new child value=object(...)
09-16 14:45:26.462039  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.463327  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.463337  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.464547  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.464562  1  4 insertChild() found child value=object(...)
09-16 14:45:26.465866  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "d7cbd5a345eb4b52a624e78f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.465935  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "d7cbd5a345eb4b52a624e78f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.465942  1  4 insertChild() Insert succeeded.
09-16 14:45:26.465975  1  4 StorageProvider::FileSystemDB::store() using generated oid=<d7cbd5a345eb4b52a624e78f>.
09-16 14:45:26.465985  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.465988  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.465996  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.466012  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/d7cbd5a345eb4b52a624e78f.json>.
09-16 14:45:26.466045  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "d7cbd5a345eb4b52a624e78f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.466051  1  5 findChild() args  path=<document>
09-16 14:45:26.467861  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.469218  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "d7cbd5a345eb4b52a624e78f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.469244  1  5 findChild() found child value=object(...)
09-16 14:45:26.470554  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "d7cbd5a345eb4b52a624e78f"
}
}
}>
09-16 14:45:26.470561  1  5 findChild() Find succeeded.
09-16 14:45:26.478853  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.478860  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.478901  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.479756  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.479771  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "d7cbd5a345eb4b52a624e78f"
        }
    }>.
09-16 14:45:26.479778  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<d7cbd5a345eb4b52a624e78f>.
09-16 14:45:26.481620  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.481655  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.481659  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<d7cbd5a345eb4b52a624e78f>.
09-16 14:45:26.481662  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.481695  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.481700  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<d7cbd5a345eb4b52a624e78f>.
09-16 14:45:26.481703  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.481727  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.482212  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.482390  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.482412  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.482418  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.482621  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.482630  1  5 findChild() args  path=<collection>
09-16 14:45:26.484517  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.485890  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.485917  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.486015  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.486022  1  5 findChild() Find succeeded.
09-16 14:45:26.487099  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.487108  1  5 findChild() args  path=<filter>
09-16 14:45:26.488972  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.490298  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.532184  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.532315  1 12 StorageProvider::FileSystemDB generate_oid=9f7c8ecd33f543ebac3e7f29
09-16 14:45:26.534646  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.534659  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "9f7c8ecd33f543ebac3e7f29"
    }
}>
09-16 14:45:26.534665  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.537306  1  4 insertChild() new child value=object(...)
09-16 14:45:26.537317  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.538677  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.538690  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.539928  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.539952  1  4 insertChild() found child value=object(...)
09-16 14:45:26.541390  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9f7c8ecd33f543ebac3e7f29"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.541497  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9f7c8ecd33f543ebac3e7f29"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.541506  1  4 insertChild() Insert succeeded.
09-16 14:45:26.541556  1  4 StorageProvider::FileSystemDB::store() using generated oid=<9f7c8ecd33f543ebac3e7f29>.
09-16 14:45:26.541573  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.541580  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.541594  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.541623  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/9f7c8ecd33f543ebac3e7f29.json>.
09-16 14:45:26.541696  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9f7c8ecd33f543ebac3e7f29"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.541705  1  5 findChild() args  path=<document>
09-16 14:45:26.543498  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.544863  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9f7c8ecd33f543ebac3e7f29"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.544899  1  5 findChild() found child value=object(...)
09-16 14:45:26.546283  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "9f7c8ecd33f543ebac3e7f29"
}
}
}>
09-16 14:45:26.546292  1  5 findChild() Find succeeded.
09-16 14:45:26.554253  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.554261  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.554337  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"a5fece6aee6c429988bbd988",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.555030  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.555049  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "9f7c8ecd33f543ebac3e7f29"
        }
    }>.
09-16 14:45:26.555057  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<9f7c8ecd33f543ebac3e7f29>.
09-16 14:45:26.556900  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.556912  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.556917  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<9f7c8ecd33f543ebac3e7f29>.
09-16 14:45:26.556923  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.556951  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.556958  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<9f7c8ecd33f543ebac3e7f29>.
09-16 14:45:26.556964  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.556995  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.557427  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.557523  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.557539  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.557550  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.557738  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.557748  1  5 findChild() args  path=<collection>
09-16 14:45:26.559580  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.560904  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.560920  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.561026  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.561033  1  5 findChild() Find succeeded.
09-16 14:45:26.561943  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.561954  1  5 findChild() args  path=<filter>
09-16 14:45:26.563836  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.565158  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.565169  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.565274  1 12 StorageProvider::FileSystemDB generate_oid=b345ad2df0964a668667520c
09-16 14:45:26.566240  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.566251  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "b345ad2df0964a668667520c"
    }
}>
09-16 14:45:26.566256  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.568226  1  4 insertChild() new child value=object(...)
09-16 14:45:26.568236  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.569585  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.569598  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.570821  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.570842  1  4 insertChild() found child value=object(...)
09-16 14:45:26.572311  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b345ad2df0964a668667520c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.572421  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b345ad2df0964a668667520c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.572431  1  4 insertChild() Insert succeeded.
09-16 14:45:26.572479  1  4 StorageProvider::FileSystemDB::store() using generated oid=<b345ad2df0964a668667520c>.
09-16 14:45:26.572494  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.572501  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.572514  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.572537  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/b345ad2df0964a668667520c.json>.
09-16 14:45:26.572590  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b345ad2df0964a668667520c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.572598  1  5 findChild() args  path=<document>
09-16 14:45:26.574404  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.575765  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b345ad2df0964a668667520c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.575810  1  5 findChild() found child value=object(...)
09-16 14:45:26.577182  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "b345ad2df0964a668667520c"
}
}
}>
09-16 14:45:26.577191  1  5 findChild() Find succeeded.
09-16 14:45:26.585363  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.585382  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.585446  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.586252  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.586267  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "b345ad2df0964a668667520c"
        }
    }>.
09-16 14:45:26.586276  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<b345ad2df0964a668667520c>.
09-16 14:45:26.588265  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.588278  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.588284  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<b345ad2df0964a668667520c>.
09-16 14:45:26.588289  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.588329  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.588336  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<b345ad2df0964a668667520c>.
09-16 14:45:26.588341  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.588374  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.588869  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.589055  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.589081  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.589093  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:45:26.589324  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.589335  1  5 findChild() args  path=<collection>
09-16 14:45:26.591232  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.592626  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.592662  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.592810  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.592821  1  5 findChild() Find succeeded.
09-16 14:45:26.593884  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.593895  1  5 findChild() args  path=<filter>
09-16 14:45:26.597007  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.598385  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.598402  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.598538  1 12 StorageProvider::FileSystemDB generate_oid=c0e44ed594a2446c8bf32204
09-16 14:45:26.599540  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.599551  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "c0e44ed594a2446c8bf32204"
    }
}>
09-16 14:45:26.599558  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.601593  1  4 insertChild() new child value=object(...)
09-16 14:45:26.601604  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.602926  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.602938  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.604237  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:45:26.604260  1  4 insertChild() found child value=object(...)
09-16 14:45:26.605670  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c0e44ed594a2446c8bf32204"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.605775  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c0e44ed594a2446c8bf32204"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.605784  1  4 insertChild() Insert succeeded.
09-16 14:45:26.605835  1  4 StorageProvider::FileSystemDB::store() using generated oid=<c0e44ed594a2446c8bf32204>.
09-16 14:45:26.605850  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.605857  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.605871  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.605897  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/c0e44ed594a2446c8bf32204.json>.
09-16 14:45:26.605946  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c0e44ed594a2446c8bf32204"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.605955  1  5 findChild() args  path=<document>
09-16 14:45:26.607770  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.609106  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c0e44ed594a2446c8bf32204"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.609142  1  5 findChild() found child value=object(...)
09-16 14:45:26.610495  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "c0e44ed594a2446c8bf32204"
}
}
}>
09-16 14:45:26.610504  1  5 findChild() Find succeeded.
09-16 14:45:26.618436  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.618453  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.618515  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.619321  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.619348  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "c0e44ed594a2446c8bf32204"
        }
    }>.
09-16 14:45:26.619357  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<c0e44ed594a2446c8bf32204>.
09-16 14:45:26.621111  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:45:26.621122  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:45:26.621128  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<c0e44ed594a2446c8bf32204>.
09-16 14:45:26.621133  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:45:26.621161  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:45:26.621168  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<c0e44ed594a2446c8bf32204>.
09-16 14:45:26.621173  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:45:26.621205  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.621718  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"c0e44ed594a2446c8bf32204",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"c0e44ed594a2446c8bf32204",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.621833  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.621869  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:26.621876  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{"_id" : { "$in" : [ { "$oid" : "ffe7b977d4e040cbaa750614"},{ "$oid" : "7d967cf7b0c7404c9b266477"},{ "$oid" : "1084e21ee52c4ed28922f7b7"},{ "$oid" : "a5fece6aee6c429988bbd988"},{ "$oid" : "1617c84bcb42420589d50396"},{ "$oid" : "feb051e948c040e6b838db63"},{ "$oid" : "d7cbd5a345eb4b52a624e78f"},{ "$oid" : "9f7c8ecd33f543ebac3e7f29"},{ "$oid" : "b345ad2df0964a668667520c"},{ "$oid" : "c0e44ed594a2446c8bf32204"}]} }, "collection":"testFHICL_V001"}>
09-16 14:45:26.622035  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "ffe7b977d4e040cbaa750614"
                }, 
                {
                    "$oid" : "7d967cf7b0c7404c9b266477"
                }, 
                {
                    "$oid" : "1084e21ee52c4ed28922f7b7"
                }, 
                {
                    "$oid" : "a5fece6aee6c429988bbd988"
                }, 
                {
                    "$oid" : "1617c84bcb42420589d50396"
                }, 
                {
                    "$oid" : "feb051e948c040e6b838db63"
                }, 
                {
                    "$oid" : "d7cbd5a345eb4b52a624e78f"
                }, 
                {
                    "$oid" : "9f7c8ecd33f543ebac3e7f29"
                }, 
                {
                    "$oid" : "b345ad2df0964a668667520c"
                }, 
                {
                    "$oid" : "c0e44ed594a2446c8bf32204"
                }
            ]
        }
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.622044  1  5 findChild() args  path=<collection>
09-16 14:45:26.622826  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.623357  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "ffe7b977d4e040cbaa750614"
},
{
"$oid" : "7d967cf7b0c7404c9b266477"
},
{
"$oid" : "1084e21ee52c4ed28922f7b7"
},
{
"$oid" : "a5fece6aee6c429988bbd988"
},
{
"$oid" : "1617c84bcb42420589d50396"
},
{
"$oid" : "feb051e948c040e6b838db63"
},
{
"$oid" : "d7cbd5a345eb4b52a624e78f"
},
{
"$oid" : "9f7c8ecd33f543ebac3e7f29"
},
{
"$oid" : "b345ad2df0964a668667520c"
},
{
"$oid" : "c0e44ed594a2446c8bf32204"
}
]
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.623372  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:45:26.623481  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.623497  1  5 findChild() Find succeeded.
09-16 14:45:26.624386  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "ffe7b977d4e040cbaa750614"
                }, 
                {
                    "$oid" : "7d967cf7b0c7404c9b266477"
                }, 
                {
                    "$oid" : "1084e21ee52c4ed28922f7b7"
                }, 
                {
                    "$oid" : "a5fece6aee6c429988bbd988"
                }, 
                {
                    "$oid" : "1617c84bcb42420589d50396"
                }, 
                {
                    "$oid" : "feb051e948c040e6b838db63"
                }, 
                {
                    "$oid" : "d7cbd5a345eb4b52a624e78f"
                }, 
                {
                    "$oid" : "9f7c8ecd33f543ebac3e7f29"
                }, 
                {
                    "$oid" : "b345ad2df0964a668667520c"
                }, 
                {
                    "$oid" : "c0e44ed594a2446c8bf32204"
                }
            ]
        }
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:45:26.624398  1  5 findChild() args  path=<filter>
09-16 14:45:26.625205  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.625742  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "ffe7b977d4e040cbaa750614"
},
{
"$oid" : "7d967cf7b0c7404c9b266477"
},
{
"$oid" : "1084e21ee52c4ed28922f7b7"
},
{
"$oid" : "a5fece6aee6c429988bbd988"
},
{
"$oid" : "1617c84bcb42420589d50396"
},
{
"$oid" : "feb051e948c040e6b838db63"
},
{
"$oid" : "d7cbd5a345eb4b52a624e78f"
},
{
"$oid" : "9f7c8ecd33f543ebac3e7f29"
},
{
"$oid" : "b345ad2df0964a668667520c"
},
{
"$oid" : "c0e44ed594a2446c8bf32204"
}
]
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:45:26.625767  1  5 findChild() found child value=object(...)
09-16 14:45:26.626296  1  5 findChild() resultDocument=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "ffe7b977d4e040cbaa750614"
},
{
"$oid" : "7d967cf7b0c7404c9b266477"
},
{
"$oid" : "1084e21ee52c4ed28922f7b7"
},
{
"$oid" : "a5fece6aee6c429988bbd988"
},
{
"$oid" : "1617c84bcb42420589d50396"
},
{
"$oid" : "feb051e948c040e6b838db63"
},
{
"$oid" : "d7cbd5a345eb4b52a624e78f"
},
{
"$oid" : "9f7c8ecd33f543ebac3e7f29"
},
{
"$oid" : "b345ad2df0964a668667520c"
},
{
"$oid" : "c0e44ed594a2446c8bf32204"
}
]
}
}
}>
09-16 14:45:26.626304  1  5 findChild() Find succeeded.
09-16 14:45:26.629866  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:45:26.629876  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.629889  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:45:26.629912  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.629919  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:45:26.629971  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"c0e44ed594a2446c8bf32204",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"c0e44ed594a2446c8bf32204",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.630862  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:45:26.630873  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "_id" : {
            "$in" : [
                {
                    "$oid" : "ffe7b977d4e040cbaa750614"
                }, 
                {
                    "$oid" : "7d967cf7b0c7404c9b266477"
                }, 
                {
                    "$oid" : "1084e21ee52c4ed28922f7b7"
                }, 
                {
                    "$oid" : "a5fece6aee6c429988bbd988"
                }, 
                {
                    "$oid" : "1617c84bcb42420589d50396"
                }, 
                {
                    "$oid" : "feb051e948c040e6b838db63"
                }, 
                {
                    "$oid" : "d7cbd5a345eb4b52a624e78f"
                }, 
                {
                    "$oid" : "9f7c8ecd33f543ebac3e7f29"
                }, 
                {
                    "$oid" : "b345ad2df0964a668667520c"
                }, 
                {
                    "$oid" : "c0e44ed594a2446c8bf32204"
                }
            ]
        }
    }>.
09-16 14:45:26.631569  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:45:26.632156  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() begin
09-16 14:45:26.632165  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() args objectid=<{
"$in" : [
{
"$oid" : "ffe7b977d4e040cbaa750614"
},
{
"$oid" : "7d967cf7b0c7404c9b266477"
},
{
"$oid" : "1084e21ee52c4ed28922f7b7"
},
{
"$oid" : "a5fece6aee6c429988bbd988"
},
{
"$oid" : "1617c84bcb42420589d50396"
},
{
"$oid" : "feb051e948c040e6b838db63"
},
{
"$oid" : "d7cbd5a345eb4b52a624e78f"
},
{
"$oid" : "9f7c8ecd33f543ebac3e7f29"
},
{
"$oid" : "b345ad2df0964a668667520c"
},
{
"$oid" : "c0e44ed594a2446c8bf32204"
}
]
}>.
09-16 14:45:26.633514  1  5 StorageProvider::FileSystemDB::index::_matchObjectIds() found 10 ouids.
09-16 14:45:26.633525  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<ffe7b977d4e040cbaa750614>.
09-16 14:45:26.633534  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<7d967cf7b0c7404c9b266477>.
09-16 14:45:26.633542  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<1084e21ee52c4ed28922f7b7>.
09-16 14:45:26.633549  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<a5fece6aee6c429988bbd988>.
09-16 14:45:26.633556  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<1617c84bcb42420589d50396>.
09-16 14:45:26.633563  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<feb051e948c040e6b838db63>.
09-16 14:45:26.633570  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<d7cbd5a345eb4b52a624e78f>.
09-16 14:45:26.633576  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<9f7c8ecd33f543ebac3e7f29>.
09-16 14:45:26.633582  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<b345ad2df0964a668667520c>.
09-16 14:45:26.633590  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<c0e44ed594a2446c8bf32204>.
09-16 14:45:26.633595  1 15 StorageProvider::FileSystemDB::index::_matchObjectIds() Found 10 documents
09-16 14:45:26.633773  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() criteria_count=0, max_count=1, found 10 documents.
09-16 14:45:26.633797  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() returning 10 documents.
09-16 14:45:26.633819  1  3 StorageProvider::FileSystemDB::load() search returned 10 documents.
09-16 14:45:26.633911  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/1084e21ee52c4ed28922f7b7.json>.
09-16 14:45:26.634134  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/1617c84bcb42420589d50396.json>.
09-16 14:45:26.634338  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/7d967cf7b0c7404c9b266477.json>.
09-16 14:45:26.634537  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/9f7c8ecd33f543ebac3e7f29.json>.
09-16 14:45:26.634727  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/a5fece6aee6c429988bbd988.json>.
09-16 14:45:26.634915  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/b345ad2df0964a668667520c.json>.
09-16 14:45:26.635146  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/c0e44ed594a2446c8bf32204.json>.
09-16 14:45:26.635296  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/d7cbd5a345eb4b52a624e78f.json>.
09-16 14:45:26.635419  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/feb051e948c040e6b838db63.json>.
09-16 14:45:26.635539  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/ffe7b977d4e040cbaa750614.json>.
09-16 14:45:26.635653  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.636132  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"c0e44ed594a2446c8bf32204",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"1084e21ee52c4ed28922f7b7",
"1617c84bcb42420589d50396",
"6ac4fc41a40f4dc9ada2b677",
"7d967cf7b0c7404c9b266477",
"9f7c8ecd33f543ebac3e7f29",
"a5fece6aee6c429988bbd988",
"b345ad2df0964a668667520c",
"c0e44ed594a2446c8bf32204",
"d7cbd5a345eb4b52a624e78f",
"feb051e948c040e6b838db63",
"ffe7b977d4e040cbaa750614"
]
}
}>
09-16 14:45:26.636206  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ { "$oid" : "ffe7b977d4e040cbaa750614"},{ "$oid" : "7d967cf7b0c7404c9b266477"},{ "$oid" : "1084e21ee52c4ed28922f7b7"},{ "$oid" : "a5fece6aee6c429988bbd988"},{ "$oid" : "1617c84bcb42420589d50396"},{ "$oid" : "feb051e948c040e6b838db63"},{ "$oid" : "d7cbd5a345eb4b52a624e78f"},{ "$oid" : "9f7c8ecd33f543ebac3e7f29"},{ "$oid" : "b345ad2df0964a668667520c"},{ "$oid" : "c0e44ed594a2446c8bf32204"}]} }, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.61 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_search2_004_t" end time: Sep 16 14:45 CDT
"FileSystemFhicl_search2_004_t" time elapsed: 00:00:00
----------------------------------------------------------

62/65 Testing: FileSystemJson_search2_004_t
62/65 Test: FileSystemJson_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/FileSystemJson_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/test004.cmp.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/FileSystemJson_search2_004_t.d
"FileSystemJson_search2_004_t" start time: Sep 16 14:45 CDT
Output:
----------------------------------------------------------
09-16 14:45:26.150943  1  0 artdaq::database::filesystem trace_enable
09-16 14:45:26.151057  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:45:26.151109  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:45:26.152945  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.152974  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:26.154116  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:26.154176  1  5 findChild() args  path=<collection>
09-16 14:45:26.169847  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.182604  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.182717  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:26.182943  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:26.182950  1  5 findChild() Find succeeded.
09-16 14:45:26.185033  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:26.185115  1  5 findChild() args  path=<filter>
09-16 14:45:26.196557  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.205455  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.205483  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.205931  1 12 StorageProvider::FileSystemDB generate_oid=0ad7f1c344a0458fb6b492c1
09-16 14:45:26.207036  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:26.207094  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "0ad7f1c344a0458fb6b492c1"
    }
}>
09-16 14:45:26.207098  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.218425  1  4 insertChild() new child value=object(...)
09-16 14:45:26.218446  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.227359  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:26.227383  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.235579  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:26.235647  1  4 insertChild() found child value=object(...)
09-16 14:45:26.244571  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:26.430720  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:26.430812  1  4 insertChild() Insert succeeded.
09-16 14:45:26.431037  1  4 StorageProvider::FileSystemDB::store() using generated oid=<0ad7f1c344a0458fb6b492c1>.
09-16 14:45:26.431089  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:26.431118  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.431155  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.431383  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/0ad7f1c344a0458fb6b492c1.json>.
09-16 14:45:26.431453  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:26.431471  1  5 findChild() args  path=<document>
09-16 14:45:26.442006  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.450622  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.450727  1  5 findChild() found child value=object(...)
09-16 14:45:26.459654  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:26.459674  1  5 findChild() Find succeeded.
09-16 14:45:26.511980  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.511993  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:26.512039  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.512483  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.512496  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:26.512550  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<0ad7f1c344a0458fb6b492c1>.
09-16 14:45:26.523051  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:26.523119  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:26.523124  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:26.523127  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:26.523130  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:26.523245  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:26.523341  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:26.523350  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.523559  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.523673  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.523724  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.523731  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:26.524419  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:26.524475  1  5 findChild() args  path=<collection>
09-16 14:45:26.535582  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.544355  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.544381  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:26.544464  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:26.544469  1  5 findChild() Find succeeded.
09-16 14:45:26.545373  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:26.545435  1  5 findChild() args  path=<filter>
09-16 14:45:26.556474  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.565222  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.565243  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.565367  1 12 StorageProvider::FileSystemDB generate_oid=b62e23b5130644418bad800e
09-16 14:45:26.566359  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:26.566419  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "b62e23b5130644418bad800e"
    }
}>
09-16 14:45:26.566423  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.577632  1  4 insertChild() new child value=object(...)
09-16 14:45:26.577645  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.587004  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:26.587066  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.595869  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:26.595943  1  4 insertChild() found child value=object(...)
09-16 14:45:26.604754  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:26.604847  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:26.604866  1  4 insertChild() Insert succeeded.
09-16 14:45:26.604951  1  4 StorageProvider::FileSystemDB::store() using generated oid=<b62e23b5130644418bad800e>.
09-16 14:45:26.604966  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:26.604971  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.604987  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.605015  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b62e23b5130644418bad800e.json>.
09-16 14:45:26.605083  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:26.632117  1  5 findChild() args  path=<document>
09-16 14:45:26.645433  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.656369  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.656495  1  5 findChild() found child value=object(...)
09-16 14:45:26.667039  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:26.667063  1  5 findChild() Find succeeded.
09-16 14:45:26.722707  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.722714  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:26.722744  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.723048  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.723060  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:26.723124  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<b62e23b5130644418bad800e>.
09-16 14:45:26.733886  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:26.733915  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:26.733919  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:26.733922  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:26.733925  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:26.733941  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:26.733992  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:26.733997  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.734182  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.734266  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.734289  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.734296  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:26.734924  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:26.734986  1  5 findChild() args  path=<collection>
09-16 14:45:26.745788  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.754228  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.754253  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:26.754330  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:26.754335  1  5 findChild() Find succeeded.
09-16 14:45:26.755266  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:26.755353  1  5 findChild() args  path=<filter>
09-16 14:45:26.766132  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.774583  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.774604  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.774741  1 12 StorageProvider::FileSystemDB generate_oid=549f2ad49c8b4e818a3eb3e1
09-16 14:45:26.775752  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:26.775807  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "549f2ad49c8b4e818a3eb3e1"
    }
}>
09-16 14:45:26.775811  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.787071  1  4 insertChild() new child value=object(...)
09-16 14:45:26.787095  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.796144  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:26.796183  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.804105  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:26.804143  1  4 insertChild() found child value=object(...)
09-16 14:45:26.812556  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:26.812642  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:26.812660  1  4 insertChild() Insert succeeded.
09-16 14:45:26.812758  1  4 StorageProvider::FileSystemDB::store() using generated oid=<549f2ad49c8b4e818a3eb3e1>.
09-16 14:45:26.812772  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:26.812777  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.812793  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.812821  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/549f2ad49c8b4e818a3eb3e1.json>.
09-16 14:45:26.812889  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:26.812906  1  5 findChild() args  path=<document>
09-16 14:45:26.823152  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.831611  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.831704  1  5 findChild() found child value=object(...)
09-16 14:45:26.840366  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:26.840385  1  5 findChild() Find succeeded.
09-16 14:45:26.890856  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:26.890869  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:26.890919  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.891323  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:26.891335  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:26.891421  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<549f2ad49c8b4e818a3eb3e1>.
09-16 14:45:26.902008  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:26.902045  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:26.902049  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:26.902052  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:26.902055  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:26.902072  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:26.902123  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:26.902129  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:26.902367  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:26.902509  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:26.902546  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:26.902553  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:26.903289  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:26.903345  1  5 findChild() args  path=<collection>
09-16 14:45:26.914148  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.922632  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.922660  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:26.922740  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:26.922746  1  5 findChild() Find succeeded.
09-16 14:45:26.923736  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:26.923792  1  5 findChild() args  path=<filter>
09-16 14:45:26.934403  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:26.942861  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:26.942882  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:26.943027  1 12 StorageProvider::FileSystemDB generate_oid=e3ea6acb81804035af5db7c1
09-16 14:45:26.944071  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:26.944126  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "e3ea6acb81804035af5db7c1"
    }
}>
09-16 14:45:26.944130  1  2 insertChild() args  path=<document._id>
09-16 14:45:26.954869  1  4 insertChild() new child value=object(...)
09-16 14:45:26.954883  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:26.963442  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:26.963465  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:26.971437  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:26.971467  1  4 insertChild() found child value=object(...)
09-16 14:45:26.980549  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:26.980639  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:26.980658  1  4 insertChild() Insert succeeded.
09-16 14:45:26.980738  1  4 StorageProvider::FileSystemDB::store() using generated oid=<e3ea6acb81804035af5db7c1>.
09-16 14:45:26.980751  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:26.980756  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.980769  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:26.980794  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/e3ea6acb81804035af5db7c1.json>.
09-16 14:45:26.980861  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:26.980879  1  5 findChild() args  path=<document>
09-16 14:45:26.991442  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.000386  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.000511  1  5 findChild() found child value=object(...)
09-16 14:45:27.009338  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:27.009373  1  5 findChild() Find succeeded.
09-16 14:45:27.061692  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:27.061711  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:27.061759  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.062215  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:27.062231  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:27.062286  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<e3ea6acb81804035af5db7c1>.
09-16 14:45:27.073007  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:27.073045  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:27.073050  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:27.073052  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:27.073055  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:27.073072  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:27.073125  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:27.073130  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:27.073364  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.073517  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:27.073553  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:27.073570  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:27.074239  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.074305  1  5 findChild() args  path=<collection>
09-16 14:45:27.085534  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.094464  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.094503  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:27.094601  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:27.094607  1  5 findChild() Find succeeded.
09-16 14:45:27.095679  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.095736  1  5 findChild() args  path=<filter>
09-16 14:45:27.107060  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.116419  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.116467  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:27.116695  1 12 StorageProvider::FileSystemDB generate_oid=af9438c4244d4d10bb550f8e
09-16 14:45:27.117761  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:27.117821  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "af9438c4244d4d10bb550f8e"
    }
}>
09-16 14:45:27.117826  1  2 insertChild() args  path=<document._id>
09-16 14:45:27.129146  1  4 insertChild() new child value=object(...)
09-16 14:45:27.129180  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:27.138071  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:27.138099  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:27.146404  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:27.146457  1  4 insertChild() found child value=object(...)
09-16 14:45:27.155114  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:27.155224  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:27.155244  1  4 insertChild() Insert succeeded.
09-16 14:45:27.155350  1  4 StorageProvider::FileSystemDB::store() using generated oid=<af9438c4244d4d10bb550f8e>.
09-16 14:45:27.155365  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:27.155370  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.155389  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.155422  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/af9438c4244d4d10bb550f8e.json>.
09-16 14:45:27.155499  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:27.155526  1  5 findChild() args  path=<document>
09-16 14:45:27.166177  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.174705  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.174805  1  5 findChild() found child value=object(...)
09-16 14:45:27.183316  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:27.183336  1  5 findChild() Find succeeded.
09-16 14:45:27.233723  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:27.233739  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:27.233810  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.234251  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:27.234265  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:27.234318  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<af9438c4244d4d10bb550f8e>.
09-16 14:45:27.244649  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:27.244681  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:27.244685  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:27.244688  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:27.244690  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:27.244706  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:27.244757  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:27.244762  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:27.244991  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.245104  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:27.245141  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:27.245157  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:27.245841  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.245897  1  5 findChild() args  path=<collection>
09-16 14:45:27.256518  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.264974  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.265011  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:27.265094  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:27.265100  1  5 findChild() Find succeeded.
09-16 14:45:27.266041  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.266100  1  5 findChild() args  path=<filter>
09-16 14:45:27.276690  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.285330  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.285353  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:27.285506  1 12 StorageProvider::FileSystemDB generate_oid=808682bf022244a8a09c61c8
09-16 14:45:27.286465  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:27.286520  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "808682bf022244a8a09c61c8"
    }
}>
09-16 14:45:27.286525  1  2 insertChild() args  path=<document._id>
09-16 14:45:27.297433  1  4 insertChild() new child value=object(...)
09-16 14:45:27.297448  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:27.305879  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:27.305903  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:27.313668  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:27.313699  1  4 insertChild() found child value=object(...)
09-16 14:45:27.322056  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:27.322139  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:27.322158  1  4 insertChild() Insert succeeded.
09-16 14:45:27.322233  1  4 StorageProvider::FileSystemDB::store() using generated oid=<808682bf022244a8a09c61c8>.
09-16 14:45:27.322256  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:27.322260  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.322274  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.322299  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/808682bf022244a8a09c61c8.json>.
09-16 14:45:27.322372  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:27.322389  1  5 findChild() args  path=<document>
09-16 14:45:27.332487  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.340973  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.341067  1  5 findChild() found child value=object(...)
09-16 14:45:27.349580  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:27.349600  1  5 findChild() Find succeeded.
09-16 14:45:27.399973  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:27.399985  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:27.400050  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.400384  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:27.400402  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:27.400455  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<808682bf022244a8a09c61c8>.
09-16 14:45:27.410929  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:27.410960  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:27.410963  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:27.410966  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:27.410969  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:27.410984  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:27.411035  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:27.411040  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:27.411248  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.411355  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:27.411386  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:27.411393  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:27.412032  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.412087  1  5 findChild() args  path=<collection>
09-16 14:45:27.422786  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.431293  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.431319  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:27.431400  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:27.431406  1  5 findChild() Find succeeded.
09-16 14:45:27.432322  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.432381  1  5 findChild() args  path=<filter>
09-16 14:45:27.443128  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.451623  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.451644  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:27.451797  1 12 StorageProvider::FileSystemDB generate_oid=602f9a9cdbe04179a77aa489
09-16 14:45:27.452780  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:27.452836  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "602f9a9cdbe04179a77aa489"
    }
}>
09-16 14:45:27.452841  1  2 insertChild() args  path=<document._id>
09-16 14:45:27.463654  1  4 insertChild() new child value=object(...)
09-16 14:45:27.463669  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:27.472057  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:27.472089  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:27.479989  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:27.480018  1  4 insertChild() found child value=object(...)
09-16 14:45:27.488543  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:27.488627  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:27.488645  1  4 insertChild() Insert succeeded.
09-16 14:45:27.488717  1  4 StorageProvider::FileSystemDB::store() using generated oid=<602f9a9cdbe04179a77aa489>.
09-16 14:45:27.488730  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:27.488734  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.488745  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.488763  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/602f9a9cdbe04179a77aa489.json>.
09-16 14:45:27.488826  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:27.488842  1  5 findChild() args  path=<document>
09-16 14:45:27.499039  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.507495  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.507597  1  5 findChild() found child value=object(...)
09-16 14:45:27.516106  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:27.516126  1  5 findChild() Find succeeded.
09-16 14:45:27.570305  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:27.570313  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:27.570379  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.570671  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:27.570683  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:27.570735  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<602f9a9cdbe04179a77aa489>.
09-16 14:45:27.581484  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:27.581511  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:27.581515  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:27.581518  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:27.581520  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:27.581535  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:27.581586  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:27.581591  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:27.581787  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.581880  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:27.581901  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:27.581908  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:27.582605  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.582661  1  5 findChild() args  path=<collection>
09-16 14:45:27.593362  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.601946  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.601972  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:27.602049  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:27.602054  1  5 findChild() Find succeeded.
09-16 14:45:27.602968  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.603027  1  5 findChild() args  path=<filter>
09-16 14:45:27.613827  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.622344  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.622365  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:27.622505  1 12 StorageProvider::FileSystemDB generate_oid=c5d57394c68e4cdd8de8879b
09-16 14:45:27.623474  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:27.623529  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "c5d57394c68e4cdd8de8879b"
    }
}>
09-16 14:45:27.623533  1  2 insertChild() args  path=<document._id>
09-16 14:45:27.634484  1  4 insertChild() new child value=object(...)
09-16 14:45:27.634498  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:27.643157  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:27.643179  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:27.651005  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:27.651033  1  4 insertChild() found child value=object(...)
09-16 14:45:27.659553  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:27.659637  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:27.659655  1  4 insertChild() Insert succeeded.
09-16 14:45:27.659725  1  4 StorageProvider::FileSystemDB::store() using generated oid=<c5d57394c68e4cdd8de8879b>.
09-16 14:45:27.659738  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:27.659742  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.659753  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.659772  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/c5d57394c68e4cdd8de8879b.json>.
09-16 14:45:27.659832  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:27.659849  1  5 findChild() args  path=<document>
09-16 14:45:27.670208  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.678640  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.678733  1  5 findChild() found child value=object(...)
09-16 14:45:27.687184  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:27.687203  1  5 findChild() Find succeeded.
09-16 14:45:27.737010  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:27.737017  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:27.737071  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.737349  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:27.737359  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:27.737415  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<c5d57394c68e4cdd8de8879b>.
09-16 14:45:27.747835  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:27.747858  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:27.747862  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:27.747864  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:27.747867  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:27.747880  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:27.747929  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:27.747934  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:27.748113  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.748192  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:27.748221  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:27.748227  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:27.748884  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.748938  1  5 findChild() args  path=<collection>
09-16 14:45:27.759613  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.768061  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.768085  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:27.768161  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:27.768167  1  5 findChild() Find succeeded.
09-16 14:45:27.769079  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.769138  1  5 findChild() args  path=<filter>
09-16 14:45:27.779844  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.788240  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.788261  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:27.788417  1 12 StorageProvider::FileSystemDB generate_oid=cf4959b99b67433cb83955e1
09-16 14:45:27.789360  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:27.789419  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "cf4959b99b67433cb83955e1"
    }
}>
09-16 14:45:27.789424  1  2 insertChild() args  path=<document._id>
09-16 14:45:27.800579  1  4 insertChild() new child value=object(...)
09-16 14:45:27.800593  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:27.809285  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:27.809308  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:27.817312  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:27.817340  1  4 insertChild() found child value=object(...)
09-16 14:45:27.825989  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:27.826072  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:27.826090  1  4 insertChild() Insert succeeded.
09-16 14:45:27.826160  1  4 StorageProvider::FileSystemDB::store() using generated oid=<cf4959b99b67433cb83955e1>.
09-16 14:45:27.826171  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:27.826175  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.826184  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.826201  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/cf4959b99b67433cb83955e1.json>.
09-16 14:45:27.826252  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:27.826269  1  5 findChild() args  path=<document>
09-16 14:45:27.836781  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.845518  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.845611  1  5 findChild() found child value=object(...)
09-16 14:45:27.854250  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:27.854270  1  5 findChild() Find succeeded.
09-16 14:45:27.904954  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:27.904961  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:27.905016  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.905299  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:27.905310  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:27.905372  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<cf4959b99b67433cb83955e1>.
09-16 14:45:27.916645  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:27.916669  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:27.916673  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:27.916675  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:27.916678  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:27.916691  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:27.916741  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:27.916746  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:27.916928  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:27.917010  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:27.917040  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:45:27.917047  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:45:27.917709  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.917765  1  5 findChild() args  path=<collection>
09-16 14:45:27.928919  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.937683  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.937727  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:27.937843  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:27.937849  1  5 findChild() Find succeeded.
09-16 14:45:27.938762  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:45:27.938821  1  5 findChild() args  path=<filter>
09-16 14:45:27.949708  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:27.958277  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:27.958298  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:45:27.958435  1 12 StorageProvider::FileSystemDB generate_oid=8dab1b39242144b9a1922fcf
09-16 14:45:27.959430  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:45:27.959485  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "8dab1b39242144b9a1922fcf"
    }
}>
09-16 14:45:27.959489  1  2 insertChild() args  path=<document._id>
09-16 14:45:27.970455  1  4 insertChild() new child value=object(...)
09-16 14:45:27.970469  1  4 insertChild() recurse() args currentDepth=1
09-16 14:45:27.979030  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:45:27.979053  1  4 insertChild() recurse() args currentDepth=0
09-16 14:45:27.987057  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:45:27.987085  1  4 insertChild() found child value=object(...)
09-16 14:45:27.995585  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:45:27.995669  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:45:27.995687  1  4 insertChild() Insert succeeded.
09-16 14:45:27.995757  1  4 StorageProvider::FileSystemDB::store() using generated oid=<8dab1b39242144b9a1922fcf>.
09-16 14:45:27.995767  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:27.995772  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.995781  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:27.995798  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/8dab1b39242144b9a1922fcf.json>.
09-16 14:45:27.995853  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:45:27.995869  1  5 findChild() args  path=<document>
09-16 14:45:28.006473  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:28.015047  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:45:28.015140  1  5 findChild() found child value=object(...)
09-16 14:45:28.023647  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:45:28.023666  1  5 findChild() Find succeeded.
09-16 14:45:28.075537  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:28.075562  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:28.075615  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:28.076044  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:45:28.076059  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:45:28.076131  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<8dab1b39242144b9a1922fcf>.
09-16 14:45:28.086985  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:45:28.087018  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:45:28.087022  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:45:28.087025  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:45:28.087028  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:45:28.087044  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:45:28.087096  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:45:28.087102  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:28.087338  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:28.087480  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:45:28.087545  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:45:28.087551  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{"_id" : { "$in" : [ { "$oid" : "0ad7f1c344a0458fb6b492c1"},{ "$oid" : "b62e23b5130644418bad800e"},{ "$oid" : "549f2ad49c8b4e818a3eb3e1"},{ "$oid" : "e3ea6acb81804035af5db7c1"},{ "$oid" : "af9438c4244d4d10bb550f8e"},{ "$oid" : "808682bf022244a8a09c61c8"},{ "$oid" : "602f9a9cdbe04179a77aa489"},{ "$oid" : "c5d57394c68e4cdd8de8879b"},{ "$oid" : "cf4959b99b67433cb83955e1"},{ "$oid" : "8dab1b39242144b9a1922fcf"}]} }, "collection":"testJSON_V001"}>
09-16 14:45:28.087760  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "0ad7f1c344a0458fb6b492c1"
                }, 
                {
                    "$oid" : "b62e23b5130644418bad800e"
                }, 
                {
                    "$oid" : "549f2ad49c8b4e818a3eb3e1"
                }, 
                {
                    "$oid" : "e3ea6acb81804035af5db7c1"
                }, 
                {
                    "$oid" : "af9438c4244d4d10bb550f8e"
                }, 
                {
                    "$oid" : "808682bf022244a8a09c61c8"
                }, 
                {
                    "$oid" : "602f9a9cdbe04179a77aa489"
                }, 
                {
                    "$oid" : "c5d57394c68e4cdd8de8879b"
                }, 
                {
                    "$oid" : "cf4959b99b67433cb83955e1"
                }, 
                {
                    "$oid" : "8dab1b39242144b9a1922fcf"
                }
            ]
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:28.087769  1  5 findChild() args  path=<collection>
09-16 14:45:28.088556  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:28.089116  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "0ad7f1c344a0458fb6b492c1"
},
{
"$oid" : "b62e23b5130644418bad800e"
},
{
"$oid" : "549f2ad49c8b4e818a3eb3e1"
},
{
"$oid" : "e3ea6acb81804035af5db7c1"
},
{
"$oid" : "af9438c4244d4d10bb550f8e"
},
{
"$oid" : "808682bf022244a8a09c61c8"
},
{
"$oid" : "602f9a9cdbe04179a77aa489"
},
{
"$oid" : "c5d57394c68e4cdd8de8879b"
},
{
"$oid" : "cf4959b99b67433cb83955e1"
},
{
"$oid" : "8dab1b39242144b9a1922fcf"
}
]
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:28.089152  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:45:28.089267  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:45:28.089275  1  5 findChild() Find succeeded.
09-16 14:45:28.090411  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "0ad7f1c344a0458fb6b492c1"
                }, 
                {
                    "$oid" : "b62e23b5130644418bad800e"
                }, 
                {
                    "$oid" : "549f2ad49c8b4e818a3eb3e1"
                }, 
                {
                    "$oid" : "e3ea6acb81804035af5db7c1"
                }, 
                {
                    "$oid" : "af9438c4244d4d10bb550f8e"
                }, 
                {
                    "$oid" : "808682bf022244a8a09c61c8"
                }, 
                {
                    "$oid" : "602f9a9cdbe04179a77aa489"
                }, 
                {
                    "$oid" : "c5d57394c68e4cdd8de8879b"
                }, 
                {
                    "$oid" : "cf4959b99b67433cb83955e1"
                }, 
                {
                    "$oid" : "8dab1b39242144b9a1922fcf"
                }
            ]
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:45:28.090420  1  5 findChild() args  path=<filter>
09-16 14:45:28.091300  1  5 findChild() recurse() args currentDepth=0
09-16 14:45:28.091929  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "0ad7f1c344a0458fb6b492c1"
},
{
"$oid" : "b62e23b5130644418bad800e"
},
{
"$oid" : "549f2ad49c8b4e818a3eb3e1"
},
{
"$oid" : "e3ea6acb81804035af5db7c1"
},
{
"$oid" : "af9438c4244d4d10bb550f8e"
},
{
"$oid" : "808682bf022244a8a09c61c8"
},
{
"$oid" : "602f9a9cdbe04179a77aa489"
},
{
"$oid" : "c5d57394c68e4cdd8de8879b"
},
{
"$oid" : "cf4959b99b67433cb83955e1"
},
{
"$oid" : "8dab1b39242144b9a1922fcf"
}
]
}
},
"collection" : "testJSON_V001"
}>
09-16 14:45:28.091951  1  5 findChild() found child value=object(...)
09-16 14:45:28.092483  1  5 findChild() resultDocument=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "0ad7f1c344a0458fb6b492c1"
},
{
"$oid" : "b62e23b5130644418bad800e"
},
{
"$oid" : "549f2ad49c8b4e818a3eb3e1"
},
{
"$oid" : "e3ea6acb81804035af5db7c1"
},
{
"$oid" : "af9438c4244d4d10bb550f8e"
},
{
"$oid" : "808682bf022244a8a09c61c8"
},
{
"$oid" : "602f9a9cdbe04179a77aa489"
},
{
"$oid" : "c5d57394c68e4cdd8de8879b"
},
{
"$oid" : "cf4959b99b67433cb83955e1"
},
{
"$oid" : "8dab1b39242144b9a1922fcf"
}
]
}
}
}>
09-16 14:45:28.092491  1  5 findChild() Find succeeded.
09-16 14:45:28.096164  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:45:28.096185  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:28.096205  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:45:28.096248  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:45:28.096255  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:45:28.096311  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:28.096794  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:45:28.096814  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "_id" : {
            "$in" : [
                {
                    "$oid" : "0ad7f1c344a0458fb6b492c1"
                }, 
                {
                    "$oid" : "b62e23b5130644418bad800e"
                }, 
                {
                    "$oid" : "549f2ad49c8b4e818a3eb3e1"
                }, 
                {
                    "$oid" : "e3ea6acb81804035af5db7c1"
                }, 
                {
                    "$oid" : "af9438c4244d4d10bb550f8e"
                }, 
                {
                    "$oid" : "808682bf022244a8a09c61c8"
                }, 
                {
                    "$oid" : "602f9a9cdbe04179a77aa489"
                }, 
                {
                    "$oid" : "c5d57394c68e4cdd8de8879b"
                }, 
                {
                    "$oid" : "cf4959b99b67433cb83955e1"
                }, 
                {
                    "$oid" : "8dab1b39242144b9a1922fcf"
                }
            ]
        }
    }>.
09-16 14:45:28.097532  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:45:28.098142  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() begin
09-16 14:45:28.098152  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() args objectid=<{
"$in" : [
{
"$oid" : "0ad7f1c344a0458fb6b492c1"
},
{
"$oid" : "b62e23b5130644418bad800e"
},
{
"$oid" : "549f2ad49c8b4e818a3eb3e1"
},
{
"$oid" : "e3ea6acb81804035af5db7c1"
},
{
"$oid" : "af9438c4244d4d10bb550f8e"
},
{
"$oid" : "808682bf022244a8a09c61c8"
},
{
"$oid" : "602f9a9cdbe04179a77aa489"
},
{
"$oid" : "c5d57394c68e4cdd8de8879b"
},
{
"$oid" : "cf4959b99b67433cb83955e1"
},
{
"$oid" : "8dab1b39242144b9a1922fcf"
}
]
}>.
09-16 14:45:28.098793  1  5 StorageProvider::FileSystemDB::index::_matchObjectIds() found 10 ouids.
09-16 14:45:28.098824  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<0ad7f1c344a0458fb6b492c1>.
09-16 14:45:28.098832  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<b62e23b5130644418bad800e>.
09-16 14:45:28.098838  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<549f2ad49c8b4e818a3eb3e1>.
09-16 14:45:28.098843  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<e3ea6acb81804035af5db7c1>.
09-16 14:45:28.098847  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<af9438c4244d4d10bb550f8e>.
09-16 14:45:28.098851  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<808682bf022244a8a09c61c8>.
09-16 14:45:28.098855  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<602f9a9cdbe04179a77aa489>.
09-16 14:45:28.098859  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<c5d57394c68e4cdd8de8879b>.
09-16 14:45:28.098863  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<cf4959b99b67433cb83955e1>.
09-16 14:45:28.098868  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<8dab1b39242144b9a1922fcf>.
09-16 14:45:28.098871  1 15 StorageProvider::FileSystemDB::index::_matchObjectIds() Found 10 documents
09-16 14:45:28.099035  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() criteria_count=0, max_count=1, found 10 documents.
09-16 14:45:28.099055  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() returning 10 documents.
09-16 14:45:28.099071  1  3 StorageProvider::FileSystemDB::load() search returned 10 documents.
09-16 14:45:28.099232  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/0ad7f1c344a0458fb6b492c1.json>.
09-16 14:45:28.099972  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/549f2ad49c8b4e818a3eb3e1.json>.
09-16 14:45:28.100687  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/602f9a9cdbe04179a77aa489.json>.
09-16 14:45:28.101400  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/808682bf022244a8a09c61c8.json>.
09-16 14:45:28.102110  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/8dab1b39242144b9a1922fcf.json>.
09-16 14:45:28.102836  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/af9438c4244d4d10bb550f8e.json>.
09-16 14:45:28.103555  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/b62e23b5130644418bad800e.json>.
09-16 14:45:28.104262  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/c5d57394c68e4cdd8de8879b.json>.
09-16 14:45:28.104999  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/cf4959b99b67433cb83955e1.json>.
09-16 14:45:28.105720  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/e3ea6acb81804035af5db7c1.json>.
09-16 14:45:28.106447  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:45:28.106646  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"4e871eb234594692852754fb"
],
"version154" : [
"6c80c9027dd7439188fa6327"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:45:28.106739  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ { "$oid" : "0ad7f1c344a0458fb6b492c1"},{ "$oid" : "b62e23b5130644418bad800e"},{ "$oid" : "549f2ad49c8b4e818a3eb3e1"},{ "$oid" : "e3ea6acb81804035af5db7c1"},{ "$oid" : "af9438c4244d4d10bb550f8e"},{ "$oid" : "808682bf022244a8a09c61c8"},{ "$oid" : "602f9a9cdbe04179a77aa489"},{ "$oid" : "c5d57394c68e4cdd8de8879b"},{ "$oid" : "cf4959b99b67433cb83955e1"},{ "$oid" : "8dab1b39242144b9a1922fcf"}]} }, "collection":"testJSON_V001"}
<end of output>
Test time =   1.99 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_search2_004_t" end time: Sep 16 14:45 CDT
"FileSystemJson_search2_004_t" time elapsed: 00:00:01
----------------------------------------------------------

End testing: Sep 16 14:45 CDT
