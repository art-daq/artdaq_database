Start testing: Sep 16 14:40 CDT
----------------------------------------------------------
64/65 Testing: FileSystemFhicl_update_003_t
64/65 Test: FileSystemFhicl_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/FileSystemFhicl_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.cmp.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/test003.update.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test003.src.fcl" "-c" "test003.cmp.fcl" "-t" "update" "-o" "test003.update.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test003/FileSystemFhicl_update_003_t.d
"FileSystemFhicl_update_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:23.719832  1  0 artdaq::database::filesystem trace_enable
09-16 14:40:23.720004  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:40:23.720086  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:23.794409  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:23.794421  1  3 deleteChild() args  path=<comments>
09-16 14:40:23.800070  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:23.801443  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.801561  1  3 deleteChild() deleted child value=array(...)
09-16 14:40:23.802689  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.802987  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
]
}>
09-16 14:40:23.802997  1  3 deleteChild() Delete succeeded.
09-16 14:40:23.803254  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:40:23.803266  1  3 deleteChild() args  path=<comments>
09-16 14:40:23.806242  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:23.808714  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.808733  1  3 deleteChild() deleted child value=array(...)
09-16 14:40:23.811083  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.811221  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:40:23.811227  1  3 deleteChild() Delete succeeded.
09-16 14:40:23.811455  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:40:23.811466  1  3 deleteChild() args  path=<comments>
09-16 14:40:23.814413  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:23.816779  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.816797  1  3 deleteChild() deleted child value=array(...)
09-16 14:40:23.819089  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.819224  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:40:23.819230  1  3 deleteChild() Delete succeeded.
09-16 14:40:23.819304  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:23.819315  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:23.819455  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.819463  1  5 findChild() args  path=<collection>
09-16 14:40:23.821021  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.822193  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.822221  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:23.822303  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.822309  1  5 findChild() Find succeeded.
09-16 14:40:23.823344  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.823353  1  5 findChild() args  path=<filter>
09-16 14:40:23.824883  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.826028  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.826037  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:23.826364  1 12 StorageProvider::FileSystemDB generate_oid=85020ca9a0704bf58a80ad2f
09-16 14:40:23.827397  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.827406  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "85020ca9a0704bf58a80ad2f"
    }
}>
09-16 14:40:23.827410  1  2 insertChild() args  path=<document._id>
09-16 14:40:23.829077  1  4 insertChild() new child value=object(...)
09-16 14:40:23.829086  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:23.830231  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.830241  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:23.831271  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.831299  1  4 insertChild() found child value=object(...)
09-16 14:40:23.832480  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.832553  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.832560  1  4 insertChild() Insert succeeded.
09-16 14:40:23.832597  1  4 StorageProvider::FileSystemDB::store() using generated oid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:23.832626  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:23.832643  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.832670  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.832783  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/85020ca9a0704bf58a80ad2f.json>.
09-16 14:40:23.832826  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.832831  1  5 findChild() args  path=<document>
09-16 14:40:23.834325  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.835475  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.835498  1  5 findChild() found child value=object(...)
09-16 14:40:23.836662  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
}
}>
09-16 14:40:23.836668  1  5 findChild() Find succeeded.
09-16 14:40:23.843815  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:23.843823  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:23.843856  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.844195  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:23.844202  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "85020ca9a0704bf58a80ad2f"
        }
    }>.
09-16 14:40:23.844209  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:23.845661  1  5 StorageProvider::FileSystemDB::index::addDocument() found 6 keys.
09-16 14:40:23.845681  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:23.845685  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:23.845689  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:23.845756  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:23.845761  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:23.845764  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:23.845786  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:23.846036  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.849808  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:23.849832  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:23.849837  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "85020ca9a0704bf58a80ad2f"}, "collection":"testFHICL_V001"}>
09-16 14:40:23.849931  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "85020ca9a0704bf58a80ad2f"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.849937  1  5 findChild() args  path=<collection>
09-16 14:40:23.850145  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.850252  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.850263  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:23.850327  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.850332  1  5 findChild() Find succeeded.
09-16 14:40:23.851289  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "85020ca9a0704bf58a80ad2f"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.851295  1  5 findChild() args  path=<filter>
09-16 14:40:23.851484  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.851590  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.851601  1  5 findChild() found child value=object(...)
09-16 14:40:23.851685  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
}
}>
09-16 14:40:23.851691  1  5 findChild() Find succeeded.
09-16 14:40:23.852657  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:23.852664  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.852674  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.852692  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:23.852696  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:23.852725  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.853120  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:23.853126  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "85020ca9a0704bf58a80ad2f"
    }>.
09-16 14:40:23.853220  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:23.853330  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:40:23.853335  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:23.853364  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:40:23.853481  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/85020ca9a0704bf58a80ad2f.json>.
09-16 14:40:23.853593  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:23.853846  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.853900  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:23.854024  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ], 
    "_id" : {
        "_oid" : "85020ca9a0704bf58a80ad2f"
    }
}>
09-16 14:40:23.854031  1  3 deleteChild() args  path=<_id>
09-16 14:40:23.855539  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:23.856599  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
}>
09-16 14:40:23.856614  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:23.857625  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.857694  1  3 deleteChild() deletedChild=<{
"_oid" : "85020ca9a0704bf58a80ad2f"
}>
09-16 14:40:23.857700  1  3 deleteChild() Delete succeeded.
09-16 14:40:23.857734  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.857740  1  5 findChild() args  path=<document>
09-16 14:40:23.860236  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.862426  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.072720  1  5 findChild() found child value=object(...)
09-16 14:40:24.074885  1  5 findChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
}
}>
09-16 14:40:24.074894  1  5 findChild() Find succeeded.
09-16 14:40:24.075143  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.075153  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                   
09-16 14:40:24.075170  1  4 replaceChild() args  path=<document>
09-16 14:40:24.078895  1  4 replaceChild() new child value=object(...)
09-16 14:40:24.078913  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:24.079913  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.080003  1  4 replaceChild() found child value=object(...)
09-16 14:40:24.082165  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.082999  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.083007  1  4 replaceChild() Replace succeeded.
09-16 14:40:24.083151  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.083159  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "filter":{ "$oid" : "85020ca9a0704bf58a80ad2f"},"collection":"testFHICL_V001"}>
09-16 14:40:24.083347  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
     
09-16 14:40:24.083359  1  5 findChild() args  path=<collection>
09-16 14:40:24.086244  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.088619  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.088642  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.088712  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.088717  1  5 findChild() Find succeeded.
09-16 14:40:24.089621  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
     
09-16 14:40:24.089634  1  5 findChild() args  path=<filter>
09-16 14:40:24.092438  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.094800  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.094823  1  5 findChild() found child value=object(...)
09-16 14:40:24.094912  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
}
}>
09-16 14:40:24.094918  1  5 findChild() Find succeeded.
09-16 14:40:24.095895  1  4 StorageProvider::FileSystemDB::store() found filter=<{
        "$oid" : "85020ca9a0704bf58a80ad2f"
    }>.
09-16 14:40:24.096647  1 12 value()JSON regex_search() result=85020ca9a0704bf58a80ad2f
09-16 14:40:24.096661  1  4 StorageProvider::FileSystemDB::store() using provided oid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:24.097552  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
   
09-16 14:40:24.097565  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "85020ca9a0704bf58a80ad2f"
    }
}>
09-16 14:40:24.097569  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.100462  1  4 insertChild() new child value=object(...)
09-16 14:40:24.100470  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.102830  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.102841  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.104972  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.104989  1  4 insertChild() found child value=object(...)
09-16 14:40:24.107348  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
},
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.107424  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
},
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.107431  1  4 insertChild() Insert succeeded.
09-16 14:40:24.107468  1  4 StorageProvider::FileSystemDB::store() using generated oid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:24.107481  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.107485  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.107501  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.107527  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/85020ca9a0704bf58a80ad2f.json>.
09-16 14:40:24.107566  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
},
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.107571  1  5 findChild() args  path=<document>
09-16 14:40:24.110248  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.112594  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
},
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.112626  1  5 findChild() found child value=object(...)
09-16 14:40:24.114969  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
}
}>
09-16 14:40:24.114977  1  5 findChild() Find succeeded.
09-16 14:40:24.129354  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.129362  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.129421  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.129973  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.129982  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "process_name" : "DAQ", 
                    "services" : {
                        "scheduler" : {
                            "fileMode" : "NOMERGE"
                        }, 
                        "user" : {
                            "NetMonTransportServiceInterface" : {
                                "data_receiver_count" : 1, 
                                "first_data_receiver_rank" : 6, 
                                "max_fragment_size_words" : 2097152, 
                                "mpi_buffer_count" : 8, 
                                "service_provider" : "NetMonTransportService"
                            }
                        }
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "process_name" : {
                            "type" : "string", 
                            "comment" : " ", 
                            "annotation" : " "
                        }, 
                        "services" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "scheduler" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "fileMode" : {
                                            "type" : "string", 
                                            "comment" : " ", 
                                            "annotation" : " "
                                        }
                                    }
                                }, 
                                "user" : {
                                    "type" : "table", 
                                    "comment" : " ", 
                                    "children" : {
                                        "NetMonTransportServiceInterface" : {
                                            "type" : "table", 
                                            "comment" : " ", 
                                            "children" : {
                                                "data_receiver_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : "# 2"
                                                }, 
                                                "first_data_receiver_rank" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "max_fragment_size_words" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                                }, 
                                                "mpi_buffer_count" : {
                                                    "type" : "number", 
                                                    "comment" : " ", 
                                                    "annotation" : " "
                                         
09-16 14:40:24.129992  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:24.132618  1  5 StorageProvider::FileSystemDB::index::addDocument() found 6 keys.
09-16 14:40:24.132628  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:24.132632  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:24.132635  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:24.132666  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:24.132670  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:24.132674  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:24.132707  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.133024  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.133089  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.133105  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:24.133109  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "85020ca9a0704bf58a80ad2f"}, "collection":"testFHICL_V001"}>
09-16 14:40:24.133135  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "85020ca9a0704bf58a80ad2f"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.133141  1  5 findChild() args  path=<collection>
09-16 14:40:24.133305  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.133426  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.133438  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.133503  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.133510  1  5 findChild() Find succeeded.
09-16 14:40:24.134352  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "85020ca9a0704bf58a80ad2f"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.134359  1  5 findChild() args  path=<filter>
09-16 14:40:24.134547  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.134652  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.134664  1  5 findChild() found child value=object(...)
09-16 14:40:24.134748  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "85020ca9a0704bf58a80ad2f"
}
}>
09-16 14:40:24.134754  1  5 findChild() Find succeeded.
09-16 14:40:24.135687  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.135694  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.135703  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.135719  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.135725  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.135756  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.136256  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:24.136263  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "85020ca9a0704bf58a80ad2f"
    }>.
09-16 14:40:24.136355  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:24.136373  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:40:24.136378  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<85020ca9a0704bf58a80ad2f>.
09-16 14:40:24.136385  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:40:24.136399  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/85020ca9a0704bf58a80ad2f.json>.
09-16 14:40:24.136637  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.136942  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.137001  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.137194  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:40:24.137205  1  3 deleteChild() args  path=<_id>
09-16 14:40:24.139864  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.142024  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "85020ca9a0704bf58a80ad2f"
}
}>
09-16 14:40:24.142041  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:24.144174  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.144244  1  3 deleteChild() deletedChild=<{
"_oid" : "85020ca9a0704bf58a80ad2f"
}>
09-16 14:40:24.144249  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.144294  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.144304  1 10 operator==() args  other.__json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
Running test:<update>
Search criteria {"filter":{ "$oid" : "85020ca9a0704bf58a80ad2f"}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.48 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_update_003_t" end time: Sep 16 14:40 CDT
"FileSystemFhicl_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

51/65 Testing: MongoJson_insert_001_t
51/65 Test: MongoJson_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test001/MongoJson_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test001/test001.cmp.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test001/MongoJson_insert_001_t.d
"MongoJson_insert_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:23.710979  1  0 artdaq::database::mongo trace_enable
09-16 14:40:23.711197  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:23.714937  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:23.715635  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:23.912491  1  5 inserted_id={
    "$oid" : "57dc4aa71a72ba1e4d6ed1e1"
}
09-16 14:40:23.912544  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:23.912548  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4aa71a72ba1e4d6ed1e1"
}, "collection":"testJSON_V001"}>
09-16 14:40:23.912640  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4aa71a72ba1e4d6ed1e1"
}>
09-16 14:40:23.912748  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa71a72ba1e4d6ed1e1"
            }
        ]
    }
}>
09-16 14:40:24.024842  1  3 found_count=1
09-16 14:40:24.025637  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa71a72ba1e4d6ed1e1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:40:24.025782  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4aa71a72ba1e4d6ed1e1"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:40:24.025789  1  3 deleteChild() args  path=<_id>
09-16 14:40:24.030055  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.032798  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4aa71a72ba1e4d6ed1e1"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:40:24.032853  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:24.033157  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:40:24.033228  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4aa71a72ba1e4d6ed1e1"
}>
09-16 14:40:24.033236  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.033289  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:40:24.033297  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:40:24.034343  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{
    "$oid" : "57dc4aa71a72ba1e4d6ed1e1"
}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.48 sec
----------------------------------------------------------
Test Passed.
"MongoJson_insert_001_t" end time: Sep 16 14:40 CDT
"MongoJson_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

55/65 Testing: MongoFhicl_insert_001_t
55/65 Test: MongoFhicl_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/MongoFhicl_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/test001.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/test001.cmp.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test001.src.fcl" "-c" "test001.cmp.fcl" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test001/MongoFhicl_insert_001_t.d
"MongoFhicl_insert_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:23.722100  1  0 artdaq::database::mongo trace_enable
09-16 14:40:23.722278  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:23.773316  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:23.773843  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.024937  1  5 inserted_id={
    "$oid" : "57dc4aa71a72ba1e60763691"
}
09-16 14:40:24.024988  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:24.024993  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4aa71a72ba1e60763691"
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.025073  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4aa71a72ba1e60763691"
}>
09-16 14:40:24.025170  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa71a72ba1e60763691"
            }
        ]
    }
}>
09-16 14:40:24.025531  1  3 found_count=1
09-16 14:40:24.026401  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa71a72ba1e60763691"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:24.026666  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4aa71a72ba1e60763691"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:24.026675  1  3 deleteChild() args  path=<_id>
09-16 14:40:24.031280  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.032626  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4aa71a72ba1e60763691"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.032691  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:24.033894  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.033969  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4aa71a72ba1e60763691"
}>
09-16 14:40:24.033976  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.034024  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.034033  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:24.037498  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{
    "$oid" : "57dc4aa71a72ba1e60763691"
}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_insert_001_t" end time: Sep 16 14:40 CDT
"MongoFhicl_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

46/65 Testing: RoundConvert_DBJson2Fhicl_004_t
46/65 Test: RoundConvert_DBJson2Fhicl_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/RoundConvert_DBJson2Fhicl_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/test004.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test004.json" "-c" "test004.json" "-t" "RoundConvert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test004/RoundConvert_DBJson2Fhicl_004_t.d
"RoundConvert_DBJson2Fhicl_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:24.267135  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:40:24.267256  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:40:24.267277  1  0 artdaq::database::fhicljson trace_enable
09-16 14:40:24.267295  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:40:24.268857  1  3 json_to_fhicl: begin
09-16 14:40:24.268878  1  3 json_to_fhicl: Reading json root nodes
09-16 14:40:24.282677  1  2 write_data() begin
09-16 14:40:24.282829  1  2 json2fcldb() key=<services> type=<table>
09-16 14:40:24.282927  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:40:24.282938  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:40:24.283089  1  2 json2fcldb() key=<user> type=<table>
09-16 14:40:24.283102  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:40:24.283110  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:40:24.283123  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:40:24.283181  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:40:24.283195  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:40:24.283206  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:40:24.283243  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:40:24.283254  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:40:24.283265  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:40:24.283274  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:40:24.283285  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:40:24.283296  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:40:24.283307  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:40:24.283318  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:40:24.283370  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:40:24.283383  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:40:24.283412  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:40:24.283424  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:40:24.283432  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:40:24.283444  1  2 json2fcldb() key=<level> type=<number>
09-16 14:40:24.283456  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:40:24.283483  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:40:24.283525  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:40:24.283536  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:40:24.283544  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:24.283555  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:40:24.283564  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:40:24.283748  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:40:24.283760  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:40:24.283769  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:40:24.283777  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:24.283789  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:40:24.283806  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:40:24.283815  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:24.283826  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:40:24.283851  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:40:24.283870  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:40:24.283888  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:40:24.283923  1  2 json2fcldb() key=<source> type=<table>
09-16 14:40:24.283934  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:24.283945  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:40:24.283957  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:40:24.283975  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:40:24.290543  1  2 write_data() end
09-16 14:40:24.290564  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:40:24.290571  1  3 json_to_fhicl: end
09-16 14:40:24.290639  1  2 fhicl_to_json: begin
09-16 14:40:24.290759  1  2 fhicl_to_json: Created root nodes
09-16 14:40:24.290835  1  2 read_comments begin
09-16 14:40:24.293852  1  2 read_comments end result=1
09-16 14:40:24.293862  1  2 read_data begin
09-16 14:40:24.293869  1  2 read_data() begin
09-16 14:40:24.320369  1  2 parse_document() returned 6 entries.
09-16 14:40:24.320519  1  2 fcl2jsondb() key=<services>
09-16 14:40:24.320572  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:40:24.320646  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.320681  1  2 fcl2jsondb() key=<scheduler>
09-16 14:40:24.320691  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:40:24.320704  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.320719  1  2 fcl2jsondb() key=<fileMode>
09-16 14:40:24.320723  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:40:24.320735  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.320790  1  2 fcl2jsondb() key=<user>
09-16 14:40:24.320805  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:40:24.320819  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.320836  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:40:24.320847  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:40:24.320860  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.320876  1  2 fcl2jsondb() key=<service_provider>
09-16 14:40:24.320880  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:40:24.320893  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.320910  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:40:24.320914  1  2 fcl2jsondb() value=<6>
09-16 14:40:24.320927  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.321849  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:24.321856  1  2 fcl2jsondb() value=<8>
09-16 14:40:24.321872  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.322688  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:24.322694  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:40:24.322710  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.323590  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:40:24.323597  1  2 fcl2jsondb() value=<1>
09-16 14:40:24.323667  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.324579  1  2 fcl2jsondb() key=<daq>
09-16 14:40:24.324609  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:40:24.324625  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.324645  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:24.324649  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:40:24.324662  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.325514  1  2 fcl2jsondb() key=<event_builder>
09-16 14:40:24.325537  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:40:24.325561  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.325594  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:24.325602  1  2 fcl2jsondb() value=<16>
09-16 14:40:24.325619  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.326438  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:40:24.326444  1  2 fcl2jsondb() value=<0>
09-16 14:40:24.326460  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.327263  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:40:24.327269  1  2 fcl2jsondb() value=<2>
09-16 14:40:24.327285  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.328092  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:40:24.328098  1  2 fcl2jsondb() value=<2>
09-16 14:40:24.328113  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.328952  1  2 fcl2jsondb() key=<use_art>
09-16 14:40:24.328958  1  2 fcl2jsondb() value=<true>
09-16 14:40:24.328974  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:24.329018  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:40:24.329024  1  2 fcl2jsondb() value=<true>
09-16 14:40:24.329038  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:24.329056  1  2 fcl2jsondb() key=<verbose>
09-16 14:40:24.329060  1  2 fcl2jsondb() value=<false>
09-16 14:40:24.329073  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:24.329111  1  2 fcl2jsondb() key=<metrics>
09-16 14:40:24.329126  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:40:24.329139  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.329156  1  2 fcl2jsondb() key=<evbFile>
09-16 14:40:24.329166  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:40:24.329178  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.329193  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:40:24.329197  1  2 fcl2jsondb() value=<"file">
09-16 14:40:24.329209  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.329225  1  2 fcl2jsondb() key=<level>
09-16 14:40:24.329230  1  2 fcl2jsondb() value=<3>
09-16 14:40:24.329242  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.330089  1  2 fcl2jsondb() key=<fileName>
09-16 14:40:24.330096  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:40:24.330163  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.330185  1  2 fcl2jsondb() key=<uniquify>
09-16 14:40:24.330189  1  2 fcl2jsondb() value=<true>
09-16 14:40:24.330203  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:24.330284  1  2 fcl2jsondb() key=<outputs>
09-16 14:40:24.330322  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:40:24.330337  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.330356  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:40:24.330371  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:40:24.330385  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.330404  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:24.330409  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:40:24.330422  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.330442  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:40:24.330453  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:40:24.330526  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.330546  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:40:24.330555  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:40:24.330626  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:24.330715  1  2 fcl2jsondb() key=<physics>
09-16 14:40:24.330744  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:40:24.330759  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.330780  1  2 fcl2jsondb() key=<filters>
09-16 14:40:24.330796  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:40:24.330808  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.330824  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:40:24.330832  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:40:24.330904  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.330923  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:24.330927  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:40:24.331000  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.331021  1  2 fcl2jsondb() key=<nth>
09-16 14:40:24.331026  1  2 fcl2jsondb() value=<2>
09-16 14:40:24.331098  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.331939  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:40:24.331951  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:40:24.331966  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.331981  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:24.331985  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:40:24.331997  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.332014  1  2 fcl2jsondb() key=<nth>
09-16 14:40:24.332018  1  2 fcl2jsondb() value=<3>
09-16 14:40:24.332094  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.332934  1  2 fcl2jsondb() key=<pmod2>
09-16 14:40:24.332944  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:40:24.332959  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:24.332988  1  2 fcl2jsondb() key=<pmod3>
09-16 14:40:24.332996  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:40:24.333070  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:24.333102  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:40:24.333110  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:40:24.333125  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:24.333178  1  2 fcl2jsondb() key=<source>
09-16 14:40:24.333189  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:40:24.333202  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.333217  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:24.333221  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:40:24.333292  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.333314  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:40:24.333318  1  2 fcl2jsondb() value=<900>
09-16 14:40:24.333390  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.334212  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:40:24.334219  1  2 fcl2jsondb() value=<true>
09-16 14:40:24.334296  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:24.334328  1  2 fcl2jsondb() key=<process_name>
09-16 14:40:24.334332  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:40:24.334346  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.334359  1  2 read_data() end
09-16 14:40:24.334381  1  2 read_data end result=1
09-16 14:40:24.334385  1  2 fhicl_to_json: write() begin
09-16 14:40:24.344710  1  2 fhicl_to_json: write() end
09-16 14:40:24.344718  1  2 fhicl_to_json: end
Running test:<RoundConvert_DBJson2Fhicl>
json_to_fhicl succeeded.
fhicl_to_json succeeded.
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2Fhicl_004_t" end time: Sep 16 14:40 CDT
"RoundConvert_DBJson2Fhicl_004_t" time elapsed: 00:00:00
----------------------------------------------------------

49/65 Testing: Convert_Fhicl2DBJson_007_t
49/65 Test: Convert_Fhicl2DBJson_007_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/Convert_Fhicl2DBJson_007_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/test007.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/test007.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test007.fcl" "-c" "test007.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test007/Convert_Fhicl2DBJson_007_t.d
"Convert_Fhicl2DBJson_007_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:24.267136  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:40:24.267256  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:40:24.267277  1  0 artdaq::database::fhicljson trace_enable
09-16 14:40:24.267295  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:40:24.269343  1  2 fhicl_to_json: begin
09-16 14:40:24.269610  1  2 fhicl_to_json: Created root nodes
09-16 14:40:24.269693  1  2 read_comments begin
09-16 14:40:24.275390  1  2 read_comments end result=1
09-16 14:40:24.275409  1  2 read_data begin
09-16 14:40:24.275420  1  2 read_data() begin
09-16 14:40:24.321256  1  2 parse_document() returned 86 entries.
09-16 14:40:24.321366  1  2 fcl2jsondb() key=<fhicl_pound_include_0>
09-16 14:40:24.321377  1  2 fcl2jsondb() value=<"metrics.fcl">
09-16 14:40:24.321436  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.321490  1  2 fcl2jsondb() key=<rce_standard>
09-16 14:40:24.321536  1  2 fcl2jsondb() value=<{metrics:"@local::metrics" max_fragment_size_words:1.048576e6 fragment_receiver:{mpi_buffer_count:16 mpi_sync_interval:24000 first_event_builder_rank:-1 event_builder_count:-1 generator:"TpcRceReceiver" fragment_type:"TPC" sleep_on_stop_us:0 number_of_microslices_per_millislice:10 rce_client_host_port:8090 rce_client_timeout_usecs:500000 rce_xml_config_file:"config/defaults.xml" rce_daq_mode:"Trigger" rce_feb_emulation_mode:false receiver_debug_level:0 receiver_tick_period_usecs:10000 reporting_interval_fragments:100 reporting_interval_time:10 raw_buffer_size:1.6e7 raw_buffer_precommit:100 use_fragments_as_raw_buffer:true data_timeout_usecs:3e7}}>
09-16 14:40:24.321561  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.321595  1  2 fcl2jsondb() key=<metrics>
09-16 14:40:24.321601  1  2 fcl2jsondb() value=<"@local::metrics">
09-16 14:40:24.321615  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.321638  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:24.321642  1  2 fcl2jsondb() value=<1.048576e6>
09-16 14:40:24.321655  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.322605  1  2 fcl2jsondb() key=<fragment_receiver>
09-16 14:40:24.322629  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 mpi_sync_interval:24000 first_event_builder_rank:-1 event_builder_count:-1 generator:"TpcRceReceiver" fragment_type:"TPC" sleep_on_stop_us:0 number_of_microslices_per_millislice:10 rce_client_host_port:8090 rce_client_timeout_usecs:500000 rce_xml_config_file:"config/defaults.xml" rce_daq_mode:"Trigger" rce_feb_emulation_mode:false receiver_debug_level:0 receiver_tick_period_usecs:10000 reporting_interval_fragments:100 reporting_interval_time:10 raw_buffer_size:1.6e7 raw_buffer_precommit:100 use_fragments_as_raw_buffer:true data_timeout_usecs:3e7}>
09-16 14:40:24.322647  1  2 fcl2jsondb() value type=<table>
09-16 14:40:24.322668  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:24.322672  1  2 fcl2jsondb() value=<16>
09-16 14:40:24.322685  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.323434  1  2 fcl2jsondb() key=<mpi_sync_interval>
09-16 14:40:24.323440  1  2 fcl2jsondb() value=<24000>
09-16 14:40:24.323456  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.324200  1  2 fcl2jsondb() key=<first_event_builder_rank>
09-16 14:40:24.324206  1  2 fcl2jsondb() value=<-1>
09-16 14:40:24.324307  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.325049  1  2 fcl2jsondb() key=<event_builder_count>
09-16 14:40:24.325055  1  2 fcl2jsondb() value=<-1>
09-16 14:40:24.325071  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.325829  1  2 fcl2jsondb() key=<generator>
09-16 14:40:24.325836  1  2 fcl2jsondb() value=<"TpcRceReceiver">
09-16 14:40:24.325851  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.325871  1  2 fcl2jsondb() key=<fragment_type>
09-16 14:40:24.325876  1  2 fcl2jsondb() value=<"TPC">
09-16 14:40:24.325889  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.325908  1  2 fcl2jsondb() key=<sleep_on_stop_us>
09-16 14:40:24.325912  1  2 fcl2jsondb() value=<0>
09-16 14:40:24.325983  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.326731  1  2 fcl2jsondb() key=<number_of_microslices_per_millislice>
09-16 14:40:24.326738  1  2 fcl2jsondb() value=<10>
09-16 14:40:24.326755  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.327495  1  2 fcl2jsondb() key=<rce_client_host_port>
09-16 14:40:24.327502  1  2 fcl2jsondb() value=<8090>
09-16 14:40:24.327517  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.328260  1  2 fcl2jsondb() key=<rce_client_timeout_usecs>
09-16 14:40:24.328266  1  2 fcl2jsondb() value=<500000>
09-16 14:40:24.328281  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.329034  1  2 fcl2jsondb() key=<rce_xml_config_file>
09-16 14:40:24.329040  1  2 fcl2jsondb() value=<"config/defaults.xml">
09-16 14:40:24.329115  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.329140  1  2 fcl2jsondb() key=<rce_daq_mode>
09-16 14:40:24.329145  1  2 fcl2jsondb() value=<"Trigger">
09-16 14:40:24.329274  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.329299  1  2 fcl2jsondb() key=<rce_feb_emulation_mode>
09-16 14:40:24.329303  1  2 fcl2jsondb() value=<false>
09-16 14:40:24.329382  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:24.329439  1  2 fcl2jsondb() key=<receiver_debug_level>
09-16 14:40:24.329445  1  2 fcl2jsondb() value=<0>
09-16 14:40:24.329460  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.330199  1  2 fcl2jsondb() key=<receiver_tick_period_usecs>
09-16 14:40:24.330205  1  2 fcl2jsondb() value=<10000>
09-16 14:40:24.330221  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.330973  1  2 fcl2jsondb() key=<reporting_interval_fragments>
09-16 14:40:24.330979  1  2 fcl2jsondb() value=<100>
09-16 14:40:24.330995  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.331742  1  2 fcl2jsondb() key=<reporting_interval_time>
09-16 14:40:24.331748  1  2 fcl2jsondb() value=<10>
09-16 14:40:24.331764  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.332502  1  2 fcl2jsondb() key=<raw_buffer_size>
09-16 14:40:24.332509  1  2 fcl2jsondb() value=<1.6e7>
09-16 14:40:24.332524  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.333269  1  2 fcl2jsondb() key=<raw_buffer_precommit>
09-16 14:40:24.333275  1  2 fcl2jsondb() value=<100>
09-16 14:40:24.333291  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.334037  1  2 fcl2jsondb() key=<use_fragments_as_raw_buffer>
09-16 14:40:24.334043  1  2 fcl2jsondb() value=<true>
09-16 14:40:24.334059  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:24.334081  1  2 fcl2jsondb() key=<data_timeout_usecs>
09-16 14:40:24.334086  1  2 fcl2jsondb() value=<3e7>
09-16 14:40:24.334099  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.334928  1  2 fcl2jsondb() key=<daq>
09-16 14:40:24.334940  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.334957  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.334973  1  2 fcl2jsondb() key=<fhicl_pound_include_1>
09-16 14:40:24.334977  1  2 fcl2jsondb() value=<"rce_expert_run_options.fcl">
09-16 14:40:24.334988  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.335002  1  2 fcl2jsondb() key=<fhicl_pound_include_2>
09-16 14:40:24.335006  1  2 fcl2jsondb() value=<"user_run_options.fcl">
09-16 14:40:24.335017  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.335031  1  2 fcl2jsondb() key=<rce_standard>
09-16 14:40:24.335035  1  2 fcl2jsondb() value=<"@local::daq">
09-16 14:40:24.335047  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.335061  1  2 fcl2jsondb() key=<rce00_standard>
09-16 14:40:24.335065  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.335078  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.335092  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.fragment_id>
09-16 14:40:24.335096  1  2 fcl2jsondb() value=<100>
09-16 14:40:24.335108  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.335850  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.board_id>
09-16 14:40:24.335856  1  2 fcl2jsondb() value=<0>
09-16 14:40:24.335872  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.336600  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.336606  1  2 fcl2jsondb() value=<"10.0.1.191">
09-16 14:40:24.336623  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.336638  1  2 fcl2jsondb() key=<rce00_standard.fragment_receiver.receive_port>
09-16 14:40:24.336642  1  2 fcl2jsondb() value=<7991>
09-16 14:40:24.336655  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.337391  1  2 fcl2jsondb() key=<rce01_standard>
09-16 14:40:24.337400  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.337416  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.337432  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.fragment_id>
09-16 14:40:24.337436  1  2 fcl2jsondb() value=<101>
09-16 14:40:24.337449  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.338183  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.board_id>
09-16 14:40:24.338189  1  2 fcl2jsondb() value=<1>
09-16 14:40:24.338205  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.338936  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.338942  1  2 fcl2jsondb() value=<"10.0.1.192">
09-16 14:40:24.338957  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.338973  1  2 fcl2jsondb() key=<rce01_standard.fragment_receiver.receive_port>
09-16 14:40:24.338977  1  2 fcl2jsondb() value=<7992>
09-16 14:40:24.338990  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.339731  1  2 fcl2jsondb() key=<rce02_standard>
09-16 14:40:24.339738  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.339753  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.339768  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.fragment_id>
09-16 14:40:24.339773  1  2 fcl2jsondb() value=<102>
09-16 14:40:24.339785  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.340524  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.board_id>
09-16 14:40:24.340531  1  2 fcl2jsondb() value=<2>
09-16 14:40:24.340546  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.341276  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.341282  1  2 fcl2jsondb() value=<"10.0.1.193">
09-16 14:40:24.341298  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.341313  1  2 fcl2jsondb() key=<rce02_standard.fragment_receiver.receive_port>
09-16 14:40:24.341317  1  2 fcl2jsondb() value=<7993>
09-16 14:40:24.341329  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.342086  1  2 fcl2jsondb() key=<rce03_standard>
09-16 14:40:24.342092  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.342107  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.342123  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.fragment_id>
09-16 14:40:24.342127  1  2 fcl2jsondb() value=<103>
09-16 14:40:24.342140  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.342906  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.board_id>
09-16 14:40:24.342913  1  2 fcl2jsondb() value=<3>
09-16 14:40:24.342928  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.343660  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.343667  1  2 fcl2jsondb() value=<"10.0.1.194">
09-16 14:40:24.343682  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.343698  1  2 fcl2jsondb() key=<rce03_standard.fragment_receiver.receive_port>
09-16 14:40:24.343702  1  2 fcl2jsondb() value=<7994>
09-16 14:40:24.343715  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.344456  1  2 fcl2jsondb() key=<rce04_standard>
09-16 14:40:24.344462  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.344478  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.344493  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:40:24.344497  1  2 fcl2jsondb() value=<104>
09-16 14:40:24.344510  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.345245  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.board_id>
09-16 14:40:24.345251  1  2 fcl2jsondb() value=<4>
09-16 14:40:24.345266  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.346070  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.346078  1  2 fcl2jsondb() value=<"10.0.1.195">
09-16 14:40:24.346094  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.346110  1  2 fcl2jsondb() key=<rce04_standard.fragment_receiver.receive_port>
09-16 14:40:24.346114  1  2 fcl2jsondb() value=<7995>
09-16 14:40:24.346127  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.346930  1  2 fcl2jsondb() key=<rce05_standard>
09-16 14:40:24.346937  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.346951  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.346967  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:40:24.346971  1  2 fcl2jsondb() value=<105>
09-16 14:40:24.346984  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.347729  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.board_id>
09-16 14:40:24.347735  1  2 fcl2jsondb() value=<5>
09-16 14:40:24.347750  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.348491  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.348497  1  2 fcl2jsondb() value=<"10.0.1.196">
09-16 14:40:24.348513  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.348529  1  2 fcl2jsondb() key=<rce05_standard.fragment_receiver.receive_port>
09-16 14:40:24.348533  1  2 fcl2jsondb() value=<7996>
09-16 14:40:24.348546  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.349283  1  2 fcl2jsondb() key=<rce06_standard>
09-16 14:40:24.349289  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.349304  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.349320  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.fragment_id>
09-16 14:40:24.349324  1  2 fcl2jsondb() value=<106>
09-16 14:40:24.349337  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.350078  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.board_id>
09-16 14:40:24.350084  1  2 fcl2jsondb() value=<6>
09-16 14:40:24.350099  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.350836  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.350842  1  2 fcl2jsondb() value=<"10.0.1.197">
09-16 14:40:24.350857  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.350873  1  2 fcl2jsondb() key=<rce06_standard.fragment_receiver.receive_port>
09-16 14:40:24.350877  1  2 fcl2jsondb() value=<7997>
09-16 14:40:24.350889  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.351630  1  2 fcl2jsondb() key=<rce07_standard>
09-16 14:40:24.351637  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.351652  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.351667  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.fragment_id>
09-16 14:40:24.351672  1  2 fcl2jsondb() value=<107>
09-16 14:40:24.351684  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.352423  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.board_id>
09-16 14:40:24.352429  1  2 fcl2jsondb() value=<7>
09-16 14:40:24.352445  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.353177  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.353183  1  2 fcl2jsondb() value=<"10.0.1.198">
09-16 14:40:24.353198  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.353214  1  2 fcl2jsondb() key=<rce07_standard.fragment_receiver.receive_port>
09-16 14:40:24.353218  1  2 fcl2jsondb() value=<7998>
09-16 14:40:24.353230  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.353976  1  2 fcl2jsondb() key=<rce08_standard>
09-16 14:40:24.353982  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.353998  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.354013  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.fragment_id>
09-16 14:40:24.354017  1  2 fcl2jsondb() value=<108>
09-16 14:40:24.354030  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.354767  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.board_id>
09-16 14:40:24.354773  1  2 fcl2jsondb() value=<8>
09-16 14:40:24.354789  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.355527  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.355533  1  2 fcl2jsondb() value=<"10.0.1.181">
09-16 14:40:24.355549  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.355564  1  2 fcl2jsondb() key=<rce08_standard.fragment_receiver.receive_port>
09-16 14:40:24.355569  1  2 fcl2jsondb() value=<8991>
09-16 14:40:24.355581  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.356318  1  2 fcl2jsondb() key=<rce09_standard>
09-16 14:40:24.356324  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.356339  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.356354  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.fragment_id>
09-16 14:40:24.356359  1  2 fcl2jsondb() value=<109>
09-16 14:40:24.356371  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.357106  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.board_id>
09-16 14:40:24.357112  1  2 fcl2jsondb() value=<9>
09-16 14:40:24.357127  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.357860  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.357866  1  2 fcl2jsondb() value=<"10.0.1.182">
09-16 14:40:24.357882  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.357897  1  2 fcl2jsondb() key=<rce09_standard.fragment_receiver.receive_port>
09-16 14:40:24.357901  1  2 fcl2jsondb() value=<8992>
09-16 14:40:24.357914  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.358652  1  2 fcl2jsondb() key=<rce10_standard>
09-16 14:40:24.358669  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.358685  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.358701  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.fragment_id>
09-16 14:40:24.358706  1  2 fcl2jsondb() value=<110>
09-16 14:40:24.358718  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.359474  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.board_id>
09-16 14:40:24.359480  1  2 fcl2jsondb() value=<10>
09-16 14:40:24.359496  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.360220  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.360226  1  2 fcl2jsondb() value=<"10.0.1.183">
09-16 14:40:24.360241  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.360256  1  2 fcl2jsondb() key=<rce10_standard.fragment_receiver.receive_port>
09-16 14:40:24.360260  1  2 fcl2jsondb() value=<8993>
09-16 14:40:24.360273  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.360997  1  2 fcl2jsondb() key=<rce11_standard>
09-16 14:40:24.361003  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.361017  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.361032  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.fragment_id>
09-16 14:40:24.361037  1  2 fcl2jsondb() value=<111>
09-16 14:40:24.361049  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.361768  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.board_id>
09-16 14:40:24.361774  1  2 fcl2jsondb() value=<11>
09-16 14:40:24.361790  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.362514  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.362520  1  2 fcl2jsondb() value=<"10.0.1.184">
09-16 14:40:24.362535  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.362550  1  2 fcl2jsondb() key=<rce11_standard.fragment_receiver.receive_port>
09-16 14:40:24.362555  1  2 fcl2jsondb() value=<8994>
09-16 14:40:24.362567  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.363284  1  2 fcl2jsondb() key=<rce12_standard>
09-16 14:40:24.363290  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.363305  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.363320  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.fragment_id>
09-16 14:40:24.363324  1  2 fcl2jsondb() value=<112>
09-16 14:40:24.363336  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.364115  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.board_id>
09-16 14:40:24.364121  1  2 fcl2jsondb() value=<12>
09-16 14:40:24.364137  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.364875  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.364883  1  2 fcl2jsondb() value=<"10.0.1.185">
09-16 14:40:24.364898  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.364915  1  2 fcl2jsondb() key=<rce12_standard.fragment_receiver.receive_port>
09-16 14:40:24.364920  1  2 fcl2jsondb() value=<8995>
09-16 14:40:24.364932  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.365700  1  2 fcl2jsondb() key=<rce13_standard>
09-16 14:40:24.365708  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.365723  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.365739  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.fragment_id>
09-16 14:40:24.365744  1  2 fcl2jsondb() value=<113>
09-16 14:40:24.365757  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.366518  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.board_id>
09-16 14:40:24.366525  1  2 fcl2jsondb() value=<13>
09-16 14:40:24.366540  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.367256  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.367263  1  2 fcl2jsondb() value=<"10.0.1.186">
09-16 14:40:24.367279  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.367295  1  2 fcl2jsondb() key=<rce13_standard.fragment_receiver.receive_port>
09-16 14:40:24.367300  1  2 fcl2jsondb() value=<8996>
09-16 14:40:24.367313  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.368038  1  2 fcl2jsondb() key=<rce14_standard>
09-16 14:40:24.368045  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.368060  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.368077  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.fragment_id>
09-16 14:40:24.368082  1  2 fcl2jsondb() value=<114>
09-16 14:40:24.368095  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.368818  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.board_id>
09-16 14:40:24.368826  1  2 fcl2jsondb() value=<14>
09-16 14:40:24.368842  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.369584  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.369591  1  2 fcl2jsondb() value=<"10.0.1.187">
09-16 14:40:24.369607  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.369623  1  2 fcl2jsondb() key=<rce14_standard.fragment_receiver.receive_port>
09-16 14:40:24.369627  1  2 fcl2jsondb() value=<8997>
09-16 14:40:24.369639  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.370370  1  2 fcl2jsondb() key=<rce15_standard>
09-16 14:40:24.370378  1  2 fcl2jsondb() value=<"@local::rce_standard">
09-16 14:40:24.370393  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.370446  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.fragment_id>
09-16 14:40:24.370451  1  2 fcl2jsondb() value=<115>
09-16 14:40:24.370464  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.371179  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.board_id>
09-16 14:40:24.371186  1  2 fcl2jsondb() value=<15>
09-16 14:40:24.371201  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.371919  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.rce_client_host_addr>
09-16 14:40:24.371927  1  2 fcl2jsondb() value=<"10.0.1.188">
09-16 14:40:24.371942  1  2 fcl2jsondb() value type=<string>
09-16 14:40:24.371958  1  2 fcl2jsondb() key=<rce15_standard.fragment_receiver.receive_port>
09-16 14:40:24.371963  1  2 fcl2jsondb() value=<8998>
09-16 14:40:24.371976  1  2 fcl2jsondb() value type=<number>
09-16 14:40:24.372754  1  2 read_data() end
09-16 14:40:24.372796  1  2 read_data end result=1
09-16 14:40:24.372801  1  2 fhicl_to_json: write() begin
09-16 14:40:24.390285  1  2 fhicl_to_json: write() end
09-16 14:40:24.390297  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.19 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_007_t" end time: Sep 16 14:40 CDT
"Convert_Fhicl2DBJson_007_t" time elapsed: 00:00:00
----------------------------------------------------------

39/65 Testing: RoundConvert_DBJson2GUIJson_003_t
39/65 Test: RoundConvert_DBJson2GUIJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_003_t.d
"RoundConvert_DBJson2GUIJson_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:23.699037  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:23.708434  1 10 json_db_to_gui() begin
09-16 14:40:23.740966  1 10 json_db_to_gui() read dbAST
09-16 14:40:23.741178  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.741233  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.741274  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.741318  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.741409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.741443  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:40:23.741491  1 13 json_db_to_gui() child args name <prolog>
09-16 14:40:23.741497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.741542  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:40:23.741549  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.741563  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.741570  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.741630  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.741687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.741732  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.741738  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.741764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.741824  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.741830  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.741836  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.741841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.741854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.741860  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:40:23.741866  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:40:23.741871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742081  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:40:23.742091  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742096  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.742102  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.742112  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.742122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742133  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.742138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742147  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742180  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.742186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742197  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.742202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742235  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:40:23.742243  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:40:23.742247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742283  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:40:23.742291  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742296  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.742301  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.742311  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.742321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742332  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.742337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742357  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742363  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.742368  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.742373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.742385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742390  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:40:23.742403  1 13 json_db_to_gui() child args name <metrics>
09-16 14:40:23.742414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742440  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:40:23.742447  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742452  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.742457  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.742467  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.742477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742487  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.742492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742511  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.742516  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742525  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.742529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742537  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:23.742544  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:23.742548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742570  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:23.742577  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742581  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.742586  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.742595  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.742605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742614  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.742619  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742628  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742649  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.742654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742663  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.742668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742676  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:40:23.742682  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:40:23.742687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742708  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:40:23.742715  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742719  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.742724  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.742734  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.742743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742753  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.742758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742777  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742782  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.742788  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.742792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.742805  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742810  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:23.742816  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:23.742821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742843  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:23.742850  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742855  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.742860  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.742869  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.742878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742888  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.742893  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.742911  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.742916  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742925  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.742930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742937  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:40:23.742944  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:40:23.742948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.742970  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:40:23.742976  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.742981  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.742986  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.742994  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.743003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743013  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.743018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743027  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743036  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.743041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743049  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.743054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743062  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:40:23.743068  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:40:23.743073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743094  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:40:23.743100  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743106  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.743111  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.743120  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.743129  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743139  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.743143  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743162  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.743167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743175  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.743180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743188  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:40:23.743194  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:40:23.743198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743220  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:40:23.743226  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743231  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.743236  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.743244  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.743254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743263  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.743268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743286  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.743291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743299  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.743304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743312  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:40:23.743318  1 13 json_db_to_gui() child args name <generator>
09-16 14:40:23.743322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743344  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:40:23.743350  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743355  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.743360  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.743369  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.743377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743387  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.743392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743416  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.743420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743439  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.743444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743451  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:40:23.743458  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:40:23.743462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743483  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:40:23.743490  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743495  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.743499  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.743508  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.743517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743526  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.743531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743540  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743549  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.743553  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743562  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.743566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743574  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:40:23.743580  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:40:23.743584  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743605  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:40:23.743611  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743616  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.743621  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.743629  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.743638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743647  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.743652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743669  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.743674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743682  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.743687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743694  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:40:23.743700  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:40:23.743705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743725  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:40:23.743732  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743737  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.743741  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.743750  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.743758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743767  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.743772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743789  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.743794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743802  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.743807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743814  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:40:23.743820  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:40:23.743825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743846  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:40:23.743853  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743857  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.743862  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.743871  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.743880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743889  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.743894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.743912  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743917  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.743922  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.743927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.743939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743944  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:40:23.743950  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:40:23.743954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.743976  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:40:23.743983  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.743987  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.743992  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.744001  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.744010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744019  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.744024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744042  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.744047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744055  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.744060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744067  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:40:23.744074  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:40:23.744078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744099  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:40:23.744106  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.744110  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.744115  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.744124  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.744132  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744141  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.744146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744164  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.744168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744177  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.744181  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744189  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:40:23.744195  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:40:23.744199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744221  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:40:23.744228  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.744232  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.744237  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.744246  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.744255  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744264  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.744268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744286  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.744291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744299  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.744304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744311  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:40:23.744317  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:40:23.744321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744343  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:40:23.744349  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.744354  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.744358  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.744367  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.744376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744385  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.744389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744407  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744425  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.744432  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744448  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.744454  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744462  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:40:23.744468  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:40:23.744472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744495  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:40:23.744502  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.744506  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.744511  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.744520  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.744529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744539  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.744543  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744561  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.744566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744574  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.744579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744586  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:40:23.744592  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:40:23.744597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744619  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:40:23.744625  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.744630  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.744635  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.744644  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.744652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744662  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.744666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744684  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.744689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744697  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.744702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744717  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.744721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744728  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:40:23.744734  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:40:23.744739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744760  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:40:23.744766  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.744771  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.744776  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.744784  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.744793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744802  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.744807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744826  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.744831  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.744836  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.744841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.744852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744858  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:40:23.744864  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:40:23.744868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744890  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:40:23.744897  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.744901  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.744906  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.744915  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.744924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744933  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.744938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.744956  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.744961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744969  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.744975  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.744982  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:40:23.744989  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:40:23.744993  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745015  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:40:23.745021  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.745026  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.745030  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.745039  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.745048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745057  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.745062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745080  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.745085  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.745090  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.745095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.745106  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745112  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:40:23.745118  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:40:23.745122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745145  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:40:23.745151  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.745156  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.745160  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.745169  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.745178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745188  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.745193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745211  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.745215  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745224  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.745228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745236  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:40:23.745242  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:40:23.745247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745269  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:40:23.745275  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.745280  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.745284  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.745293  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.745302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745311  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.745316  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745333  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.745338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745347  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.745352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745359  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:40:23.745366  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:40:23.745370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745392  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:40:23.745409  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.745417  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.745424  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.745436  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.745450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745464  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.745471  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745498  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.745505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745518  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.745524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745539  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.745546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745558  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:40:23.745569  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:40:23.745576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745613  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:40:23.745626  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.745636  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.745642  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.745652  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.745662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745672  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.745677  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745695  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.745700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745709  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.745713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745724  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:40:23.745737  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:40:23.745745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745780  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:40:23.745790  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.745798  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.745805  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.745817  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.745834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745849  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.745854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745864  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745874  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.745878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745887  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.745892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745900  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:40:23.745906  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:40:23.745911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745933  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:40:23.745940  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.745945  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.745950  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.745959  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.745968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.745977  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.745982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.745991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746000  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746004  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746013  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.746018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746025  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:40:23.746032  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:40:23.746036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746057  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:40:23.746064  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.746069  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.746073  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.746082  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.746091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746100  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.746105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746122  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746127  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746136  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.746140  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746148  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:40:23.746154  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:40:23.746158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746180  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:40:23.746186  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.746191  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.746196  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.746204  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.746213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746223  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.746228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746246  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746251  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746260  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.746264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746272  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:40:23.746278  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:40:23.746282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746304  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:40:23.746310  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.746315  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.746320  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.746328  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.746337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746346  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.746351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746369  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746373  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746382  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.746387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746398  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:40:23.746406  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:40:23.746410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746432  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:40:23.746439  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.746444  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.746449  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.746457  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.746466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746476  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.746480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746498  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746511  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.746516  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746523  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:40:23.746529  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:40:23.746534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746555  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:40:23.746562  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.746567  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.746571  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.746580  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.746589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746599  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.746604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746622  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746635  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.746639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746647  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:40:23.746653  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:40:23.746657  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746679  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:40:23.746685  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.746690  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.746695  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.746704  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.746712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746722  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.746727  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746744  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746757  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.746762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746770  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:40:23.746776  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:40:23.746780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746802  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:40:23.746808  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.746813  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.746818  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.746826  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.746835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746844  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.746849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746866  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746879  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.746884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746892  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:40:23.746898  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:40:23.746902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746924  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:40:23.746930  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.746935  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.746940  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.746948  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.746958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746967  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.746972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.746981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.746990  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.746994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747003  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747008  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747015  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:40:23.747021  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:40:23.747026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747047  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:40:23.747054  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.747058  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.747063  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.747072  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.747081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747090  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.747095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747112  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.747117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747126  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747138  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:40:23.747144  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:40:23.747148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747170  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:40:23.747176  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.747181  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.747186  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.747194  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.747203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747212  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.747217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747234  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.747239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747248  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747260  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:40:23.747266  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:40:23.747270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747292  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:40:23.747298  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.747303  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.747308  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.747317  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.747326  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747335  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.747340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747358  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.747362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747371  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747383  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:40:23.747389  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:40:23.747394  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747420  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:40:23.747427  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.747432  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.747437  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.747446  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.747455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747464  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.747469  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747487  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.747491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747500  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747512  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:40:23.747519  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:40:23.747523  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747545  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:40:23.747551  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.747556  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.747560  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.747569  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.747578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747587  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.747591  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747600  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747609  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.747614  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747622  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747635  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:40:23.747641  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:40:23.747645  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747667  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:40:23.747673  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.747678  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.747683  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.747692  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.747701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747710  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.747715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747732  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.747737  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747746  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747758  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:40:23.747764  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:40:23.747769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747790  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:40:23.747797  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.747801  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.747806  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.747815  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.747823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747833  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.747837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747855  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.747859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747868  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747880  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:40:23.747886  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:40:23.747891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747913  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:40:23.747919  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.747924  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.747929  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.747937  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.747946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747955  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.747960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.747977  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.747982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.747990  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.747995  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.748002  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:40:23.748008  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:40:23.748013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.748034  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:40:23.748041  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.872481  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.872495  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.872515  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.872534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872547  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.872552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872571  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.872575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872583  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.872587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872596  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:40:23.872604  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:40:23.872607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872639  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:40:23.872646  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.872650  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.872653  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.872660  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.872667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872675  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.872678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872685  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872692  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.872696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872702  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.872706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872712  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:40:23.872716  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:40:23.872720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872738  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:40:23.872743  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.872746  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.872750  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.872756  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.872763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872770  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.872774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872787  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.872791  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872797  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.872801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872807  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:40:23.872811  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:40:23.872815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872832  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:40:23.872837  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.872841  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.872844  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.872851  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.872858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872865  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.872868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872882  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.872885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872892  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.872895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872901  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:40:23.872906  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:40:23.872909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872926  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:40:23.872931  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.872935  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.872938  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.872945  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.872952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872959  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.872962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.872976  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.872979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872986  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.872990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.872995  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:40:23.873000  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:40:23.873003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873020  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:40:23.873025  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873028  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873032  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873039  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873045  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873052  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873069  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873080  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873089  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:40:23.873093  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:40:23.873097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873114  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:40:23.873118  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873122  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873126  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873132  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873146  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873150  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873163  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873173  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873183  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:40:23.873187  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:40:23.873191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873208  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:40:23.873213  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873216  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873220  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873226  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873240  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873257  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873267  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873277  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:40:23.873281  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:40:23.873285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873301  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:40:23.873306  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873310  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873313  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873320  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873334  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873344  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873351  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873354  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873361  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873380  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:40:23.873385  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:40:23.873389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873413  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:40:23.873429  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873432  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873436  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873443  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873457  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873475  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873479  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873485  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873495  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:40:23.873500  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:40:23.873503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873520  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:40:23.873525  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873528  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873532  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873539  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873552  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873556  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873570  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873580  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873589  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:40:23.873594  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:40:23.873597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873614  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:40:23.873619  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873622  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873626  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873632  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873646  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873657  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873663  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873678  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873690  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:40:23.873695  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:40:23.873698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873715  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:40:23.873721  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873725  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873729  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873745  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873762  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873782  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873802  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873813  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:40:23.873818  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:40:23.873821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873839  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:40:23.873844  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873848  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873852  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873859  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873867  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873874  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873893  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873904  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.873908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873914  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:40:23.873919  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:40:23.873923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873940  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:40:23.873946  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.873949  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.873954  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.873960  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.873968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873976  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.873980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.873987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.873994  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.873998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874005  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874015  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:40:23.874021  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:40:23.874024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874041  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:40:23.874047  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.874050  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.874055  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.874061  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.874069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874076  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.874081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874088  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874095  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.874099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874106  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874116  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:40:23.874121  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:40:23.874125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874142  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:40:23.874148  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.874151  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.874156  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.874162  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.874170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874177  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.874182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874196  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.874200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874207  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874217  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:40:23.874222  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:40:23.874226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874243  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:40:23.874249  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.874252  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.874257  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.874263  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.874271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874279  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.874283  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874297  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.874301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874308  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874312  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874318  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:40:23.874324  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:40:23.874327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874344  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:40:23.874350  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.874353  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.874358  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.874365  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.874372  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874380  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.874384  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874391  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874413  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.874417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874425  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874448  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874460  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874471  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874482  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:23.874487  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:23.874491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874507  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:23.874513  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.874517  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.874521  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.874528  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.874535  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874543  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.874547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874554  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874562  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.874567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874574  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874584  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:40:23.874589  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:40:23.874593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874608  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:40:23.874614  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.874628  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.874634  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.874645  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.874658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874676  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.874695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874722  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.874725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874733  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874736  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874743  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:40:23.874748  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:40:23.874754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874771  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:40:23.874786  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.874799  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.874803  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.874811  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.874818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874826  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.874832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874847  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.874852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874859  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.874862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874869  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:40:23.874874  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:40:23.874878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874894  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:40:23.874909  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.874922  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.874926  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.874933  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.874940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874948  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.874952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874959  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.874968  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.874973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.874998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875003  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:40:23.875011  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875023  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:40:23.875029  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:40:23.875032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875048  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:40:23.875054  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875058  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875063  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875070  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875085  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875090  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875106  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875117  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875128  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:23.875134  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:23.875137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875153  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:23.875160  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875164  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875168  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875175  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875191  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875196  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875211  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875223  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875227  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875233  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:23.875239  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:40:23.875243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875258  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:23.875264  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875268  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875273  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875280  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875296  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875315  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875326  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875337  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:23.875343  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:23.875346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875362  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:23.875368  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875371  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875375  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875382  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875401  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875406  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875422  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875426  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875433  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875438  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875444  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.875450  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.875453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875469  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.875476  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875479  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875484  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875491  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875499  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875507  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875529  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875541  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875551  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:40:23.875557  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:40:23.875561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875576  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:40:23.875583  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875587  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875591  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875599  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875615  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875619  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875635  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875646  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875657  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:23.875663  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:23.875666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875682  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:23.875688  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875692  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875696  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875703  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875719  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875739  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875750  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875761  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:23.875766  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:40:23.875770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875786  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:23.875792  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875795  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875800  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875807  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875823  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875842  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875854  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875864  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:23.875870  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:23.875873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875889  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:23.875895  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.875899  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.875903  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.875910  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.875918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875926  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.875930  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.875946  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.875950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875957  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.875961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875968  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.875973  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.875978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.875994  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.876000  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876004  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876009  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876015  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876031  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876036  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876051  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876062  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876072  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:40:23.876078  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:40:23.876081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876097  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:40:23.876103  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876107  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876112  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876118  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876135  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876154  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876165  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876176  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:23.876182  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:23.876185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876201  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:23.876207  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876211  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876215  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876222  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876238  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876257  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876270  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876282  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:23.876287  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:40:23.876291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876307  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:23.876313  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876317  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876322  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876329  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876345  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876364  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876376  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876386  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:23.876392  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:23.876398  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876415  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:23.876421  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876425  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876429  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876436  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876453  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876472  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876484  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876493  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.876499  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.876502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876518  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.876524  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876528  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876532  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876539  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876555  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876574  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876586  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876596  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:40:23.876602  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:40:23.876605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876622  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:40:23.876629  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876633  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876637  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876644  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876660  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876680  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876684  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876691  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876701  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:23.876707  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:23.876711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876727  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:23.876733  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876737  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876741  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876748  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876764  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876783  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876794  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876805  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:23.876811  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:40:23.876814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876830  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:23.876836  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876840  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876845  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876852  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876868  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876888  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876899  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.876903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876910  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:23.876915  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:23.876919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876934  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:23.876941  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.876944  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.876949  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.876956  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.876963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876972  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.876976  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.876983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.876991  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.876995  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877002  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877013  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.877019  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.877022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877038  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.877044  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877048  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877052  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877060  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877068  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877076  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877095  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877108  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877119  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:40:23.877125  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:40:23.877128  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877144  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:40:23.877151  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877154  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877158  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877166  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877182  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877202  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877213  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877223  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:23.877229  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:23.877233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877248  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:23.877255  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877258  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877263  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877270  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877286  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877297  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877305  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877316  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877327  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:23.877333  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:40:23.877336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877352  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:23.877358  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877362  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877366  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877373  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877389  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877394  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877411  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877416  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877423  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877433  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:23.877439  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:23.877442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877458  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:23.877465  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877468  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877473  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877480  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877496  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877508  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877516  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877527  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877537  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.877542  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.877546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877562  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.877567  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877571  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877574  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877581  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877598  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877617  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877628  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877633  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877639  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:40:23.877644  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:40:23.877648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877664  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:40:23.877670  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877674  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877679  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877686  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877693  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877702  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877721  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877733  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877737  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877743  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:23.877749  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:23.877752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877768  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:23.877774  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877778  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877783  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877789  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877805  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877825  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877830  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877837  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877847  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:23.877853  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:40:23.877857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877873  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:23.877879  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877882  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877887  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.877894  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.877901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877910  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.877914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.877931  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.877936  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877943  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.877947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877953  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:23.877959  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:23.877963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.877979  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:23.877985  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.877989  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.877993  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878000  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878008  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878016  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878028  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878036  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878047  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878058  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.878064  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.878067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878084  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.878090  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878093  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878098  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878105  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878121  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878141  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878152  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878162  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:40:23.878168  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:40:23.878171  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878188  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:40:23.878194  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878199  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878202  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878210  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878218  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878226  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878246  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878257  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878268  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:23.878274  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:23.878277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878293  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:23.878300  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878303  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878308  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878315  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878331  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878351  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878362  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878373  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:23.878379  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:40:23.878382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878401  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:23.878408  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878412  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878415  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878422  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878439  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878459  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878470  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878480  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:23.878486  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:23.878490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878506  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:23.878512  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878516  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878521  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878527  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878535  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878543  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878563  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878575  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878585  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.878591  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.878594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878610  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.878617  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878620  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878625  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878632  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878640  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878648  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878668  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878679  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878689  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:40:23.878695  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:40:23.878698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878714  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:40:23.878721  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878725  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878730  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878736  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878753  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878775  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878779  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878786  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878806  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:23.878812  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:23.878816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878832  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:23.878838  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878841  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878846  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878852  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878860  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878868  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878887  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878898  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.878903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878909  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:23.878914  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:40:23.878918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878934  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:23.878940  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.878943  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.878948  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.878955  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.878962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878970  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.878975  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.878982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.878990  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.878994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879001  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.879005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879011  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:23.879016  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:23.879020  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879036  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:23.879042  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.879046  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.879050  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.879057  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.879065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.879073  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.879077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.879092  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.879096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879103  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.879107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879113  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.879119  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.879122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879138  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.879144  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.879148  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.879153  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.879159  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.879167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.879175  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.879179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.879194  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.879199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879205  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.879210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879217  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.879222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879228  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:40:23.879233  1 13 json_db_to_gui() child args name <main>
09-16 14:40:23.879237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879242  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:40:23.879248  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.879252  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.879255  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.879263  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.879270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.879278  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.879282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.879300  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.879305  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.879310  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.879315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.879327  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879334  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.879339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.879398  1 10 json_db_to_gui() created gui_node
09-16 14:40:23.914280  1 10 json_db_to_gui() created gui_json
09-16 14:40:23.914443  1 14 json_gui_to_db() begin
09-16 14:40:23.947663  1 14 json_gui_to_db() read guiAST
09-16 14:40:23.947701  1 14 json_gui_to_db() created dbAST
09-16 14:40:23.947733  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.947748  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.947754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.947788  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.947804  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.947812  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:40:23.947817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947861  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:40:23.947865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947871  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.947876  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.947881  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.947885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.947889  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.947897  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.947916  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:40:23.947923  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:40:23.947927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947936  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947964  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.947972  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.947977  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:23.947981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.947997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948019  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:23.948024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948030  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.948035  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.948039  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.948043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.948047  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948053  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.948059  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:40:23.948065  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:23.948069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948093  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948106  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948113  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948140  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:40:23.948146  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:23.948152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948160  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948188  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948195  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.948201  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:23.948205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948243  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:23.948248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948254  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.948259  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.948263  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.948267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.948271  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948278  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948285  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:23.948290  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:23.948295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948331  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948338  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948344  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:40:23.948349  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:40:23.948354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948377  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948389  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948399  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948406  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:40:23.948411  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:40:23.948415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948452  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948459  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948474  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:40:23.948480  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:40:23.948484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948500  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948521  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948528  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.948534  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:40:23.948539  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:40:23.948544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948583  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948589  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948595  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.948601  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:40:23.948607  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:40:23.948611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948619  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948646  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948653  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948659  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:40:23.948664  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:40:23.948669  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948676  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948704  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948711  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948717  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:40:23.948722  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:40:23.948727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948742  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948762  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948769  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.948774  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:40:23.948778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948794  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948816  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:40:23.948821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948827  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.948832  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.948836  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.948841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.948845  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948852  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948858  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:40:23.948863  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:40:23.948868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948904  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948911  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948917  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:40:23.948922  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:40:23.948927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948962  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.948969  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.948975  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:40:23.948981  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:40:23.948985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.948992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949019  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949026  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949032  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:40:23.949037  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:40:23.949042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949049  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949057  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949077  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949083  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949089  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:40:23.949095  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:40:23.949099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949128  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949134  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949141  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949147  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:40:23.949152  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:40:23.949156  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949180  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949194  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949201  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.949207  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:40:23.949211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949249  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:40:23.949254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949260  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.949265  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.949269  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.949273  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.949277  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949284  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949290  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:40:23.949296  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:40:23.949300  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949308  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949336  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949343  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.949348  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:40:23.949352  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949390  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:40:23.949397  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949413  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.949419  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.949423  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.949427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.949432  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949439  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949445  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:40:23.949450  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:40:23.949455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949480  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949493  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949500  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949506  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:40:23.949511  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:40:23.949516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949552  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949559  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949565  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:40:23.949571  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:40:23.949575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949583  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949612  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949619  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949625  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:40:23.949630  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:40:23.949635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949651  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949671  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949678  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949684  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:40:23.949689  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:40:23.949694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949730  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949736  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949743  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:40:23.949748  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:40:23.949753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949788  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949795  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949801  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:40:23.949807  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:40:23.949812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949835  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949847  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949854  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949860  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:40:23.949866  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:40:23.949871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949900  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949906  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949912  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949919  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:40:23.949924  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:40:23.949929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.949965  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.949971  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.949987  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:40:23.949992  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:40:23.949996  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950032  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950038  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950044  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:40:23.950049  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:40:23.950054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950089  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950095  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950101  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:40:23.950106  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:40:23.950110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950146  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950152  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950158  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:40:23.950164  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:40:23.950168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950197  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950203  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950209  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950215  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:40:23.950220  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:40:23.950224  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950259  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950266  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950281  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:40:23.950287  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:40:23.950291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950336  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950343  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950349  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:40:23.950354  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:40:23.950359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950366  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950394  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950404  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950410  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:40:23.950415  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:40:23.950420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950435  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950455  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950461  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950467  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:40:23.950472  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:40:23.950477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950511  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950518  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950524  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:40:23.950529  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:40:23.950533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950568  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950574  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950580  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:40:23.950586  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:40:23.950590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950613  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950619  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950625  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950632  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950637  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:40:23.950643  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:40:23.950648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950670  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950676  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950682  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950689  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950695  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:40:23.950700  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:40:23.950705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950740  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950746  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950752  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:40:23.950757  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:40:23.950762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950769  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950797  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950803  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950809  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:40:23.950814  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:40:23.950819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950842  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950848  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950854  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950860  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950866  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:40:23.950872  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:40:23.950876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950898  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950911  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950917  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950923  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:40:23.950929  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:40:23.950933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950956  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950962  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950968  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.950974  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.950980  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:40:23.950986  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:40:23.950990  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.950998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951025  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951032  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951038  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:40:23.951043  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:40:23.951048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951070  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951082  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951089  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951094  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:40:23.951100  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:40:23.951104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951111  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951139  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951145  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951151  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:40:23.951157  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:40:23.951162  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951169  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951196  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951203  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951209  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:40:23.951214  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:40:23.951219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951241  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951253  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951260  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951266  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:40:23.951271  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:40:23.951276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951310  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951317  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951323  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:40:23.951327  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:40:23.951332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951367  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951373  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951379  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:40:23.951385  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:40:23.951389  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951423  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951436  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951442  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951449  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:40:23.951454  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:40:23.951458  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951488  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951494  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951501  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951507  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:40:23.951512  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:40:23.951517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951552  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951559  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951564  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:40:23.951570  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:40:23.951574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951603  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951609  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951616  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951621  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:40:23.951627  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:40:23.951632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951667  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951673  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951679  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:40:23.951684  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:40:23.951689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951724  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951730  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951735  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:40:23.951740  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:40:23.951744  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951760  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951780  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951786  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.951792  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:40:23.951797  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:40:23.951802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951839  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951845  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.951851  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:40:23.951856  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:23.951860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951890  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951895  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951902  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.951908  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:40:23.951913  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:40:23.951917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951946  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951952  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.951959  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.951964  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:40:23.951970  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:40:23.951974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.951997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952009  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952016  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.952022  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:40:23.952027  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:23.952031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952039  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952066  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952073  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.952078  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.952083  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:40:23.952088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952103  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952111  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952123  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952129  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952135  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:40:23.952140  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:23.952145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952160  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952174  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952180  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952186  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952192  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:40:23.952197  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:23.952202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952209  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952224  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952237  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952243  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.952249  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:40:23.952254  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:23.952258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952266  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952293  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952300  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952305  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:40:23.952310  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.952314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952329  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952337  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952349  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952356  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.952361  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.952367  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:40:23.952371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952379  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952396  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952404  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952410  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952417  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952423  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:40:23.952428  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:23.952433  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952468  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952474  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952480  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:40:23.952485  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:23.952490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952524  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952531  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.952537  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:40:23.952542  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:23.952546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952569  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952581  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952587  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952593  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:40:23.952598  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.952602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952617  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952625  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952631  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952637  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952644  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.952649  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.952655  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:40:23.952659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952694  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952701  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952707  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:40:23.952712  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:23.952717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952739  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952751  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952758  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952764  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:40:23.952769  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:23.952773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952796  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952808  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952814  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.952820  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:40:23.952825  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:23.952830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952865  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952872  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952878  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:40:23.952883  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.952887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952922  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952928  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.952934  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.952940  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:40:23.952945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.952980  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.952986  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.952992  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:40:23.952997  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:23.953002  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953009  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953037  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953043  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953049  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:40:23.953054  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:23.953059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953094  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953100  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.953106  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:40:23.953111  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:23.953115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953151  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953157  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953163  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:40:23.953168  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.953172  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953180  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953208  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953214  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.953220  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.953225  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:40:23.953230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953264  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953271  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953277  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:40:23.953282  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:23.953287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953309  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953321  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953328  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953334  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:40:23.953339  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:23.953344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953366  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953378  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953384  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.953390  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:40:23.953399  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:23.953404  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953411  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953419  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953433  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953439  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953446  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953452  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:40:23.953457  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.953462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953491  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953497  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953503  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.953509  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.953514  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:40:23.953519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953542  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953554  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953561  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953567  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:40:23.953572  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:23.953585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953593  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953621  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953628  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953634  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:40:23.953640  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:23.953644  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953689  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953695  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.953701  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:40:23.953706  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:23.953710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953739  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953745  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953751  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953757  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:40:23.953762  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.953767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953774  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953790  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953796  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953802  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953808  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.953814  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.953819  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:40:23.953824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953858  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953865  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953871  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:40:23.953876  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:23.953881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953909  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953915  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953922  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.953927  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:40:23.953933  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:23.953937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953959  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.953972  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.953978  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.953984  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:40:23.953989  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:23.953993  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954027  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.954033  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.954039  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:40:23.954044  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.954048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954057  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954084  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.954090  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.954096  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.954102  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:40:23.954106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954135  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954141  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.954147  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.954153  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:40:23.954158  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:23.954163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954198  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.954204  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.954210  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:40:23.954215  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:23.954220  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954254  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.954260  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.954266  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:40:23.954271  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:23.954275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954311  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.954317  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.954323  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:40:23.954328  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.954332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954355  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954368  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.954374  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.954379  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:40:23.954383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954425  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:40:23.954430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.954436  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.954441  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.954445  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.954449  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.954459  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:40:23.954544  1 14 json_gui_to_db() created db_node
09-16 14:40:23.969507  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.88 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_003_t" end time: Sep 16 14:40 CDT
"RoundConvert_DBJson2GUIJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

30/65 Testing: Convert_DBJson2GUIJson_004_t
30/65 Test: Convert_DBJson2GUIJson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test004.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_004_t.d
"Convert_DBJson2GUIJson_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:23.715486  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:23.723245  1 10 json_db_to_gui() begin
09-16 14:40:23.771256  1 10 json_db_to_gui() read dbAST
09-16 14:40:23.771500  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.771566  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.771615  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.771671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.771772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.771809  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:40:23.771849  1 13 json_db_to_gui() child args name <prolog>
09-16 14:40:23.771859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.771913  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:40:23.771927  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.771947  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.771958  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.772032  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.772102  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.772157  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.772166  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.772200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.772271  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.772281  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.772289  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.772296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.772315  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.772324  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:40:23.772335  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:40:23.772342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.772603  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:40:23.772617  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.772626  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.772634  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.772648  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.772664  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.772680  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.772688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.772703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.772747  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.772755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.772773  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.772781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.772823  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:40:23.772834  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:40:23.772842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.772878  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:40:23.772890  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.772898  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.772906  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.772920  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.772935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.772951  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.772959  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.772974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.772991  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.772999  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.773007  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.773015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.773033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773042  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:40:23.773052  1 13 json_db_to_gui() child args name <metrics>
09-16 14:40:23.773060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773095  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:40:23.773105  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.773113  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.773121  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.773134  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.773150  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.773165  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.773173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.773203  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.773211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773226  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.773234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773247  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:23.773258  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:23.773265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773298  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:23.773308  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.773316  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.773323  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.773336  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.773350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.773365  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.773373  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773388  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.773423  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.773441  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773458  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.773465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773478  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:40:23.773488  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:40:23.773495  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773527  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:40:23.773537  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.773545  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.773552  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.773567  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.773581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.773596  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.773603  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773617  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.773633  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.773640  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.773648  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.773656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.773674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773682  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:23.773692  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:23.773699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773732  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:23.773742  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.773750  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.773757  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.773771  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.773784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.773800  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.773807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.773836  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.773843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773857  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.773865  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773877  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:40:23.773887  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:40:23.773895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.773927  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:40:23.773939  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.773947  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.773954  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.773968  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.773984  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774000  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.774007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774039  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.774047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774064  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.774072  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774086  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:40:23.774098  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:40:23.774105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774140  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:40:23.774150  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.774159  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.774166  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.774180  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.774193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774208  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.774215  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774245  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.774252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774267  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.774274  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774286  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:40:23.774296  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:40:23.774303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774336  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:40:23.774346  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.774353  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.774361  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.774373  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.774387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774406  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.774415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774445  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.774452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774466  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.774473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774486  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:40:23.774496  1 13 json_db_to_gui() child args name <generator>
09-16 14:40:23.774503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774536  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:40:23.774545  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.774552  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.774560  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.774573  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.774587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774604  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.774612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774643  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.774650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774666  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.774673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774686  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:40:23.774696  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:40:23.774703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774737  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:40:23.774748  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.774755  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.774763  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.774776  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.774790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774804  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.774812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774826  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774842  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.774849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774864  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.774871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774883  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:40:23.774893  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:40:23.774900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.774933  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:40:23.774943  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.774950  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.774957  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.774970  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.774983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.774998  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.775006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775020  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775035  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.775042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775057  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.775064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775076  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:40:23.775086  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:40:23.775093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775127  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:40:23.775138  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.775145  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.775153  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.775166  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.775180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775194  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.775202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775232  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.775239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775253  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.775260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775272  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:40:23.775282  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:40:23.775289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775323  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:40:23.775333  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.775341  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.775349  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.775361  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.775374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775389  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.775401  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775434  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.775442  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.775450  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.775458  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.775475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775484  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:40:23.775494  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:40:23.775501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775535  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:40:23.775545  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.775553  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.775560  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.775573  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.775587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775602  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.775609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775642  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.775649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775664  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.775672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775684  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:40:23.775694  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:40:23.775701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775735  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:40:23.775745  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.775753  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.775760  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.775773  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.775787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775802  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.775809  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775839  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.775846  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775861  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.775868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775880  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:40:23.775890  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:40:23.775897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.775932  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:40:23.775942  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.775950  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.775957  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.775970  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.775983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.775998  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.776005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776034  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.776041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776056  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.776062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776074  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:40:23.776085  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:40:23.776091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776125  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:40:23.776137  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.776145  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.776152  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.776166  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.776182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776198  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.776206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776238  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.776245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776260  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.776268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776280  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:40:23.776290  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:40:23.776297  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776330  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:40:23.776341  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.776348  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.776355  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.776368  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.776382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776403  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.776411  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776443  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.776451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776467  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.776476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776489  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:40:23.776501  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:40:23.776509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776545  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:40:23.776555  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.776563  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.776570  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.776584  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.776597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776613  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.776620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776649  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.776656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776671  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.776678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776703  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.776710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776722  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:40:23.776732  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:40:23.776739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776773  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:40:23.776783  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.776791  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.776798  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.776811  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.776824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776839  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.776847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.776877  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.776885  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.776893  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.776900  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.776917  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776926  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:40:23.776936  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:40:23.776943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.776978  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:40:23.776988  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.776996  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.777003  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.777017  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.777031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777048  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.777055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777085  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.777093  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777108  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.777115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777128  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:40:23.777138  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:40:23.777145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777179  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:40:23.777189  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.777196  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.777203  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.777216  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.777229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777244  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.777251  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777281  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.777289  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.777297  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.777304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.777321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777330  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:40:23.777339  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:40:23.777347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777383  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:40:23.777393  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.777405  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.777413  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.777427  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.777441  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777456  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.777463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777478  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777493  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.777500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777517  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.777524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777537  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:40:23.777548  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:40:23.777555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777590  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:40:23.777601  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.777608  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.777616  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.777628  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.777642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777657  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.777664  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777679  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777694  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.777702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777717  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.777724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777736  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:40:23.777746  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:40:23.777753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777789  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:40:23.777799  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.777806  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.777813  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.777826  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.777840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777855  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.777862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.777891  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.777898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777913  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.777920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777936  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.777943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.777955  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:40:23.777965  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:40:23.777972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778006  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:40:23.778016  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.778024  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.778031  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.778044  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.778058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778073  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.778080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778110  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.778117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778131  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.778138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778152  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:40:23.778162  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:40:23.778169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778204  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:40:23.778214  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.778222  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.778229  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.778241  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.778254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778269  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.778276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778306  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.778314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778328  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.778336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778348  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:40:23.778358  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:40:23.778365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778406  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:40:23.778418  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.778425  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.778433  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.778446  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.778460  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778475  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.778483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778511  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.778519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778533  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.778541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778554  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:40:23.778565  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:40:23.778573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778608  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:40:23.778621  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.778629  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.778636  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.778650  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.778665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778683  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.778691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778722  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.778730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778745  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.778752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778765  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:40:23.778775  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:40:23.778782  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778813  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:40:23.778823  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.778830  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.778837  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.778849  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.778863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778878  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.778885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.778917  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.778924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778939  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.778945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.778957  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:40:23.778968  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:40:23.778975  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779007  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:40:23.779018  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.779026  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.779034  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.779046  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.779060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779075  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.779082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779098  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779114  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.779122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779138  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.779146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779159  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:40:23.779170  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:40:23.779177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779211  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:40:23.779222  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.779230  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.779238  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.779251  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.779265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779283  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.779291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779323  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.779331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779349  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.779357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779370  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:40:23.779381  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:40:23.779388  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779426  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:40:23.779438  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.779446  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.779454  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.779468  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.779483  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779501  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.779509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779525  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779542  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.779550  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779567  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.779575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779588  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:40:23.779598  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:40:23.779606  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779640  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:40:23.779651  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.779658  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.779666  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.779679  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.779694  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779710  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.779717  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779746  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.779753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779767  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.779774  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779786  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:40:23.779796  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:40:23.779802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779836  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:40:23.779847  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.779854  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.779861  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.779874  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.779889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779904  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.779912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779928  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.779943  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.779952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779966  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.779974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.779987  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:40:23.779999  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:40:23.780006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780040  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:40:23.780051  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.780060  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.780067  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.780081  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.780097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780114  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.780122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780154  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.780161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780177  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.780186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780198  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:40:23.780209  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:40:23.780216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780250  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:40:23.780261  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.780269  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.780277  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.780291  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.780306  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780322  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.780329  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780362  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.780370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780385  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.780393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780411  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:40:23.780422  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:40:23.780430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780464  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:40:23.780475  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.780483  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.780491  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.780504  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.780519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780536  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.780543  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780575  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.780583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780600  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.780607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780620  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:40:23.780630  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:40:23.780637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780672  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:40:23.780683  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.780691  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.780699  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.780714  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.780729  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780745  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.780753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780785  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.780793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780809  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.780817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780830  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:40:23.780841  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:40:23.780849  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780884  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:40:23.780895  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.780903  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.780910  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.780924  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.780939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780956  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.780964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.780981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.780998  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.781006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781022  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.781030  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781044  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:40:23.781055  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:40:23.781062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781096  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:40:23.781107  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.781115  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.781123  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.781135  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.781149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.781166  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.781173  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.781205  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.781213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781229  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.781237  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781250  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:40:23.781261  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:40:23.781268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781303  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:40:23.781314  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.781323  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.781331  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.781345  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.781360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.781376  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.781383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.781443  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.781452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781469  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.781477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781490  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:40:23.781501  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:40:23.781508  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781544  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:40:23.781556  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.781564  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.781572  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.781585  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.781601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.781618  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.781626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.781658  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.781667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781683  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.781691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781704  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:40:23.781714  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:40:23.781721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781756  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:40:23.781768  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.781776  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.781784  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.781797  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.781813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.781830  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.781838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.781870  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.781878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781894  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.781901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781914  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:40:23.781925  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:40:23.781933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.781967  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:40:23.781978  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.972528  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.972541  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.972561  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.972579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.972597  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.972604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.972636  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.972642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972656  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.972662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972675  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:40:23.972685  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:40:23.972691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972737  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:40:23.972748  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.972754  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.972760  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.972771  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.972783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.972797  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.972804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972817  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.972829  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.972835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972847  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.972853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972865  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:40:23.972873  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:40:23.972879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972909  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:40:23.972918  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.972925  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.972931  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.972941  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.972953  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.972965  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.972971  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.972984  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.972996  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.973002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973013  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.973018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973028  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:40:23.973037  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:40:23.973042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973070  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:40:23.973079  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.973085  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.973091  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.973100  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.973111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973124  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.973131  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973157  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.973163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973175  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.973181  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973190  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:40:23.973198  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:40:23.973204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973232  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:40:23.973240  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.973246  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.973252  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.973262  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.973272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973284  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.973290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973315  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.973322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973336  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.973342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973353  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:40:23.973362  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:40:23.973368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973404  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:40:23.973423  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.973430  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.973445  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.973457  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.973469  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973482  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.973489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973514  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.973521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973534  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.973541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973552  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:40:23.973561  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:40:23.973569  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973600  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:40:23.973612  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.973619  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.973626  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.973638  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.973651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973666  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.973674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973704  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.973712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973727  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.973734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973746  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:40:23.973756  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:40:23.973763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973793  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:40:23.973804  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.973811  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.973818  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.973831  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.973844  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973860  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.973868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.973898  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.973906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973921  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.973928  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973940  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:40:23.973950  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:40:23.973958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.973988  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:40:23.973998  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.974006  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.974013  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.974025  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.974047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974062  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.974070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974101  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.974109  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974125  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.974141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974153  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:40:23.974163  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:40:23.974170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974201  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:40:23.974212  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.974220  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.974227  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.974239  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.974252  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974267  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.974275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974305  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.974313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974328  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.974335  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974347  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:40:23.974357  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:40:23.974364  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974398  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:40:23.974410  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.974418  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.974425  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.974437  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.974455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974471  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.974479  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974508  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.974515  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974530  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.974538  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974551  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:40:23.974561  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:40:23.974568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974600  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:40:23.974610  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.974618  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.974625  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.974637  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.974650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974665  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.974673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974700  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.974707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974722  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.974730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974742  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:40:23.974752  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:40:23.974759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974790  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:40:23.974801  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.974808  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.974815  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.974826  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.974838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974852  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.974859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.974888  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.974896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974910  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.974918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974930  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:40:23.974939  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:40:23.974946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.974977  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:40:23.974987  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.974994  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.975002  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.975022  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.975035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975059  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.975067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975113  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.975121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975145  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.975153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975165  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:40:23.975175  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:40:23.975183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975214  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:40:23.975225  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.975233  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.975240  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.975252  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.975265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975281  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.975288  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975317  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.975324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975339  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.975346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975359  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:40:23.975368  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:40:23.975376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975411  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:40:23.975423  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.975431  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.975438  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.975451  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.975464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975478  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.975485  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975515  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.975523  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975539  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.975547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975559  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:40:23.975569  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:40:23.975576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975607  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:40:23.975618  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.975626  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.975633  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.975646  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.975660  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975675  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.975683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975721  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.975728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975750  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.975757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975769  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:40:23.975787  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:40:23.975794  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975843  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:40:23.975853  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.975861  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.975869  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.975880  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.975894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975917  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.975925  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.975949  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.975975  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.975984  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976007  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.976014  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976025  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:40:23.976034  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:40:23.976041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976071  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:40:23.976082  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.976090  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.976097  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.976109  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.976122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976137  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.976145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976160  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976175  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.976182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976197  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.976205  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976219  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.976227  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976243  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.976251  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976266  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.976273  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976286  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:23.976296  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:23.976303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976332  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:23.976350  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.976358  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.976365  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.976377  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.976389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976415  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.976423  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976451  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.976459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976473  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.976480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976492  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:40:23.976502  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:40:23.976509  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976537  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:40:23.976548  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.976555  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.976563  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.976574  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.976587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976600  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.976607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976634  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.976641  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976657  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.976664  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976676  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:40:23.976686  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:40:23.976692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976719  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:40:23.976727  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.976734  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.976741  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.976752  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.976764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976778  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.976786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976814  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.976822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976837  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.976845  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976857  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:40:23.976867  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:40:23.976874  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976901  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:40:23.976912  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.976919  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.976926  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.976939  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.976952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976966  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.976972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.976986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.976999  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.977005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977045  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977053  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:40:23.977068  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.977076  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977087  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:40:23.977098  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:40:23.977105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977132  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:40:23.977143  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.977150  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.977157  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.977169  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.977183  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977198  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.977205  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977234  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.977241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977254  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.977260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977271  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:23.977281  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:23.977287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977314  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:23.977324  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.977331  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.977338  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.977350  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.977363  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977387  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.977398  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977432  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977455  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.977462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977478  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.977485  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977497  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:23.977507  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:40:23.977514  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977549  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:23.977559  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.977566  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.977573  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.977585  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.977598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977611  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.977618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977650  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.977658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977673  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.977681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977694  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:23.977704  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:23.977711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977740  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:23.977751  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.977759  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.977766  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.977778  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.977792  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977807  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.977814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977840  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.977847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977861  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.977868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977880  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.977890  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.977897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.977924  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.977933  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.977940  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.977947  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.977958  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.977970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.977984  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.977992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978021  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.978029  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978045  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.978053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978065  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:40:23.978075  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:40:23.978083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978111  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:40:23.978121  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.978130  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.978137  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.978149  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.978162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978177  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.978185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978216  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.978223  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978238  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.978246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978259  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:23.978270  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:23.978276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978305  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:23.978316  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.978324  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.978330  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.978342  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.978356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978371  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.978379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978394  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978414  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.978421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978436  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.978444  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978457  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:23.978467  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:40:23.978475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978503  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:23.978513  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.978522  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.978529  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.978542  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.978555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978571  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.978578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978608  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.978616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978631  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.978639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978651  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:23.978661  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:23.978667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978696  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:23.978707  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.978715  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.978722  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.978735  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.978749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978763  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.978771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978786  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978802  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.978810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978825  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.978832  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978845  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.978854  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.978861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978888  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.978899  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.978907  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.978914  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.978926  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.978940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978956  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.978963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.978978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.978994  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.979001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979016  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.979025  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979037  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:40:23.979047  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:40:23.979054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979082  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:40:23.979092  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.979099  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.979106  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.979117  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.979130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979143  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.979151  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979182  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.979190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979206  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.979214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979226  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:23.979236  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:23.979243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979272  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:23.979283  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.979290  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.979298  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.979310  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.979323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979339  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.979346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979360  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979375  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.979383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979402  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.979410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979423  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:23.979433  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:40:23.979440  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979468  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:23.979479  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.979486  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.979494  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.979506  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.979519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979532  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.979540  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979554  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979569  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.979577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979591  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.979598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979610  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:23.979621  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:23.979628  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979656  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:23.979667  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.979675  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.979682  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.979694  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.979708  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979723  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.979731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979759  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.979765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979779  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.979787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979799  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.979809  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.979816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979845  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.979856  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.979863  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.979870  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.979883  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.979896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979911  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.979919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.979947  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.979954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979969  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.979977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.979989  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:40:23.979999  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:40:23.980006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980034  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:40:23.980044  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.980052  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.980059  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.980072  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.980086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980100  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.980107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980122  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980138  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.980146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980161  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.980169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980181  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:23.980191  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:23.980198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980225  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:23.980235  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.980243  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.980250  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.980262  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.980275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980291  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.980298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980329  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.980336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980351  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.980359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980371  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:23.980380  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:40:23.980387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980419  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:23.980430  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.980437  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.980445  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.980457  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.980470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980484  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.980491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980520  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.980528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980541  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.980550  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980564  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:23.980575  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:23.980582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980611  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:23.980623  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.980630  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.980637  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.980650  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.980662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980676  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.980683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980713  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.980721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980736  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.980744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980756  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.980766  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.980773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980802  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.980813  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.980820  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.980828  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.980841  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.980855  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980871  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.980879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980893  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.980908  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.980916  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980931  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.980939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.980951  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:40:23.980961  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:40:23.980969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981014  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:40:23.981034  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.981041  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.981064  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.981076  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.981091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981123  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.981130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981160  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.981177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981200  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.981206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981218  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:23.981229  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:23.981236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981266  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:23.981277  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.981285  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.981292  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.981305  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.981318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981335  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.981342  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981373  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.981381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981400  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.981409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981423  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:23.981434  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:40:23.981441  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981471  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:23.981483  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.981491  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.981498  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.981510  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.981524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981540  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.981548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981579  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.981587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981603  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.981611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981623  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:23.981635  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:23.981642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981672  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:23.981683  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.981692  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.981699  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.981712  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.981725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981741  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.981749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981780  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.981789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981803  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.981810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981821  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.981831  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.981837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981866  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.981878  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.981886  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.981893  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.981905  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.981920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981934  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.981943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.981974  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.981982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.981997  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.982005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982018  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:40:23.982029  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:40:23.982037  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982066  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:40:23.982078  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.982086  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.982093  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.982106  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.982119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982134  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.982142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982173  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.982182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982199  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.982208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982221  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:23.982232  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:23.982239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982268  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:23.982279  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.982287  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.982295  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.982308  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.982322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982338  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.982346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982377  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.982385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982405  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.982413  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982425  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:23.982435  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:40:23.982442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982471  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:23.982482  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.982490  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.982497  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.982510  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.982523  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982539  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.982547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982578  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.982586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982602  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.982610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982622  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:23.982633  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:23.982640  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982669  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:23.982680  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.982689  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.982696  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.982708  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.982722  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982737  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.982745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982775  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.982783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982798  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.982806  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982819  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.982829  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.982837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982867  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.982878  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.982886  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.982894  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.982905  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.982920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982934  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.982942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.982973  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.982981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.982997  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.983005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983017  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:40:23.983028  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:40:23.983035  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983065  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:40:23.983076  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.983084  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.983091  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.983104  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.983117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983132  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.983141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983172  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.983180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983196  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.983204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983216  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:23.983227  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:23.983234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983264  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:23.983275  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.983283  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.983290  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.983302  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.983316  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983332  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.983340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983371  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.983379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983399  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.983408  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983430  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:23.983440  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:40:23.983448  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983476  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:23.983487  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.983495  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.983503  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.983515  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.983529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983544  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.983552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983582  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.983590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983605  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.983612  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983625  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:23.983636  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:23.983643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983672  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:23.983682  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.983690  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.983697  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.983710  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.983723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983739  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.983747  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983779  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.983788  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983804  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.983812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983824  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.983835  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.983842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983871  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.983882  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.983889  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.983896  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.983909  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.983923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983939  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.983947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.983962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.983977  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.983985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984000  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.984008  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984020  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:40:23.984030  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:40:23.984037  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984066  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:40:23.984078  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.984086  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.984093  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.984106  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.984119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984134  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.984142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984171  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.984179  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984194  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.984202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984215  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:23.984225  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:23.984232  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984261  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:23.984272  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.984280  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.984296  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.984309  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.984323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984339  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.984347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984377  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.984385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984405  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.984414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984426  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:23.984437  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:40:23.984445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984474  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:23.984487  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.984494  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.984502  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.984514  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.984528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984544  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.984552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984581  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.984589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984605  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.984613  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984625  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:23.984636  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:23.984643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984673  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:23.984684  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.984692  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.984699  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.984712  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.984725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984741  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.984748  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984779  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.984787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984803  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.984811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984823  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.984834  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.984841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984871  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.984882  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.984890  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.984898  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.984910  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.984924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984939  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.984947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.984962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.984978  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:23.984986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.985002  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.985010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.985026  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.985034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.985047  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:40:23.985058  1 13 json_db_to_gui() child args name <main>
09-16 14:40:23.985066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.985076  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:40:23.985085  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.985093  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:23.985100  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:23.985112  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:23.985126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.985141  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:23.985149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.985164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:23.985182  1 11 json_db_to_gui() operator() begin
09-16 14:40:23.985191  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:23.985200  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:23.985208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.985228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.985242  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:23.985249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:23.985331  1 10 json_db_to_gui() created gui_node
09-16 14:40:24.027481  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.87 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_004_t" end time: Sep 16 14:40 CDT
"Convert_DBJson2GUIJson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

54/65 Testing: MongoJson_search2_004_t
54/65 Test: MongoJson_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test004/MongoJson_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test004/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test004/test004.cmp.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test004/MongoJson_search2_004_t.d
"MongoJson_search2_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:24.284162  1  0 artdaq::database::mongo trace_enable
09-16 14:40:24.284324  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:24.287445  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.288411  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.299015  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210771"
}
09-16 14:40:24.299091  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.299393  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.307766  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210772"
}
09-16 14:40:24.307801  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.308188  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.316400  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210773"
}
09-16 14:40:24.316429  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.316726  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.324427  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210774"
}
09-16 14:40:24.324443  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.324716  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.332345  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210775"
}
09-16 14:40:24.332361  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.332628  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.340278  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210776"
}
09-16 14:40:24.340294  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.340569  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.348220  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210777"
}
09-16 14:40:24.348234  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.348485  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.356339  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210778"
}
09-16 14:40:24.356354  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.356629  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.364696  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e92210779"
}
09-16 14:40:24.364715  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.364982  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.372999  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1e9221077a"
}
09-16 14:40:24.373032  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:24.373084  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc4aa81a72ba1e92210771"
},{
    "$oid" : "57dc4aa81a72ba1e92210772"
},{
    "$oid" : "57dc4aa81a72ba1e92210773"
},{
    "$oid" : "57dc4aa81a72ba1e92210774"
},{
    "$oid" : "57dc4aa81a72ba1e92210775"
},{
    "$oid" : "57dc4aa81a72ba1e92210776"
},{
    "$oid" : "57dc4aa81a72ba1e92210777"
},{
    "$oid" : "57dc4aa81a72ba1e92210778"
},{
    "$oid" : "57dc4aa81a72ba1e92210779"
},{
    "$oid" : "57dc4aa81a72ba1e9221077a"
}]} }, "collection":"testJSON_V001"}>
09-16 14:40:24.373288  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa81a72ba1e92210771"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210772"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210773"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210774"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210775"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210776"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210777"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210778"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210779"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e9221077a"
            }
        ]
    }
}>
09-16 14:40:24.373358  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa81a72ba1e92210771"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210772"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210773"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210774"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210775"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210776"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210777"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210778"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e92210779"
            }, 
            {
                "$oid" : "57dc4aa81a72ba1e9221077a"
            }
        ]
    }
}>
09-16 14:40:24.374094  1  3 found_count=10
09-16 14:40:24.405561  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210771"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.406542  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210772"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.407478  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210773"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.408432  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210774"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.409359  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210775"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.410310  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210776"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.411242  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210777"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.412194  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210778"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.413125  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e92210779"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
09-16 14:40:24.414054  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1e9221077a"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }, 
                "max_fragment_size_words" : 2097152, 
                "metrics" : {
                    "evbFile" : {
                        "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                        "level" : 3, 
                        "metricPluginType" : "file", 
                        "uniquify" : true
                    }
                }
            }, 
            "outputs" : {
                "netMonOutput" : {
                    "SelectEvents" : {
                        "SelectEvents" : [
                            "pmod2", 
                            "pmod3"
                        ]
                    }, 
                    "module_type" : "NetMonOutput"
                }
            }, 
            "physics" : {
                "filters" : {
                    "prescaleMod2" : {
                        "module_type" : "NthEvent", 
                        "nth" : 2
                    }, 
                    "prescaleMod3" : {
                        "module_type" : "NthEvent", 
                        "nth" : 3
                    }
                }, 
                "my_output_modules" : [
                    "netMonOutput"
                ], 
                "pmod2" : [
                    "prescaleMod2"
                ], 
                "pmod3" : [
                    "prescaleMod3"
                ]
            }, 
            "process_name" : "DAQ", 
            "services" : {
                "scheduler" : {
                    "fileMode" : "NOMERGE"
                }, 
                "user" : {
                    "NetMonTransportServiceInterface" : {
                        "data_receiver_count" : 1, 
                        "first_data_receiver_rank" : 6, 
                        "max_fragment_size_words" : 2097152, 
                        "mpi_buffer_count" : 8, 
                        "service_provider" : "NetMonTransportService"
                    }
                }
            }, 
            "source" : {
                "module_type" : "RawInput", 
                "resume_after_timeout" : true, 
                "waiting_time" : 900
            }
        }, 
        "metadata" : {
            "daq" : {
                "type" : "table", 
                "comment" : " ", 
                "children" : {
                    "event_builder" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "expected_fragments_per_event" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "first_fragment_receiver_rank" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "fragment_receiver_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "mpi_buffer_count" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : " "
                            }, 
                            "print_event_store_stats" : {
                    
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc4aa81a72ba1e92210771"
},{
    "$oid" : "57dc4aa81a72ba1e92210772"
},{
    "$oid" : "57dc4aa81a72ba1e92210773"
},{
    "$oid" : "57dc4aa81a72ba1e92210774"
},{
    "$oid" : "57dc4aa81a72ba1e92210775"
},{
    "$oid" : "57dc4aa81a72ba1e92210776"
},{
    "$oid" : "57dc4aa81a72ba1e92210777"
},{
    "$oid" : "57dc4aa81a72ba1e92210778"
},{
    "$oid" : "57dc4aa81a72ba1e92210779"
},{
    "$oid" : "57dc4aa81a72ba1e9221077a"
}]} }, "collection":"testJSON_V001"}
<end of output>
Test time =   0.39 sec
----------------------------------------------------------
Test Passed.
"MongoJson_search2_004_t" end time: Sep 16 14:40 CDT
"MongoJson_search2_004_t" time elapsed: 00:00:00
----------------------------------------------------------

42/65 Testing: RoundConvert_GUIJson2DBJson_003_t
42/65 Test: RoundConvert_GUIJson2DBJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_003_t.d
"RoundConvert_GUIJson2DBJson_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:23.704614  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:23.712437  1 14 json_gui_to_db() begin
09-16 14:40:23.782848  1 14 json_gui_to_db() read guiAST
09-16 14:40:23.783002  1 14 json_gui_to_db() created dbAST
09-16 14:40:23.783107  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.783164  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.783194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.783239  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.783326  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.783364  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:40:23.783387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783431  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783478  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783512  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:40:23.783517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783525  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.783531  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.783536  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.783540  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.783545  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.783553  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.783571  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:40:23.783578  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:40:23.783583  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783617  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783634  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.783642  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.783648  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:23.783653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783670  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783694  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:23.783699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783706  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.783712  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.783717  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.783721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.783726  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.783733  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.783739  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:40:23.783745  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:23.783749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783790  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.783797  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.783826  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:40:23.783832  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:23.783837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783856  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783864  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783877  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.783885  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.783890  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:23.783895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783912  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783937  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:23.783941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.783949  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.783954  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.783959  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.783963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.783968  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.783975  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.783982  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:23.783987  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:23.783992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784010  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784031  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784038  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784045  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:40:23.784050  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:40:23.784055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784081  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784088  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784094  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784101  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784108  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:40:23.784114  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:40:23.784119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784128  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784158  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784165  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784172  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:40:23.784177  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:40:23.784182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784220  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784227  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.784234  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:40:23.784239  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:40:23.784244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784283  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784290  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.784296  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:40:23.784301  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:40:23.784306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784345  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784352  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784358  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:40:23.784364  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:40:23.784368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784377  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784394  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784405  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784412  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784419  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784426  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:40:23.784431  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:40:23.784437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784476  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784483  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.784489  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:40:23.784494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784535  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:40:23.784540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784548  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.784553  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.784558  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.784562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.784567  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784574  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784581  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:40:23.784586  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:40:23.784591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784618  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784625  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784631  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784638  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784645  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:40:23.784650  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:40:23.784655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784693  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784700  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784706  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:40:23.784712  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:40:23.784716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784725  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784755  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784762  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784769  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:40:23.784774  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:40:23.784779  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784796  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784817  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784825  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784831  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:40:23.784836  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:40:23.784841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784879  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784886  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.784893  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:40:23.784898  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:40:23.784902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784934  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784947  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.784954  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.784960  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:40:23.784965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784973  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784990  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.784999  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785006  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:40:23.785011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785018  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.785024  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.785029  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.785033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.785038  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785045  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785052  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:40:23.785057  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:40:23.785062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785080  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785089  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785102  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785110  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:23.785115  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:40:23.785120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785176  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:40:23.785181  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785188  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:23.785194  1 15 json_gui_to_db() operator() begin
09-16 14:40:23.785199  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:23.785203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:23.785208  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785216  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785222  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:40:23.785228  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:40:23.785233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785266  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785273  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785280  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785286  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:40:23.785292  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:40:23.785296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785329  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785335  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785342  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785348  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:40:23.785354  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:40:23.785358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785367  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785376  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785402  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785410  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785417  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:40:23.785422  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:40:23.785428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785468  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785475  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785481  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:40:23.785487  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:40:23.785491  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785500  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785530  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785537  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785543  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:40:23.785549  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:40:23.785553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785579  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785592  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785599  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785605  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:40:23.785610  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:40:23.785615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785640  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785653  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785660  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785667  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:40:23.785672  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:40:23.785677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785715  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785722  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785728  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:40:23.785734  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:40:23.785738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785764  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785778  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785785  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785791  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:40:23.785797  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:40:23.785801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785833  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785839  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785846  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785853  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:40:23.785858  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:40:23.785863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785901  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785908  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785914  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:40:23.785919  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:40:23.785924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785956  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785962  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.785969  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.785975  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:40:23.785981  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:40:23.785985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.785994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786024  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786031  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786037  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:40:23.786042  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:40:23.786047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786065  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786079  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786086  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786093  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786099  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:40:23.786104  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:40:23.786109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786147  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786154  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786161  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:40:23.786166  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:40:23.786171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786203  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786209  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786216  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786222  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:40:23.786227  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:40:23.786232  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786241  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786270  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786277  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786283  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:40:23.786289  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:40:23.786293  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786318  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786331  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786338  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786344  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:40:23.786350  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:40:23.786354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786393  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786404  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786411  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:40:23.786416  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:40:23.786421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786460  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786467  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786474  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:40:23.786479  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:40:23.786484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786492  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786522  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786529  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786535  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:40:23.786541  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:40:23.786545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786583  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786590  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786597  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:40:23.786602  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:40:23.786606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786631  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786638  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786645  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786657  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786668  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:40:23.786678  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:40:23.786686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786701  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786743  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786753  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786765  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786777  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:40:23.786786  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:40:23.786795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786838  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786845  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786852  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:40:23.786857  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:40:23.786862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786901  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786908  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786915  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:40:23.786920  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:40:23.786925  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786942  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786963  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.786970  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.786976  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:40:23.786982  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:40:23.786986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.786995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787025  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787032  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787038  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:40:23.787044  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:40:23.787048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787057  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787080  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787098  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787107  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787113  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:40:23.787119  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:40:23.787124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787150  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787163  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787170  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787177  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:40:23.787182  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:40:23.787187  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787225  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787232  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787239  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:40:23.787244  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:40:23.787249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787266  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787287  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787294  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787301  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:40:23.787306  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:40:23.787312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787368  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787380  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787392  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:40:23.787405  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:40:23.787410  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787431  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787453  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787461  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787468  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:40:23.787474  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:40:23.787478  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787487  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787517  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787525  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787531  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:40:23.787537  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:40:23.787541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787550  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787573  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787580  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787587  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787593  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:40:23.787598  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:40:23.787603  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787651  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787660  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787667  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:40:23.787672  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:40:23.787677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787717  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787724  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787730  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:40:23.787735  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:40:23.787740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787772  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787778  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787785  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787792  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:40:23.787798  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:40:23.787802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787820  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787828  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787835  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787841  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787848  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.787854  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:40:23.787859  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:40:23.787864  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787889  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787905  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787912  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.787918  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:40:23.787924  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:23.787929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787946  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787954  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.787967  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.787974  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.787981  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:40:23.787986  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:40:23.787991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788016  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788023  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788029  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788036  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.788043  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:40:23.788048  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:40:23.788053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788070  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788091  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788102  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.788109  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:40:23.788115  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:23.788120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788128  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788159  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788166  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.788172  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.788177  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:40:23.788182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788220  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788227  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.788234  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:40:23.788239  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:23.788244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788282  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788289  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.788296  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:40:23.788301  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:23.788306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788314  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788344  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788351  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.788357  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:40:23.788363  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:23.788367  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788376  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788404  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788410  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788418  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.788425  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:40:23.788432  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:23.788440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788455  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788508  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788521  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.788532  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:40:23.788542  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:40:23.788549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788616  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788624  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.788631  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:40:23.788637  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:23.788642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788651  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788668  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788682  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788689  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:23.788695  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:40:23.788701  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:23.788705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788743  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:23.788750  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:23.788757  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:40:23.788762  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:23.788767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:23.788798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251151  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.251186  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.251204  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:40:24.251219  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.251230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251318  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.251332  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.251345  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.251355  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:40:24.251365  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251450  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.251464  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.251476  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:40:24.251487  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:24.251497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251563  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251576  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.251591  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.251604  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:40:24.251615  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:24.251624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251700  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.251717  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.251732  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:40:24.251744  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:24.251754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251770  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251790  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251805  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.251814  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.251822  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:40:24.251829  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.251834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251843  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251876  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.251884  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.251900  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.251906  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:40:24.251910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251926  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251933  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251945  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.251951  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.251957  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:40:24.251962  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:24.251967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.251995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252001  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252008  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.252013  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:40:24.252018  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:24.252022  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252045  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252057  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252063  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.252069  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:40:24.252074  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:24.252078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252093  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252112  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252119  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.252125  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:40:24.252130  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.252134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252169  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252175  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.252181  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.252186  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:40:24.252190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252224  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252231  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.252237  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:40:24.252242  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:24.252246  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252280  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252287  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.252293  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:40:24.252298  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:24.252302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252318  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252336  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252343  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.252349  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:40:24.252354  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:24.252358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252366  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252410  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252431  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.252443  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:40:24.252454  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.252463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252546  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252559  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.252566  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.252572  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:40:24.252577  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252588  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252620  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252628  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.252635  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:40:24.252641  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:24.252646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252655  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252687  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252694  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.252701  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:40:24.252707  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:24.252712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252730  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252752  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252760  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.252766  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:40:24.252772  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:24.252777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252814  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252839  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252852  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.252864  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:40:24.252875  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.252883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252899  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252915  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252930  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.252956  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.252969  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.252982  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.252992  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:40:24.253000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253068  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253081  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253093  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.253101  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:40:24.253107  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:24.253112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253123  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253155  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253163  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.253169  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:40:24.253175  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:24.253180  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253220  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253227  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.253234  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:40:24.253240  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:24.253245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253271  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253285  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253297  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.253309  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:40:24.253315  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.253321  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253344  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253360  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253387  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253406  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.253419  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.253430  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:40:24.253439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253456  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253489  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253514  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253528  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.253540  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:40:24.253552  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:24.253561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253638  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253647  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.253654  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:40:24.253660  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:24.253665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253684  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253706  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253714  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.253721  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:40:24.253727  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:24.253732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253772  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253779  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.253786  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:40:24.253792  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.253797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253839  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.253847  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.253853  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:40:24.253858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253940  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:40:24.253949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.253963  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.253977  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.253988  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.253996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.254041  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:40:24.254256  1 14 json_gui_to_db() created db_node
09-16 14:40:24.282414  1 14 json_gui_to_db() created db_json
09-16 14:40:24.282740  1 10 json_db_to_gui() begin
09-16 14:40:24.317803  1 10 json_db_to_gui() read dbAST
09-16 14:40:24.317914  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.317954  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.317977  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.317999  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.318061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.318104  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:40:24.318154  1 13 json_db_to_gui() child args name <prolog>
09-16 14:40:24.318174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.318202  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:40:24.318224  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.318255  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.318276  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.318332  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.318367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.318426  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.318448  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.318477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.318544  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.318566  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.318585  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.318604  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.318632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.318654  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:40:24.318676  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:40:24.318696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.318944  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:40:24.318970  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.318990  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.319009  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.319034  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.319061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.319089  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.319109  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.319136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.319194  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.319216  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.319245  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.319264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.319296  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:40:24.319320  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:40:24.319340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.319384  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:40:24.319411  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.319432  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.319451  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.319476  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.319502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.319529  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.319550  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.319576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.319605  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.319625  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.319644  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.319663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.319692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.319714  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:40:24.319738  1 13 json_db_to_gui() child args name <metrics>
09-16 14:40:24.319758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.319801  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:40:24.319824  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.319843  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.319861  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.319886  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.319912  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.319940  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.319960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.319986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.320015  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.320034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320062  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.320081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320106  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:24.320129  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:24.320148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320191  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:24.320214  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.320233  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.320251  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.320276  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.320301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.320329  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.320349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.320420  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.320443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320470  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.320490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320515  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:40:24.320538  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:40:24.320557  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320600  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:40:24.320623  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.320642  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.320660  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.320684  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.320709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.320737  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.320757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.320811  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.320831  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.320850  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.320870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.320898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.320921  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:24.320943  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:24.320962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321006  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:24.321029  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.321048  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.321067  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.321092  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.321119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.321146  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.321166  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321192  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.321219  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.321239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321266  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.321286  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321309  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:40:24.321332  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:40:24.321351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321398  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:40:24.321423  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.321442  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.321461  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.321486  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.321512  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.321540  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.321560  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.321614  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.321634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321660  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.321680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321704  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:40:24.321727  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:40:24.321746  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321790  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:40:24.321813  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.321832  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.321851  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.321876  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.321901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.321928  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.321948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.321974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.322002  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.322022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322049  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.322068  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322095  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:40:24.322118  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:40:24.322137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322181  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:40:24.322204  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.322223  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.322242  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.322266  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.322292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.322319  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.322339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.322393  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.322416  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322445  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.322464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322488  1 11 json_db_to_gui() operator() switch OBJECT child name=<generator>
09-16 14:40:24.322511  1 13 json_db_to_gui() child args name <generator>
09-16 14:40:24.322529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322572  1 13 json_db_to_gui() metadata node was found, name=<generator>
09-16 14:40:24.322596  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.322615  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.322633  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.322657  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.322683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.322711  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.322730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.322784  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.322804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322830  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.322850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322874  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type>
09-16 14:40:24.322896  1 13 json_db_to_gui() child args name <fragment_type>
09-16 14:40:24.322915  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.322957  1 13 json_db_to_gui() metadata node was found, name=<fragment_type>
09-16 14:40:24.322980  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.322999  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.323017  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.323041  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.323067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.323094  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.323113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.323166  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.323185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323212  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.323231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323258  1 11 json_db_to_gui() operator() switch OBJECT child name=<interface_type>
09-16 14:40:24.323280  1 13 json_db_to_gui() child args name <interface_type>
09-16 14:40:24.323299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323342  1 13 json_db_to_gui() metadata node was found, name=<interface_type>
09-16 14:40:24.323365  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.323384  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.323406  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.323432  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.323458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.323485  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.323505  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.323559  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.323579  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323606  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.323625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323649  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbosity>
09-16 14:40:24.323671  1 13 json_db_to_gui() child args name <verbosity>
09-16 14:40:24.323690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323733  1 13 json_db_to_gui() metadata node was found, name=<verbosity>
09-16 14:40:24.323755  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.323775  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.323793  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.323817  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.323843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.323870  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.323890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323916  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.323944  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.323963  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.323990  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.324009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324033  1 11 json_db_to_gui() operator() switch OBJECT child name=<DAQConfig>
09-16 14:40:24.324055  1 13 json_db_to_gui() child args name <DAQConfig>
09-16 14:40:24.324073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324116  1 13 json_db_to_gui() metadata node was found, name=<DAQConfig>
09-16 14:40:24.324142  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.324163  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.324182  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.324208  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.324238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.324267  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.324290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.324351  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.324373  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.324392  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.324416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.324449  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324472  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceLength>
09-16 14:40:24.324497  1 13 json_db_to_gui() child args name <MillisliceLength>
09-16 14:40:24.324518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324563  1 13 json_db_to_gui() metadata node was found, name=<MillisliceLength>
09-16 14:40:24.324586  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.324604  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.324623  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.324648  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.324674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.324706  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.324728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.324792  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.324813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324842  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.324861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324886  1 11 json_db_to_gui() operator() switch OBJECT child name=<MillisliceOverlap>
09-16 14:40:24.324908  1 13 json_db_to_gui() child args name <MillisliceOverlap>
09-16 14:40:24.324927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.324973  1 13 json_db_to_gui() metadata node was found, name=<MillisliceOverlap>
09-16 14:40:24.324996  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.325015  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.325033  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.325058  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.325084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.325111  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.325130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.325184  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.325204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325230  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.325250  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325274  1 11 json_db_to_gui() operator() switch OBJECT child name=<UseExternalTimestamp>
09-16 14:40:24.325296  1 13 json_db_to_gui() child args name <UseExternalTimestamp>
09-16 14:40:24.325315  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325359  1 13 json_db_to_gui() metadata node was found, name=<UseExternalTimestamp>
09-16 14:40:24.325382  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.325406  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.325426  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.325451  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.325476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.325504  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.325524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325550  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.325579  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.325598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325625  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.325648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325673  1 11 json_db_to_gui() operator() switch OBJECT child name=<StartOnNOvASync>
09-16 14:40:24.325696  1 13 json_db_to_gui() child args name <StartOnNOvASync>
09-16 14:40:24.325715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325760  1 13 json_db_to_gui() metadata node was found, name=<StartOnNOvASync>
09-16 14:40:24.325783  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.325802  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.325821  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.325845  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.325871  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.325898  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.325918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.325945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.325972  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.325992  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326019  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.326039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326063  1 11 json_db_to_gui() operator() switch OBJECT child name=<EmptyWriteDelay>
09-16 14:40:24.326085  1 13 json_db_to_gui() child args name <EmptyWriteDelay>
09-16 14:40:24.326104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326148  1 13 json_db_to_gui() metadata node was found, name=<EmptyWriteDelay>
09-16 14:40:24.326171  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.326190  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.326209  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.326233  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.326259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.326286  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.326306  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.326361  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.326380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326411  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.326432  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326456  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareClockRate>
09-16 14:40:24.326479  1 13 json_db_to_gui() child args name <HardwareClockRate>
09-16 14:40:24.326498  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326543  1 13 json_db_to_gui() metadata node was found, name=<HardwareClockRate>
09-16 14:40:24.326566  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.326584  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.326603  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.326628  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.326653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.326680  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.326700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.326754  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.326773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326803  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.326823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326851  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.326870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326894  1 11 json_db_to_gui() operator() switch OBJECT child name=<HardwareConfig>
09-16 14:40:24.326916  1 13 json_db_to_gui() child args name <HardwareConfig>
09-16 14:40:24.326935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.326978  1 13 json_db_to_gui() metadata node was found, name=<HardwareConfig>
09-16 14:40:24.327001  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.327020  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.327039  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.327063  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.327088  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.327115  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.327135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.327162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.327190  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.327210  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.327229  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.327248  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.327277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.327298  1 11 json_db_to_gui() operator() switch OBJECT child name=<eventDataInterfaceSelect>
09-16 14:40:24.327320  1 13 json_db_to_gui() child args name <eventDataInterfaceSelect>
09-16 14:40:24.327339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.327383  1 13 json_db_to_gui() metadata node was found, name=<eventDataInterfaceSelect>
09-16 14:40:24.327411  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.327431  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.327450  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.327474  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.327500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.327528  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.327548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.327574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.327602  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.327622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.327649  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.327668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.327692  1 11 json_db_to_gui() operator() switch OBJECT child name=<ChannelControl>
09-16 14:40:24.327714  1 13 json_db_to_gui() child args name <ChannelControl>
09-16 14:40:24.327732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.327776  1 13 json_db_to_gui() metadata node was found, name=<ChannelControl>
09-16 14:40:24.327799  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.327817  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.327836  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.327859  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.327885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.327912  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.327932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.327961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.327989  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.328009  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.328028  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.328047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.328075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328096  1 11 json_db_to_gui() operator() switch OBJECT child name=<ExtTriggerMode>
09-16 14:40:24.328118  1 13 json_db_to_gui() child args name <ExtTriggerMode>
09-16 14:40:24.328137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328183  1 13 json_db_to_gui() metadata node was found, name=<ExtTriggerMode>
09-16 14:40:24.328206  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.328225  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.328244  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.328268  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.328293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.328321  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.328340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.328394  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.328418  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328446  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.328466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328489  1 11 json_db_to_gui() operator() switch OBJECT child name=<LEDTrigger>
09-16 14:40:24.328512  1 13 json_db_to_gui() child args name <LEDTrigger>
09-16 14:40:24.328531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328576  1 13 json_db_to_gui() metadata node was found, name=<LEDTrigger>
09-16 14:40:24.328599  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.328617  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.328636  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.328660  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.328686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.328714  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.328733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328759  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.328786  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.328806  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328833  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.328852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328877  1 11 json_db_to_gui() operator() switch OBJECT child name=<TimestampRate>
09-16 14:40:24.328899  1 13 json_db_to_gui() child args name <TimestampRate>
09-16 14:40:24.328918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.328963  1 13 json_db_to_gui() metadata node was found, name=<TimestampRate>
09-16 14:40:24.328986  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.329005  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.329023  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.329047  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.329073  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.329100  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.329120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.329173  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.329193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329220  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.329239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329266  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.329285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329309  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_channel_control>
09-16 14:40:24.329331  1 13 json_db_to_gui() child args name <ALL_channel_control>
09-16 14:40:24.329350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329459  1 13 json_db_to_gui() metadata node was found, name=<ALL_channel_control>
09-16 14:40:24.329485  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.329505  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.329523  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.329548  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.329574  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.329602  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.329622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.329677  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.329696  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329724  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.329743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329768  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_led_threshold>
09-16 14:40:24.329790  1 13 json_db_to_gui() child args name <ALL_led_threshold>
09-16 14:40:24.329809  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.329853  1 13 json_db_to_gui() metadata node was found, name=<ALL_led_threshold>
09-16 14:40:24.329877  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.329896  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.329914  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.329938  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.329964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.329992  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.330012  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.330066  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.330086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330113  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.330133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330157  1 11 json_db_to_gui() operator() switch OBJECT child name=<trigger_input_delay>
09-16 14:40:24.330179  1 13 json_db_to_gui() child args name <trigger_input_delay>
09-16 14:40:24.330198  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330242  1 13 json_db_to_gui() metadata node was found, name=<trigger_input_delay>
09-16 14:40:24.330266  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.330286  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.330305  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.330329  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.330354  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.330382  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.330405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.330462  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.330482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330509  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.330529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330553  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_clock_control>
09-16 14:40:24.330576  1 13 json_db_to_gui() child args name <dsp_clock_control>
09-16 14:40:24.330595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330642  1 13 json_db_to_gui() metadata node was found, name=<dsp_clock_control>
09-16 14:40:24.330666  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.330685  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.330704  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.330728  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.330754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.330781  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.330800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.330855  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.330875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330901  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.330921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.330946  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_window>
09-16 14:40:24.330968  1 13 json_db_to_gui() child args name <ALL_readout_window>
09-16 14:40:24.330987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331031  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_window>
09-16 14:40:24.331054  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.331073  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.331091  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.331116  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.331142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.331170  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.331189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331215  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.331243  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.331262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331289  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.331309  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331333  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_readout_pretrigger>
09-16 14:40:24.331356  1 13 json_db_to_gui() child args name <ALL_readout_pretrigger>
09-16 14:40:24.331375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331422  1 13 json_db_to_gui() metadata node was found, name=<ALL_readout_pretrigger>
09-16 14:40:24.331447  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.331466  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.331485  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.331508  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.331534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.331562  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.331581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331608  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.331636  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.331656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331683  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.331703  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331726  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_cfd_parameters>
09-16 14:40:24.331749  1 13 json_db_to_gui() child args name <ALL_cfd_parameters>
09-16 14:40:24.331770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.331815  1 13 json_db_to_gui() metadata node was found, name=<ALL_cfd_parameters>
09-16 14:40:24.331838  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.331857  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.331876  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.331901  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.331927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.331955  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.331974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.332028  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.332048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332075  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.332097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332124  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_p_window>
09-16 14:40:24.332149  1 13 json_db_to_gui() child args name <ALL_p_window>
09-16 14:40:24.332172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332218  1 13 json_db_to_gui() metadata node was found, name=<ALL_p_window>
09-16 14:40:24.332245  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.332265  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.332285  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.332311  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.332339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.332371  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.332394  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.332459  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.332479  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332505  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.332525  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332549  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i2_window>
09-16 14:40:24.332572  1 13 json_db_to_gui() child args name <ALL_i2_window>
09-16 14:40:24.332592  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332640  1 13 json_db_to_gui() metadata node was found, name=<ALL_i2_window>
09-16 14:40:24.332667  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.332689  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.332710  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.332735  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.332761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.332790  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.332810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332836  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.332864  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.332884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332911  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.332931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.332954  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m1_window>
09-16 14:40:24.332977  1 13 json_db_to_gui() child args name <ALL_m1_window>
09-16 14:40:24.332999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333045  1 13 json_db_to_gui() metadata node was found, name=<ALL_m1_window>
09-16 14:40:24.333069  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.333088  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.333106  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.333130  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.333156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.333184  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.333204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.333258  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.333277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333304  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.333324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333347  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_m2_window>
09-16 14:40:24.333370  1 13 json_db_to_gui() child args name <ALL_m2_window>
09-16 14:40:24.333389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333438  1 13 json_db_to_gui() metadata node was found, name=<ALL_m2_window>
09-16 14:40:24.333463  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.333482  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.333500  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.333524  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.333550  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.333578  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.333598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.333652  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.333672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333699  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.333719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333743  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_d_window>
09-16 14:40:24.333766  1 13 json_db_to_gui() child args name <ALL_d_window>
09-16 14:40:24.333784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.333829  1 13 json_db_to_gui() metadata node was found, name=<ALL_d_window>
09-16 14:40:24.333851  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.333870  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.333889  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.333913  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.333939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.333967  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.333986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.334040  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.334060  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334087  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.334107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334130  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_i1_window>
09-16 14:40:24.334152  1 13 json_db_to_gui() child args name <ALL_i1_window>
09-16 14:40:24.334174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334220  1 13 json_db_to_gui() metadata node was found, name=<ALL_i1_window>
09-16 14:40:24.334243  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.334262  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.334281  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.334305  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.334330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.334358  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.334377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334407  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.334437  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.334457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334484  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.334504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334527  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_disc_width>
09-16 14:40:24.334549  1 13 json_db_to_gui() child args name <ALL_disc_width>
09-16 14:40:24.334568  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334613  1 13 json_db_to_gui() metadata node was found, name=<ALL_disc_width>
09-16 14:40:24.334636  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.334655  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.334673  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.334698  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.334724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.334751  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.334771  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.334826  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.334845  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334872  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.334892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.334916  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_baseline_start>
09-16 14:40:24.334938  1 13 json_db_to_gui() child args name <ALL_baseline_start>
09-16 14:40:24.334957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335002  1 13 json_db_to_gui() metadata node was found, name=<ALL_baseline_start>
09-16 14:40:24.335025  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.335044  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.335063  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.335087  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.335113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.335140  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.335160  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.335214  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.335234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335261  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.335280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335304  1 11 json_db_to_gui() operator() switch OBJECT child name=<ALL_bias_config>
09-16 14:40:24.335327  1 13 json_db_to_gui() child args name <ALL_bias_config>
09-16 14:40:24.335348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335393  1 13 json_db_to_gui() metadata node was found, name=<ALL_bias_config>
09-16 14:40:24.335420  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.335440  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.335458  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.335482  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.335508  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.335535  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.335555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335581  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.335609  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.335629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335655  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.335675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335698  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_control>
09-16 14:40:24.335720  1 13 json_db_to_gui() child args name <c2c_control>
09-16 14:40:24.335739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335784  1 13 json_db_to_gui() metadata node was found, name=<c2c_control>
09-16 14:40:24.335807  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.335825  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.335844  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.335867  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.335893  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.335920  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.335940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.335966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.335994  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.336013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336040  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.336059  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336083  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_master_intr_control>
09-16 14:40:24.336106  1 13 json_db_to_gui() child args name <c2c_master_intr_control>
09-16 14:40:24.336124  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336168  1 13 json_db_to_gui() metadata node was found, name=<c2c_master_intr_control>
09-16 14:40:24.336191  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.336210  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.336228  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.336252  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.336278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.336305  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.336325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.336380  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.336403  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336432  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.336452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336476  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_clock_control>
09-16 14:40:24.336504  1 13 json_db_to_gui() child args name <comm_clock_control>
09-16 14:40:24.336524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336569  1 13 json_db_to_gui() metadata node was found, name=<comm_clock_control>
09-16 14:40:24.336592  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.336612  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.336630  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.336654  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.336680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.336708  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.336728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.336781  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.336801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336828  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.336848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336872  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_config>
09-16 14:40:24.336895  1 13 json_db_to_gui() child args name <comm_led_config>
09-16 14:40:24.336913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.336958  1 13 json_db_to_gui() metadata node was found, name=<comm_led_config>
09-16 14:40:24.336981  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.337000  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.337018  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.337042  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.337068  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.337095  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.337115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.337170  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.337189  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337215  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.337235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337258  1 11 json_db_to_gui() operator() switch OBJECT child name=<comm_led_input>
09-16 14:40:24.337281  1 13 json_db_to_gui() child args name <comm_led_input>
09-16 14:40:24.337300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337345  1 13 json_db_to_gui() metadata node was found, name=<comm_led_input>
09-16 14:40:24.337368  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.337387  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.337411  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.337436  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.337462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.337490  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.337510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.337564  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.337584  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337611  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.337631  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337654  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_config>
09-16 14:40:24.337679  1 13 json_db_to_gui() child args name <qi_dac_config>
09-16 14:40:24.337699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337743  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_config>
09-16 14:40:24.337766  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.337785  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.337804  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.337828  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.337853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.337881  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.337900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.337927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.337954  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.337974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338001  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.338020  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338044  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_dac_control>
09-16 14:40:24.338066  1 13 json_db_to_gui() child args name <qi_dac_control>
09-16 14:40:24.338085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338130  1 13 json_db_to_gui() metadata node was found, name=<qi_dac_control>
09-16 14:40:24.338153  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.338172  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.338190  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.338214  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.338240  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.338267  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.338287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.338341  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.338361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338388  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.338411  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338436  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_config>
09-16 14:40:24.338459  1 13 json_db_to_gui() child args name <mon_config>
09-16 14:40:24.338477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338523  1 13 json_db_to_gui() metadata node was found, name=<mon_config>
09-16 14:40:24.338545  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.338565  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.338584  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.338607  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.338633  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.338661  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.338680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.338735  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.338754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338781  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.338800  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338824  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_select>
09-16 14:40:24.338849  1 13 json_db_to_gui() child args name <mon_select>
09-16 14:40:24.338868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.338913  1 13 json_db_to_gui() metadata node was found, name=<mon_select>
09-16 14:40:24.338936  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.338954  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.338973  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.338997  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.339023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.339051  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.339071  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339097  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.339125  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.339144  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339170  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.339190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339214  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_gpio>
09-16 14:40:24.339236  1 13 json_db_to_gui() child args name <mon_gpio>
09-16 14:40:24.339254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339298  1 13 json_db_to_gui() metadata node was found, name=<mon_gpio>
09-16 14:40:24.339321  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.339340  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.339359  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.339383  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.339412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.339443  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.339463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.339517  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.339537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339564  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.339583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339607  1 11 json_db_to_gui() operator() switch OBJECT child name=<mon_control>
09-16 14:40:24.339630  1 13 json_db_to_gui() child args name <mon_control>
09-16 14:40:24.339649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339694  1 13 json_db_to_gui() metadata node was found, name=<mon_control>
09-16 14:40:24.339717  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.339735  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.339754  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.339778  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.339803  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.339830  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.339850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.339904  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.339923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339950  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.339969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.339994  1 11 json_db_to_gui() operator() switch OBJECT child name=<c2c_slave_intr_control>
09-16 14:40:24.340022  1 13 json_db_to_gui() child args name <c2c_slave_intr_control>
09-16 14:40:24.340042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340087  1 13 json_db_to_gui() metadata node was found, name=<c2c_slave_intr_control>
09-16 14:40:24.340112  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.340133  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.340156  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.340182  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.340209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.340239  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.340260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.340320  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.340343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340373  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.340394  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340423  1 11 json_db_to_gui() operator() switch OBJECT child name=<gpio_output_width>
09-16 14:40:24.340446  1 13 json_db_to_gui() child args name <gpio_output_width>
09-16 14:40:24.340465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340512  1 13 json_db_to_gui() metadata node was found, name=<gpio_output_width>
09-16 14:40:24.340537  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.340559  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.340579  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.340608  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.340637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.340668  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.340688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.340743  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.340763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340790  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.340810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340834  1 11 json_db_to_gui() operator() switch OBJECT child name=<front_panel_config>
09-16 14:40:24.340857  1 13 json_db_to_gui() child args name <front_panel_config>
09-16 14:40:24.340876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.340922  1 13 json_db_to_gui() metadata node was found, name=<front_panel_config>
09-16 14:40:24.340946  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.340965  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.340983  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.341008  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.341034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.341062  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.341081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.341136  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.341156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341183  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.341203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341227  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_config>
09-16 14:40:24.341252  1 13 json_db_to_gui() child args name <dsp_led_config>
09-16 14:40:24.341271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341316  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_config>
09-16 14:40:24.341339  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.341359  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.341377  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.341404  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.341432  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.341461  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.341480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.341536  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.341555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341582  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.341601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341625  1 11 json_db_to_gui() operator() switch OBJECT child name=<dsp_led_input>
09-16 14:40:24.341647  1 13 json_db_to_gui() child args name <dsp_led_input>
09-16 14:40:24.341666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341711  1 13 json_db_to_gui() metadata node was found, name=<dsp_led_input>
09-16 14:40:24.341735  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.341754  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.341773  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.341797  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.341823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.341850  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.341870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.341925  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.341945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.341971  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.341991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342014  1 11 json_db_to_gui() operator() switch OBJECT child name=<baseline_delay>
09-16 14:40:24.342037  1 13 json_db_to_gui() child args name <baseline_delay>
09-16 14:40:24.342056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342101  1 13 json_db_to_gui() metadata node was found, name=<baseline_delay>
09-16 14:40:24.342124  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.342143  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.342162  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.342186  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.342211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.342239  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.342258  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.342312  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.342332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342359  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.342379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342406  1 11 json_db_to_gui() operator() switch OBJECT child name=<diag_channel_input>
09-16 14:40:24.342434  1 13 json_db_to_gui() child args name <diag_channel_input>
09-16 14:40:24.342453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342498  1 13 json_db_to_gui() metadata node was found, name=<diag_channel_input>
09-16 14:40:24.342521  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.342540  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.342559  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.342583  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.342608  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.342635  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.342655  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.342709  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.342729  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342756  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.342764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342775  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_config>
09-16 14:40:24.342784  1 13 json_db_to_gui() child args name <qi_config>
09-16 14:40:24.342790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342831  1 13 json_db_to_gui() metadata node was found, name=<qi_config>
09-16 14:40:24.342849  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.342856  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.342863  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.342874  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.342885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.342899  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.342906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.342930  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.342937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342950  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.342957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.342967  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_delay>
09-16 14:40:24.342977  1 13 json_db_to_gui() child args name <qi_delay>
09-16 14:40:24.342984  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343016  1 13 json_db_to_gui() metadata node was found, name=<qi_delay>
09-16 14:40:24.343026  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.343033  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.343040  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.343052  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.343064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343078  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.343085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343112  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.343119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343133  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.343140  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343151  1 11 json_db_to_gui() operator() switch OBJECT child name=<qi_pulse_width>
09-16 14:40:24.343160  1 13 json_db_to_gui() child args name <qi_pulse_width>
09-16 14:40:24.343167  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343199  1 13 json_db_to_gui() metadata node was found, name=<qi_pulse_width>
09-16 14:40:24.343209  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.343216  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.343223  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.343235  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.343247  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343261  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.343267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343294  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.343301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343314  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.343321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343332  1 11 json_db_to_gui() operator() switch OBJECT child name=<external_gate_width>
09-16 14:40:24.343341  1 13 json_db_to_gui() child args name <external_gate_width>
09-16 14:40:24.343348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343380  1 13 json_db_to_gui() metadata node was found, name=<external_gate_width>
09-16 14:40:24.343389  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.343400  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.343408  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.343420  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.343433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343446  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.343453  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343467  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343481  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.343488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343501  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.343508  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343523  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.343530  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343544  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.343552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343566  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.343573  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343584  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:24.343593  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:24.343600  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343628  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:24.343638  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.343645  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.343652  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.343664  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.343677  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343691  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.343698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343725  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.343732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343746  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.343753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343763  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:40:24.343772  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:40:24.343779  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343808  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:40:24.343817  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.343825  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.343832  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.343844  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.343856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343870  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.343877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343890  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.343904  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.343911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343924  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.343931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343942  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:40:24.343951  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:40:24.343958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.343986  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:40:24.343995  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.344002  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.344009  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.344021  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.344033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344047  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.344054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344081  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.344088  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344101  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.344108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344119  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp_standard>
09-16 14:40:24.344128  1 13 json_db_to_gui() child args name <ssp_standard>
09-16 14:40:24.344135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344163  1 13 json_db_to_gui() metadata node was found, name=<ssp_standard>
09-16 14:40:24.344172  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.344179  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.344186  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.344198  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.344210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344224  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.344231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344243  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344257  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.344263  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344311  1 11 json_db_to_gui() missing annotation for string data; keyssp_standard
09-16 14:40:24.344325  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.344333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344345  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard>
09-16 14:40:24.344354  1 13 json_db_to_gui() child args name <ssp01_standard>
09-16 14:40:24.344361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344389  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard>
09-16 14:40:24.344402  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.344410  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.344417  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.344430  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.344442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344456  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.344463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344490  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.344497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344510  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.344517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344528  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:24.344538  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:24.344545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344573  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:24.344583  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.344590  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.344598  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.344610  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.344622  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344636  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.344643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344670  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.344676  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344690  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.344697  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344708  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:24.344717  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_id>
09-16 14:40:24.344724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344752  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:24.344762  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.344769  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.344776  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.344788  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.344801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344815  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.344822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344848  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.344855  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344868  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.344875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344886  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:24.344896  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:24.344903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.344930  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:24.344940  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.344947  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.344954  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.344966  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.344978  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.344991  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.344998  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345011  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345025  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.345032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345045  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.345052  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345063  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.345073  1 13 json_db_to_gui() child args name <ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.345079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345108  1 13 json_db_to_gui() metadata node was found, name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.345117  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.345124  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.345132  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.345143  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.345156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345169  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.345176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345203  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.345210  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345224  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.345230  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345242  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard>
09-16 14:40:24.345251  1 13 json_db_to_gui() child args name <ssp02_standard>
09-16 14:40:24.345257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345285  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard>
09-16 14:40:24.345295  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.345302  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.345309  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.345321  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.345333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345346  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.345353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345380  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.345387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345404  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.345412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345424  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:24.345433  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:24.345440  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345469  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:24.345478  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.345486  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.345493  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.345504  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.345517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345530  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.345537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345564  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.345571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345584  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.345591  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345603  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:24.345612  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_id>
09-16 14:40:24.345619  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345647  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:24.345657  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.345664  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.345671  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.345683  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.345695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345709  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.345716  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345742  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.345749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345762  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.345769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345780  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:24.345789  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:24.345796  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345825  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:24.345835  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.345842  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.345849  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.345861  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.345873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345887  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.345894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.345920  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.345927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345940  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.345947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.345958  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.345968  1 13 json_db_to_gui() child args name <ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.345974  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346003  1 13 json_db_to_gui() metadata node was found, name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.346012  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.346020  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.346027  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.346039  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.346051  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346064  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.346071  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346098  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.346105  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346118  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.346125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346136  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard>
09-16 14:40:24.346146  1 13 json_db_to_gui() child args name <ssp03_standard>
09-16 14:40:24.346152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346180  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard>
09-16 14:40:24.346190  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.346197  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.346203  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.346215  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.346228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346242  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.346248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346275  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.346282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346295  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.346302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346314  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:24.346323  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:24.346330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346358  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:24.346367  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.346375  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.346382  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.346394  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.346409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346423  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.346431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346457  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.346464  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346477  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.346484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346496  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:24.346505  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_id>
09-16 14:40:24.346512  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346541  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:24.346550  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.346557  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.346565  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.346577  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.346589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346603  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.346610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346636  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.346643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346657  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.346664  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346675  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:24.346684  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:24.346691  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346720  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:24.346729  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.346736  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.346743  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.346755  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.346767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346781  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.346787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346814  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.346821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346835  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.346841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346853  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.346862  1 13 json_db_to_gui() child args name <ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.346869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346898  1 13 json_db_to_gui() metadata node was found, name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.346908  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.346915  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.346923  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.346935  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.346947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346960  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.346967  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.346980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.346994  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.347001  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347014  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.347021  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347033  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard>
09-16 14:40:24.347042  1 13 json_db_to_gui() child args name <ssp04_standard>
09-16 14:40:24.347049  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347077  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard>
09-16 14:40:24.347087  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.347094  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.347101  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.347113  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.347125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347138  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.347145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347172  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.347178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347192  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.347199  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347210  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:24.347219  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:24.347226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347254  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:24.347264  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.347271  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.347278  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.347290  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.347302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347316  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.347323  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347349  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.347356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347370  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.347376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347387  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:24.347401  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_id>
09-16 14:40:24.347409  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347438  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:24.347448  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.347455  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.347463  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.347475  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.347487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347500  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.347508  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347534  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.347542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347555  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.347562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347573  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:24.347582  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:24.347589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347618  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:24.347627  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.347634  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.347642  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.347653  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.347666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347679  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.347687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347713  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.347720  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347733  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.347740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347751  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.347761  1 13 json_db_to_gui() child args name <ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.347768  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347796  1 13 json_db_to_gui() metadata node was found, name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.347806  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.347813  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.347819  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.347831  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.347843  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347857  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.347864  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347877  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.347891  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.347898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347911  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.347918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347929  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard>
09-16 14:40:24.347939  1 13 json_db_to_gui() child args name <ssp05_standard>
09-16 14:40:24.347945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.347974  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard>
09-16 14:40:24.347983  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.347992  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.348015  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.348040  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.348055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348072  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.348079  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348109  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.348117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348132  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.348141  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348152  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:24.348163  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:24.348170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348201  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:24.348212  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.348220  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.348228  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.348242  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.348256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348273  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.348281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348295  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348309  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.348316  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348330  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.348337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348348  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:24.348358  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_id>
09-16 14:40:24.348365  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348399  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:24.348410  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.348418  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.348425  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.348438  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.348452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348467  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.348476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348508  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.348516  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348533  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.348541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348553  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:24.348563  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:24.348570  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348601  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:24.348612  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.348619  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.348626  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.348639  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.348651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348665  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.348672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348686  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348700  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.348707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348720  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.348727  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348739  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.348748  1 13 json_db_to_gui() child args name <ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.348755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348785  1 13 json_db_to_gui() metadata node was found, name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.348794  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.348801  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.348809  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.348821  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.348833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348847  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.348854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348866  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.348880  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.348887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348901  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.348908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348919  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard>
09-16 14:40:24.348929  1 13 json_db_to_gui() child args name <ssp06_standard>
09-16 14:40:24.348936  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.348964  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard>
09-16 14:40:24.348974  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.348981  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.348988  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.349000  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.349012  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349026  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.349033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349060  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.349067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349080  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.349087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349098  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:24.349107  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:24.349114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349143  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:24.349153  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.349160  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.349167  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.349179  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.349191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349205  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.349212  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349225  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349239  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.349246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349259  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.349266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349277  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:24.349286  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_id>
09-16 14:40:24.349293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349323  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:24.349332  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.349339  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.349347  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.349358  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.349371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349385  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.349391  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349410  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349424  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.349432  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349445  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.349452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349464  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:24.349475  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:24.349482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349512  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:24.349522  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.349529  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.349536  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.349548  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.349561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349575  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.349582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349609  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.349616  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349630  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.349637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349648  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.349658  1 13 json_db_to_gui() child args name <ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.349665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349694  1 13 json_db_to_gui() metadata node was found, name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.349703  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.349711  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.349718  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.349730  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.349743  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349757  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.349764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349791  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.349798  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349811  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.349818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349829  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard>
09-16 14:40:24.349838  1 13 json_db_to_gui() child args name <ssp07_standard>
09-16 14:40:24.349845  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349874  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard>
09-16 14:40:24.349884  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.349891  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.349898  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.349910  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.349922  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349935  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.349942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349955  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.349969  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.349976  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.349990  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.349996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350007  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:24.350017  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:24.350024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350052  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:24.350062  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.350069  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.350076  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.350088  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.350101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350114  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.350121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350149  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.350155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350169  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.350176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350188  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:24.350197  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_id>
09-16 14:40:24.350204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350233  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:24.350243  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.350250  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.350257  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.350268  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.350281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350294  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.350301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350327  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.350334  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350348  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.350355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350366  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:24.350376  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:24.350382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350416  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:24.350427  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.350434  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.350441  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.350454  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.350466  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350480  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.350487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350515  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.350522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350536  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.350543  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350554  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.350564  1 13 json_db_to_gui() child args name <ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.350571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350600  1 13 json_db_to_gui() metadata node was found, name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.350610  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.350618  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.350625  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.350637  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.350649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350663  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.350670  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350697  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.350704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350717  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.350725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350736  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard>
09-16 14:40:24.350745  1 13 json_db_to_gui() child args name <ssp08_standard>
09-16 14:40:24.350752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350781  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard>
09-16 14:40:24.350791  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.350797  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.350804  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.350815  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.350826  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350839  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.350845  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350857  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.350870  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.350876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350888  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.350895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350905  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:24.350913  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:24.350919  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.350947  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:24.350956  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.350962  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.350969  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.350980  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.350991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351004  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.351010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351034  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.351040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351052  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.351058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351068  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:24.351077  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_id>
09-16 14:40:24.351083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351111  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:24.351119  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.351126  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.351132  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.351143  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.351154  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351166  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.351172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351196  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.351202  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351214  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.351220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351230  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:24.351239  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:24.351246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351274  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:24.351283  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.351289  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.351295  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.351306  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.351318  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351331  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.351337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351361  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.351367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351379  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.351385  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351399  1 11 json_db_to_gui() operator() switch OBJECT child name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.351409  1 13 json_db_to_gui() child args name <ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.351415  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351444  1 13 json_db_to_gui() metadata node was found, name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.351453  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.351459  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.351465  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.351476  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.351488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351501  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.351507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351531  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.351537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351550  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.351556  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351570  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.351576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351586  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:40:24.351594  1 13 json_db_to_gui() child args name <main>
09-16 14:40:24.351600  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351608  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:40:24.351616  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.351622  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.351628  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.351639  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.351650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351662  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.351668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.351694  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.351701  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.351709  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.351715  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.351733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351743  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.351750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.351789  1 10 json_db_to_gui() created gui_node
09-16 14:40:24.403019  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.98 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_003_t" end time: Sep 16 14:40 CDT
"RoundConvert_GUIJson2DBJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

65/65 Testing: FileSystemFhicl_search2_004_t
65/65 Test: FileSystemFhicl_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/FileSystemFhicl_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/test004.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/test004.cmp.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test004.src.fcl" "-c" "test004.cmp.fcl" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test004/FileSystemFhicl_search2_004_t.d
"FileSystemFhicl_search2_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:23.711063  1  0 artdaq::database::filesystem trace_enable
09-16 14:40:23.711221  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:40:23.711309  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:23.771715  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:23.771740  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:23.772591  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.772609  1  5 findChild() args  path=<collection>
09-16 14:40:23.779889  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.781527  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.781585  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:23.781699  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.781707  1  5 findChild() Find succeeded.
09-16 14:40:23.783014  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.783026  1  5 findChild() args  path=<filter>
09-16 14:40:23.785117  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.786637  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.786649  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:23.787060  1 12 StorageProvider::FileSystemDB generate_oid=a66f9e18f8c44ceba4cc2a03
09-16 14:40:23.788421  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.788432  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "a66f9e18f8c44ceba4cc2a03"
    }
}>
09-16 14:40:23.788437  1  2 insertChild() args  path=<document._id>
09-16 14:40:23.790673  1  4 insertChild() new child value=object(...)
09-16 14:40:23.790694  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:23.792215  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.792228  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:23.793607  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.793656  1  4 insertChild() found child value=object(...)
09-16 14:40:23.795168  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a66f9e18f8c44ceba4cc2a03"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.795251  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a66f9e18f8c44ceba4cc2a03"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.795262  1  4 insertChild() Insert succeeded.
09-16 14:40:23.795313  1  4 StorageProvider::FileSystemDB::store() using generated oid=<a66f9e18f8c44ceba4cc2a03>.
09-16 14:40:23.795346  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:23.795367  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.795815  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/a66f9e18f8c44ceba4cc2a03.json>.
09-16 14:40:23.795863  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a66f9e18f8c44ceba4cc2a03"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.795870  1  5 findChild() args  path=<document>
09-16 14:40:23.797867  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.799401  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a66f9e18f8c44ceba4cc2a03"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.799434  1  5 findChild() found child value=object(...)
09-16 14:40:23.800996  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a66f9e18f8c44ceba4cc2a03"
}
}
}>
09-16 14:40:23.801005  1  5 findChild() Find succeeded.
09-16 14:40:23.809961  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:23.809971  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:23.810064  1  3 StorageProvider::FileSystemDB::index::_open() json=<{"version":{},"configurations.name":{}, "configurable_entity.name":{} }>
09-16 14:40:23.810237  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:23.810246  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "a66f9e18f8c44ceba4cc2a03"
        }
    }>.
09-16 14:40:23.810254  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<a66f9e18f8c44ceba4cc2a03>.
09-16 14:40:23.812127  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:23.812151  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:23.812156  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<a66f9e18f8c44ceba4cc2a03>.
09-16 14:40:23.812161  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:23.812240  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:23.812246  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<a66f9e18f8c44ceba4cc2a03>.
09-16 14:40:23.812250  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:23.812277  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:23.812525  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.812593  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:23.812612  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:23.812619  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:23.812782  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.812791  1  5 findChild() args  path=<collection>
09-16 14:40:23.814712  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.816106  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.816120  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:23.816194  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.816201  1  5 findChild() Find succeeded.
09-16 14:40:23.817251  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.817261  1  5 findChild() args  path=<filter>
09-16 14:40:23.819140  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.820531  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.820541  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:23.820623  1 12 StorageProvider::FileSystemDB generate_oid=4a28173c086d44cab0687be6
09-16 14:40:23.821718  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.821728  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "4a28173c086d44cab0687be6"
    }
}>
09-16 14:40:23.821732  1  2 insertChild() args  path=<document._id>
09-16 14:40:23.823741  1  4 insertChild() new child value=object(...)
09-16 14:40:23.823750  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:23.825211  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.825222  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:23.826448  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.826466  1  4 insertChild() found child value=object(...)
09-16 14:40:23.827845  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a28173c086d44cab0687be6"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.827920  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a28173c086d44cab0687be6"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.827926  1  4 insertChild() Insert succeeded.
09-16 14:40:23.827962  1  4 StorageProvider::FileSystemDB::store() using generated oid=<4a28173c086d44cab0687be6>.
09-16 14:40:23.827974  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:23.827979  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.827990  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.828011  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/4a28173c086d44cab0687be6.json>.
09-16 14:40:23.828050  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a28173c086d44cab0687be6"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.828057  1  5 findChild() args  path=<document>
09-16 14:40:23.829877  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.831260  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a28173c086d44cab0687be6"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.831288  1  5 findChild() found child value=object(...)
09-16 14:40:23.832669  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4a28173c086d44cab0687be6"
}
}
}>
09-16 14:40:23.832677  1  5 findChild() Find succeeded.
09-16 14:40:23.840937  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:23.840944  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:23.840970  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.841243  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:23.841252  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "4a28173c086d44cab0687be6"
        }
    }>.
09-16 14:40:23.841257  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<4a28173c086d44cab0687be6>.
09-16 14:40:23.842988  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:23.842997  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:23.843001  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<4a28173c086d44cab0687be6>.
09-16 14:40:23.843004  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:23.843037  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:23.843043  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<4a28173c086d44cab0687be6>.
09-16 14:40:23.843046  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:23.843065  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:23.843281  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.843340  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:23.843353  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:23.843358  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:23.843494  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.843503  1  5 findChild() args  path=<collection>
09-16 14:40:23.845300  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.846627  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.846640  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:23.846710  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.846716  1  5 findChild() Find succeeded.
09-16 14:40:23.847718  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.847727  1  5 findChild() args  path=<filter>
09-16 14:40:23.849488  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.850973  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.850992  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:23.851062  1 12 StorageProvider::FileSystemDB generate_oid=92b710ed20d1412fa1cde47c
09-16 14:40:23.852137  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.852147  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "92b710ed20d1412fa1cde47c"
    }
}>
09-16 14:40:23.852150  1  2 insertChild() args  path=<document._id>
09-16 14:40:23.854048  1  4 insertChild() new child value=object(...)
09-16 14:40:23.854057  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:23.855425  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.855445  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:23.856640  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.856665  1  4 insertChild() found child value=object(...)
09-16 14:40:23.857998  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "92b710ed20d1412fa1cde47c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.858079  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "92b710ed20d1412fa1cde47c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.858086  1  4 insertChild() Insert succeeded.
09-16 14:40:23.858120  1  4 StorageProvider::FileSystemDB::store() using generated oid=<92b710ed20d1412fa1cde47c>.
09-16 14:40:23.858130  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:23.858134  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.858143  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.858158  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/92b710ed20d1412fa1cde47c.json>.
09-16 14:40:23.858192  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "92b710ed20d1412fa1cde47c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.858208  1  5 findChild() args  path=<document>
09-16 14:40:23.859972  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.861359  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "92b710ed20d1412fa1cde47c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.861387  1  5 findChild() found child value=object(...)
09-16 14:40:23.862727  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "92b710ed20d1412fa1cde47c"
}
}
}>
09-16 14:40:23.862735  1  5 findChild() Find succeeded.
09-16 14:40:23.870638  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:23.870646  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:23.870693  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.871079  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:23.871087  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "92b710ed20d1412fa1cde47c"
        }
    }>.
09-16 14:40:23.871093  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<92b710ed20d1412fa1cde47c>.
09-16 14:40:23.872779  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:23.872787  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:23.872790  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<92b710ed20d1412fa1cde47c>.
09-16 14:40:23.872793  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:23.872813  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:23.872818  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<92b710ed20d1412fa1cde47c>.
09-16 14:40:23.872821  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:23.872840  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:23.873116  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.873171  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:23.873182  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:23.873188  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:23.873315  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.873323  1  5 findChild() args  path=<collection>
09-16 14:40:23.875290  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.876661  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.876674  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:23.876746  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.876751  1  5 findChild() Find succeeded.
09-16 14:40:23.877769  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.877778  1  5 findChild() args  path=<filter>
09-16 14:40:23.879593  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.880935  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.880945  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:23.881024  1 12 StorageProvider::FileSystemDB generate_oid=3fbe9e3d19504b46aab36eca
09-16 14:40:23.882090  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.882108  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "3fbe9e3d19504b46aab36eca"
    }
}>
09-16 14:40:23.882112  1  2 insertChild() args  path=<document._id>
09-16 14:40:23.884023  1  4 insertChild() new child value=object(...)
09-16 14:40:23.884030  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:23.885355  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.885366  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:23.886575  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.886591  1  4 insertChild() found child value=object(...)
09-16 14:40:23.888005  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "3fbe9e3d19504b46aab36eca"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.888076  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "3fbe9e3d19504b46aab36eca"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.888083  1  4 insertChild() Insert succeeded.
09-16 14:40:23.888130  1  4 StorageProvider::FileSystemDB::store() using generated oid=<3fbe9e3d19504b46aab36eca>.
09-16 14:40:23.888141  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:23.888145  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.888154  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.888172  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/3fbe9e3d19504b46aab36eca.json>.
09-16 14:40:23.888213  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "3fbe9e3d19504b46aab36eca"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.888218  1  5 findChild() args  path=<document>
09-16 14:40:23.889984  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.891334  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "3fbe9e3d19504b46aab36eca"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.891361  1  5 findChild() found child value=object(...)
09-16 14:40:23.892782  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "3fbe9e3d19504b46aab36eca"
}
}
}>
09-16 14:40:23.892789  1  5 findChild() Find succeeded.
09-16 14:40:23.900965  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:23.900972  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:23.901002  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.901466  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:23.901474  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "3fbe9e3d19504b46aab36eca"
        }
    }>.
09-16 14:40:23.901480  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<3fbe9e3d19504b46aab36eca>.
09-16 14:40:23.903210  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:23.903218  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:23.903221  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<3fbe9e3d19504b46aab36eca>.
09-16 14:40:23.903224  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:23.903241  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:23.903245  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<3fbe9e3d19504b46aab36eca>.
09-16 14:40:23.903249  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:23.903269  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:23.903578  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:23.903639  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:23.903650  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:23.903656  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:23.903783  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.903791  1  5 findChild() args  path=<collection>
09-16 14:40:23.905580  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.906860  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.906872  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:23.906940  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.906945  1  5 findChild() Find succeeded.
09-16 14:40:23.907949  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.907957  1  5 findChild() args  path=<filter>
09-16 14:40:23.909771  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.911083  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.911092  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:23.911168  1 12 StorageProvider::FileSystemDB generate_oid=a32e88f347e54e7dbc6f37e8
09-16 14:40:23.912285  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:23.912295  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "a32e88f347e54e7dbc6f37e8"
    }
}>
09-16 14:40:23.912298  1  2 insertChild() args  path=<document._id>
09-16 14:40:23.914312  1  4 insertChild() new child value=object(...)
09-16 14:40:23.914320  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:23.915661  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.915671  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:23.916865  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:23.916881  1  4 insertChild() found child value=object(...)
09-16 14:40:23.918225  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a32e88f347e54e7dbc6f37e8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.918294  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a32e88f347e54e7dbc6f37e8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.918301  1  4 insertChild() Insert succeeded.
09-16 14:40:23.918335  1  4 StorageProvider::FileSystemDB::store() using generated oid=<a32e88f347e54e7dbc6f37e8>.
09-16 14:40:23.918346  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:23.918350  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.918360  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:23.918378  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/a32e88f347e54e7dbc6f37e8.json>.
09-16 14:40:23.918418  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a32e88f347e54e7dbc6f37e8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:23.918424  1  5 findChild() args  path=<document>
09-16 14:40:23.920159  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.921479  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a32e88f347e54e7dbc6f37e8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.436302  1  5 findChild() found child value=object(...)
09-16 14:40:24.438893  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a32e88f347e54e7dbc6f37e8"
}
}
}>
09-16 14:40:24.438904  1  5 findChild() Find succeeded.
09-16 14:40:24.447421  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.447438  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.447492  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.448036  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.448046  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "a32e88f347e54e7dbc6f37e8"
        }
    }>.
09-16 14:40:24.448055  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<a32e88f347e54e7dbc6f37e8>.
09-16 14:40:24.449790  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:24.449803  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:24.449809  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<a32e88f347e54e7dbc6f37e8>.
09-16 14:40:24.449814  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:24.449841  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:24.449848  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<a32e88f347e54e7dbc6f37e8>.
09-16 14:40:24.449853  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:24.449882  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.450226  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.450337  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.450355  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.450366  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.450632  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.450642  1  5 findChild() args  path=<collection>
09-16 14:40:24.452481  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.453804  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.453820  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.453923  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.453930  1  5 findChild() Find succeeded.
09-16 14:40:24.454913  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.454923  1  5 findChild() args  path=<filter>
09-16 14:40:24.456787  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.458096  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.458107  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.458233  1 12 StorageProvider::FileSystemDB generate_oid=326612e764504bc892e0cb7d
09-16 14:40:24.459295  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.459305  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "326612e764504bc892e0cb7d"
    }
}>
09-16 14:40:24.459311  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.461285  1  4 insertChild() new child value=object(...)
09-16 14:40:24.461295  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.462629  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.462641  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.463868  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.463889  1  4 insertChild() found child value=object(...)
09-16 14:40:24.465244  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "326612e764504bc892e0cb7d"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.465349  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "326612e764504bc892e0cb7d"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.465358  1  4 insertChild() Insert succeeded.
09-16 14:40:24.465444  1  4 StorageProvider::FileSystemDB::store() using generated oid=<326612e764504bc892e0cb7d>.
09-16 14:40:24.465462  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.465469  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.465482  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.465508  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/326612e764504bc892e0cb7d.json>.
09-16 14:40:24.465625  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "326612e764504bc892e0cb7d"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.465633  1  5 findChild() args  path=<document>
09-16 14:40:24.467436  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.468859  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "326612e764504bc892e0cb7d"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.468897  1  5 findChild() found child value=object(...)
09-16 14:40:24.470292  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "326612e764504bc892e0cb7d"
}
}
}>
09-16 14:40:24.470302  1  5 findChild() Find succeeded.
09-16 14:40:24.478477  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.478485  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.478529  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.479112  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.479122  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "326612e764504bc892e0cb7d"
        }
    }>.
09-16 14:40:24.479130  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<326612e764504bc892e0cb7d>.
09-16 14:40:24.480904  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:24.480915  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:24.480921  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<326612e764504bc892e0cb7d>.
09-16 14:40:24.480926  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:24.480952  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:24.480959  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<326612e764504bc892e0cb7d>.
09-16 14:40:24.480964  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:24.480994  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.481356  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.481447  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.481463  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.481473  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.481655  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.481664  1  5 findChild() args  path=<collection>
09-16 14:40:24.483502  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.484792  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.484808  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.484911  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.484919  1  5 findChild() Find succeeded.
09-16 14:40:24.485885  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.485895  1  5 findChild() args  path=<filter>
09-16 14:40:24.487796  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.489108  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.489119  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.489219  1 12 StorageProvider::FileSystemDB generate_oid=a3cb7270a5354bb982cc4eeb
09-16 14:40:24.490292  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.490302  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "a3cb7270a5354bb982cc4eeb"
    }
}>
09-16 14:40:24.490308  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.492209  1  4 insertChild() new child value=object(...)
09-16 14:40:24.492219  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.493535  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.493547  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.494753  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.494774  1  4 insertChild() found child value=object(...)
09-16 14:40:24.496129  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a3cb7270a5354bb982cc4eeb"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.496234  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a3cb7270a5354bb982cc4eeb"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.496242  1  4 insertChild() Insert succeeded.
09-16 14:40:24.496290  1  4 StorageProvider::FileSystemDB::store() using generated oid=<a3cb7270a5354bb982cc4eeb>.
09-16 14:40:24.496304  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.496310  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.496322  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.496346  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/a3cb7270a5354bb982cc4eeb.json>.
09-16 14:40:24.496393  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a3cb7270a5354bb982cc4eeb"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.496407  1  5 findChild() args  path=<document>
09-16 14:40:24.498434  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.499770  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a3cb7270a5354bb982cc4eeb"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.499807  1  5 findChild() found child value=object(...)
09-16 14:40:24.501207  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "a3cb7270a5354bb982cc4eeb"
}
}
}>
09-16 14:40:24.501216  1  5 findChild() Find succeeded.
09-16 14:40:24.509238  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.509245  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.509308  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.509965  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.509975  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "a3cb7270a5354bb982cc4eeb"
        }
    }>.
09-16 14:40:24.509984  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<a3cb7270a5354bb982cc4eeb>.
09-16 14:40:24.511778  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:24.511789  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:24.511794  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<a3cb7270a5354bb982cc4eeb>.
09-16 14:40:24.511800  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:24.511824  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:24.511831  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<a3cb7270a5354bb982cc4eeb>.
09-16 14:40:24.511836  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:24.511866  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.512257  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.512337  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.512352  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.512362  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.512545  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.512555  1  5 findChild() args  path=<collection>
09-16 14:40:24.514346  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.515672  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.515688  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.515790  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.515800  1  5 findChild() Find succeeded.
09-16 14:40:24.516800  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.516810  1  5 findChild() args  path=<filter>
09-16 14:40:24.518632  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.520009  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.520020  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.520116  1 12 StorageProvider::FileSystemDB generate_oid=e58bbc9d80924218b1215eb3
09-16 14:40:24.521160  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.521170  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "e58bbc9d80924218b1215eb3"
    }
}>
09-16 14:40:24.521176  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.523094  1  4 insertChild() new child value=object(...)
09-16 14:40:24.523104  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.524391  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.524407  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.525613  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.525634  1  4 insertChild() found child value=object(...)
09-16 14:40:24.527030  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "e58bbc9d80924218b1215eb3"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.527135  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "e58bbc9d80924218b1215eb3"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.527144  1  4 insertChild() Insert succeeded.
09-16 14:40:24.527191  1  4 StorageProvider::FileSystemDB::store() using generated oid=<e58bbc9d80924218b1215eb3>.
09-16 14:40:24.527204  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.527210  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.527222  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.527245  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/e58bbc9d80924218b1215eb3.json>.
09-16 14:40:24.527290  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "e58bbc9d80924218b1215eb3"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.527298  1  5 findChild() args  path=<document>
09-16 14:40:24.529055  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.530378  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "e58bbc9d80924218b1215eb3"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.530418  1  5 findChild() found child value=object(...)
09-16 14:40:24.531787  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "e58bbc9d80924218b1215eb3"
}
}
}>
09-16 14:40:24.531796  1  5 findChild() Find succeeded.
09-16 14:40:24.542101  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.542108  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.542156  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03"
]
}
}>
09-16 14:40:24.542839  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.542846  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "e58bbc9d80924218b1215eb3"
        }
    }>.
09-16 14:40:24.542852  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<e58bbc9d80924218b1215eb3>.
09-16 14:40:24.544581  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:24.544589  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:24.544592  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<e58bbc9d80924218b1215eb3>.
09-16 14:40:24.544596  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:24.544614  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:24.544618  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<e58bbc9d80924218b1215eb3>.
09-16 14:40:24.544621  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:24.544642  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.545049  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.545113  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.545124  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.545129  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.545253  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.545261  1  5 findChild() args  path=<collection>
09-16 14:40:24.547026  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.548365  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.548377  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.548450  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.548456  1  5 findChild() Find succeeded.
09-16 14:40:24.549447  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.549464  1  5 findChild() args  path=<filter>
09-16 14:40:24.551236  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.552546  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.552555  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.552628  1 12 StorageProvider::FileSystemDB generate_oid=4af80e19cf7c4f11af926170
09-16 14:40:24.553674  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.553682  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "4af80e19cf7c4f11af926170"
    }
}>
09-16 14:40:24.553686  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.555548  1  4 insertChild() new child value=object(...)
09-16 14:40:24.555555  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.557034  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.557044  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.558203  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.558219  1  4 insertChild() found child value=object(...)
09-16 14:40:24.559554  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4af80e19cf7c4f11af926170"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.559633  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4af80e19cf7c4f11af926170"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.559640  1  4 insertChild() Insert succeeded.
09-16 14:40:24.559683  1  4 StorageProvider::FileSystemDB::store() using generated oid=<4af80e19cf7c4f11af926170>.
09-16 14:40:24.559693  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.559697  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.559705  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.559720  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/4af80e19cf7c4f11af926170.json>.
09-16 14:40:24.559753  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4af80e19cf7c4f11af926170"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.559759  1  5 findChild() args  path=<document>
09-16 14:40:24.561493  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.562845  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4af80e19cf7c4f11af926170"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.562871  1  5 findChild() found child value=object(...)
09-16 14:40:24.564177  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "4af80e19cf7c4f11af926170"
}
}
}>
09-16 14:40:24.564184  1  5 findChild() Find succeeded.
09-16 14:40:24.572399  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.572405  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.572475  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.573207  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.573214  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "4af80e19cf7c4f11af926170"
        }
    }>.
09-16 14:40:24.573220  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<4af80e19cf7c4f11af926170>.
09-16 14:40:24.574886  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:24.574894  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:24.574897  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<4af80e19cf7c4f11af926170>.
09-16 14:40:24.574900  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:24.574928  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:24.574932  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<4af80e19cf7c4f11af926170>.
09-16 14:40:24.574935  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:24.574958  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.575424  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.575528  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.575540  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.575546  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.575670  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.575678  1  5 findChild() args  path=<collection>
09-16 14:40:24.577469  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.578823  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.578835  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.578905  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.578910  1  5 findChild() Find succeeded.
09-16 14:40:24.579905  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.579913  1  5 findChild() args  path=<filter>
09-16 14:40:24.581725  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.583006  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.583015  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.583088  1 12 StorageProvider::FileSystemDB generate_oid=181059a3a1e84eed855eb3b8
09-16 14:40:24.584130  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.584139  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "181059a3a1e84eed855eb3b8"
    }
}>
09-16 14:40:24.584142  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.586067  1  4 insertChild() new child value=object(...)
09-16 14:40:24.586074  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.587365  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.587376  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.588560  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.588575  1  4 insertChild() found child value=object(...)
09-16 14:40:24.589888  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "181059a3a1e84eed855eb3b8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.589957  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "181059a3a1e84eed855eb3b8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.644102  1  4 insertChild() Insert succeeded.
09-16 14:40:24.644211  1  4 StorageProvider::FileSystemDB::store() using generated oid=<181059a3a1e84eed855eb3b8>.
09-16 14:40:24.644232  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.644241  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.644256  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.644291  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/181059a3a1e84eed855eb3b8.json>.
09-16 14:40:24.644359  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "181059a3a1e84eed855eb3b8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.644369  1  5 findChild() args  path=<document>
09-16 14:40:24.647112  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.649838  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "181059a3a1e84eed855eb3b8"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.650039  1  5 findChild() found child value=object(...)
09-16 14:40:24.652495  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "181059a3a1e84eed855eb3b8"
}
}
}>
09-16 14:40:24.652656  1  5 findChild() Find succeeded.
09-16 14:40:24.666456  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.666503  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.666606  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.668513  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.668556  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 901
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "181059a3a1e84eed855eb3b8"
        }
    }>.
09-16 14:40:24.668738  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<181059a3a1e84eed855eb3b8>.
09-16 14:40:24.672299  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:24.672347  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:24.672370  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<181059a3a1e84eed855eb3b8>.
09-16 14:40:24.672390  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:24.672456  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:24.672481  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<181059a3a1e84eed855eb3b8>.
09-16 14:40:24.672502  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:24.672561  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.673536  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.673770  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.673825  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:24.673847  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{"_id" : { "$in" : [ { "$oid" : "a66f9e18f8c44ceba4cc2a03"},{ "$oid" : "4a28173c086d44cab0687be6"},{ "$oid" : "92b710ed20d1412fa1cde47c"},{ "$oid" : "3fbe9e3d19504b46aab36eca"},{ "$oid" : "a32e88f347e54e7dbc6f37e8"},{ "$oid" : "326612e764504bc892e0cb7d"},{ "$oid" : "a3cb7270a5354bb982cc4eeb"},{ "$oid" : "e58bbc9d80924218b1215eb3"},{ "$oid" : "4af80e19cf7c4f11af926170"},{ "$oid" : "181059a3a1e84eed855eb3b8"}]} }, "collection":"testFHICL_V001"}>
09-16 14:40:24.674107  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "a66f9e18f8c44ceba4cc2a03"
                }, 
                {
                    "$oid" : "4a28173c086d44cab0687be6"
                }, 
                {
                    "$oid" : "92b710ed20d1412fa1cde47c"
                }, 
                {
                    "$oid" : "3fbe9e3d19504b46aab36eca"
                }, 
                {
                    "$oid" : "a32e88f347e54e7dbc6f37e8"
                }, 
                {
                    "$oid" : "326612e764504bc892e0cb7d"
                }, 
                {
                    "$oid" : "a3cb7270a5354bb982cc4eeb"
                }, 
                {
                    "$oid" : "e58bbc9d80924218b1215eb3"
                }, 
                {
                    "$oid" : "4af80e19cf7c4f11af926170"
                }, 
                {
                    "$oid" : "181059a3a1e84eed855eb3b8"
                }
            ]
        }
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.674207  1  5 findChild() args  path=<collection>
09-16 14:40:24.675844  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.676941  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "a66f9e18f8c44ceba4cc2a03"
},
{
"$oid" : "4a28173c086d44cab0687be6"
},
{
"$oid" : "92b710ed20d1412fa1cde47c"
},
{
"$oid" : "3fbe9e3d19504b46aab36eca"
},
{
"$oid" : "a32e88f347e54e7dbc6f37e8"
},
{
"$oid" : "326612e764504bc892e0cb7d"
},
{
"$oid" : "a3cb7270a5354bb982cc4eeb"
},
{
"$oid" : "e58bbc9d80924218b1215eb3"
},
{
"$oid" : "4af80e19cf7c4f11af926170"
},
{
"$oid" : "181059a3a1e84eed855eb3b8"
}
]
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.677042  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.677175  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.677204  1  5 findChild() Find succeeded.
09-16 14:40:24.679667  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "a66f9e18f8c44ceba4cc2a03"
                }, 
                {
                    "$oid" : "4a28173c086d44cab0687be6"
                }, 
                {
                    "$oid" : "92b710ed20d1412fa1cde47c"
                }, 
                {
                    "$oid" : "3fbe9e3d19504b46aab36eca"
                }, 
                {
                    "$oid" : "a32e88f347e54e7dbc6f37e8"
                }, 
                {
                    "$oid" : "326612e764504bc892e0cb7d"
                }, 
                {
                    "$oid" : "a3cb7270a5354bb982cc4eeb"
                }, 
                {
                    "$oid" : "e58bbc9d80924218b1215eb3"
                }, 
                {
                    "$oid" : "4af80e19cf7c4f11af926170"
                }, 
                {
                    "$oid" : "181059a3a1e84eed855eb3b8"
                }
            ]
        }
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.679769  1  5 findChild() args  path=<filter>
09-16 14:40:24.681405  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.682490  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "a66f9e18f8c44ceba4cc2a03"
},
{
"$oid" : "4a28173c086d44cab0687be6"
},
{
"$oid" : "92b710ed20d1412fa1cde47c"
},
{
"$oid" : "3fbe9e3d19504b46aab36eca"
},
{
"$oid" : "a32e88f347e54e7dbc6f37e8"
},
{
"$oid" : "326612e764504bc892e0cb7d"
},
{
"$oid" : "a3cb7270a5354bb982cc4eeb"
},
{
"$oid" : "e58bbc9d80924218b1215eb3"
},
{
"$oid" : "4af80e19cf7c4f11af926170"
},
{
"$oid" : "181059a3a1e84eed855eb3b8"
}
]
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.682598  1  5 findChild() found child value=object(...)
09-16 14:40:24.683635  1  5 findChild() resultDocument=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "a66f9e18f8c44ceba4cc2a03"
},
{
"$oid" : "4a28173c086d44cab0687be6"
},
{
"$oid" : "92b710ed20d1412fa1cde47c"
},
{
"$oid" : "3fbe9e3d19504b46aab36eca"
},
{
"$oid" : "a32e88f347e54e7dbc6f37e8"
},
{
"$oid" : "326612e764504bc892e0cb7d"
},
{
"$oid" : "a3cb7270a5354bb982cc4eeb"
},
{
"$oid" : "e58bbc9d80924218b1215eb3"
},
{
"$oid" : "4af80e19cf7c4f11af926170"
},
{
"$oid" : "181059a3a1e84eed855eb3b8"
}
]
}
}
}>
09-16 14:40:24.683719  1  5 findChild() Find succeeded.
09-16 14:40:24.691472  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.691526  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.691570  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.691637  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.691662  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.691763  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.693843  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:24.693873  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "_id" : {
            "$in" : [
                {
                    "$oid" : "a66f9e18f8c44ceba4cc2a03"
                }, 
                {
                    "$oid" : "4a28173c086d44cab0687be6"
                }, 
                {
                    "$oid" : "92b710ed20d1412fa1cde47c"
                }, 
                {
                    "$oid" : "3fbe9e3d19504b46aab36eca"
                }, 
                {
                    "$oid" : "a32e88f347e54e7dbc6f37e8"
                }, 
                {
                    "$oid" : "326612e764504bc892e0cb7d"
                }, 
                {
                    "$oid" : "a3cb7270a5354bb982cc4eeb"
                }, 
                {
                    "$oid" : "e58bbc9d80924218b1215eb3"
                }, 
                {
                    "$oid" : "4af80e19cf7c4f11af926170"
                }, 
                {
                    "$oid" : "181059a3a1e84eed855eb3b8"
                }
            ]
        }
    }>.
09-16 14:40:24.695337  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:24.696327  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() begin
09-16 14:40:24.696356  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() args objectid=<{
"$in" : [
{
"$oid" : "a66f9e18f8c44ceba4cc2a03"
},
{
"$oid" : "4a28173c086d44cab0687be6"
},
{
"$oid" : "92b710ed20d1412fa1cde47c"
},
{
"$oid" : "3fbe9e3d19504b46aab36eca"
},
{
"$oid" : "a32e88f347e54e7dbc6f37e8"
},
{
"$oid" : "326612e764504bc892e0cb7d"
},
{
"$oid" : "a3cb7270a5354bb982cc4eeb"
},
{
"$oid" : "e58bbc9d80924218b1215eb3"
},
{
"$oid" : "4af80e19cf7c4f11af926170"
},
{
"$oid" : "181059a3a1e84eed855eb3b8"
}
]
}>.
09-16 14:40:24.697767  1  5 StorageProvider::FileSystemDB::index::_matchObjectIds() found 10 ouids.
09-16 14:40:24.697874  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<a66f9e18f8c44ceba4cc2a03>.
09-16 14:40:24.697913  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<4a28173c086d44cab0687be6>.
09-16 14:40:24.697939  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<92b710ed20d1412fa1cde47c>.
09-16 14:40:24.697965  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<3fbe9e3d19504b46aab36eca>.
09-16 14:40:24.697986  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<a32e88f347e54e7dbc6f37e8>.
09-16 14:40:24.698007  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<326612e764504bc892e0cb7d>.
09-16 14:40:24.698028  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<a3cb7270a5354bb982cc4eeb>.
09-16 14:40:24.698049  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<e58bbc9d80924218b1215eb3>.
09-16 14:40:24.698069  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<4af80e19cf7c4f11af926170>.
09-16 14:40:24.698092  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<181059a3a1e84eed855eb3b8>.
09-16 14:40:24.698111  1 15 StorageProvider::FileSystemDB::index::_matchObjectIds() Found 10 documents
09-16 14:40:24.698341  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() criteria_count=0, max_count=1, found 10 documents.
09-16 14:40:24.698394  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() returning 10 documents.
09-16 14:40:24.698445  1  3 StorageProvider::FileSystemDB::load() search returned 10 documents.
09-16 14:40:24.698597  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/181059a3a1e84eed855eb3b8.json>.
09-16 14:40:24.698868  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/326612e764504bc892e0cb7d.json>.
09-16 14:40:24.699074  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/3fbe9e3d19504b46aab36eca.json>.
09-16 14:40:24.699278  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/4a28173c086d44cab0687be6.json>.
09-16 14:40:24.699489  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/4af80e19cf7c4f11af926170.json>.
09-16 14:40:24.699702  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/92b710ed20d1412fa1cde47c.json>.
09-16 14:40:24.699924  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/a32e88f347e54e7dbc6f37e8.json>.
09-16 14:40:24.700139  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/a3cb7270a5354bb982cc4eeb.json>.
09-16 14:40:24.700352  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/a66f9e18f8c44ceba4cc2a03.json>.
09-16 14:40:24.700578  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/e58bbc9d80924218b1215eb3.json>.
09-16 14:40:24.700782  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.701852  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.702077  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ { "$oid" : "a66f9e18f8c44ceba4cc2a03"},{ "$oid" : "4a28173c086d44cab0687be6"},{ "$oid" : "92b710ed20d1412fa1cde47c"},{ "$oid" : "3fbe9e3d19504b46aab36eca"},{ "$oid" : "a32e88f347e54e7dbc6f37e8"},{ "$oid" : "326612e764504bc892e0cb7d"},{ "$oid" : "a3cb7270a5354bb982cc4eeb"},{ "$oid" : "e58bbc9d80924218b1215eb3"},{ "$oid" : "4af80e19cf7c4f11af926170"},{ "$oid" : "181059a3a1e84eed855eb3b8"}]} }, "collection":"testFHICL_V001"}
<end of output>
Test time =   1.05 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_search2_004_t" end time: Sep 16 14:40 CDT
"FileSystemFhicl_search2_004_t" time elapsed: 00:00:01
----------------------------------------------------------

36/65 Testing: Convert_GUIJson2DBJson_006_t
36/65 Test: Convert_GUIJson2DBJson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test006.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test006.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test006.src.json" "-c" "test006.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_006_t.d
"Convert_GUIJson2DBJson_006_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:24.659176  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:24.664910  1 14 json_gui_to_db() begin
09-16 14:40:24.721806  1 14 json_gui_to_db() read guiAST
09-16 14:40:24.721950  1 14 json_gui_to_db() created dbAST
09-16 14:40:24.722031  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.722070  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.722089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.722127  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722207  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.722242  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:40:24.722263  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722313  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722353  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722362  1 16 json_node_t() makeChild() node_name=<prolog>
09-16 14:40:24.722366  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722373  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.722379  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.722383  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.722387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.722391  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722403  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.722421  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_0, value=std::string(metrics.fcl)
09-16 14:40:24.722427  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_0>
09-16 14:40:24.722432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722463  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722480  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722488  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.722493  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:24.722497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722513  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722534  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:24.722539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722545  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.722550  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.722554  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.722558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.722563  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722569  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.722575  1 15 json_gui_to_db() operator() switch ARRAY child name= metrics, value=std::string(@local::metrics)
09-16 14:40:24.722579  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:24.722584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722620  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722626  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.722652  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(262144)
09-16 14:40:24.722658  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:24.722662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722670  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722679  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722692  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722698  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722704  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.722709  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:24.722713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722743  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722750  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:24.722754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722761  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.722766  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.722770  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.722773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.722778  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722784  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.722790  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:24.722795  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:24.722799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722822  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722834  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722841  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.722846  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(24000)
09-16 14:40:24.722851  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:40:24.722855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722890  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722896  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.722902  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(-1)
09-16 14:40:24.722907  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:40:24.722911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722934  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722941  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722946  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.722953  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.722958  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(-1)
09-16 14:40:24.722963  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:40:24.722967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722990  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.722996  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723002  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723008  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.723014  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(SSP)
09-16 14:40:24.723019  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:40:24.723023  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723045  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723051  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723057  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723063  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.723069  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(SSP)
09-16 14:40:24.723074  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:40:24.723078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723093  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723112  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723118  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723124  1 15 json_gui_to_db() operator() switch ARRAY child name= interface_type, value=int(1)
09-16 14:40:24.723129  1 16 json_node_t() makeChild() node_name=<interface_type>
09-16 14:40:24.723133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723155  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723167  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723173  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723179  1 15 json_gui_to_db() operator() switch ARRAY child name= verbosity, value=int(3)
09-16 14:40:24.723183  1 16 json_node_t() makeChild() node_name=<verbosity>
09-16 14:40:24.723188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723223  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723229  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.723234  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:40:24.723238  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723246  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723275  1 16 json_node_t() makeChild() node_name=<DAQConfig>
09-16 14:40:24.723279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723286  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.723291  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.723295  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.723299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.723304  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723310  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723316  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceLength, value=int(10000000)
09-16 14:40:24.723321  1 16 json_node_t() makeChild() node_name=<MillisliceLength>
09-16 14:40:24.723325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723333  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723341  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723355  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723360  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723367  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723372  1 15 json_gui_to_db() operator() switch ARRAY child name= MillisliceOverlap, value=int(1000000)
09-16 14:40:24.723377  1 16 json_node_t() makeChild() node_name=<MillisliceOverlap>
09-16 14:40:24.723381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723389  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723420  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723426  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723432  1 15 json_gui_to_db() operator() switch ARRAY child name= UseExternalTimestamp, value=int(1)
09-16 14:40:24.723437  1 16 json_node_t() makeChild() node_name=<UseExternalTimestamp>
09-16 14:40:24.723441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723475  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723482  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723488  1 15 json_gui_to_db() operator() switch ARRAY child name= StartOnNOvASync, value=int(1)
09-16 14:40:24.723493  1 16 json_node_t() makeChild() node_name=<StartOnNOvASync>
09-16 14:40:24.723497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723531  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723538  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723543  1 15 json_gui_to_db() operator() switch ARRAY child name= EmptyWriteDelay, value=int(1000000)
09-16 14:40:24.723548  1 16 json_node_t() makeChild() node_name=<EmptyWriteDelay>
09-16 14:40:24.723552  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723560  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723586  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723592  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723598  1 15 json_gui_to_db() operator() switch ARRAY child name= HardwareClockRate, value=int(64)
09-16 14:40:24.723603  1 16 json_node_t() makeChild() node_name=<HardwareClockRate>
09-16 14:40:24.723607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723622  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723647  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723653  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.723658  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:40:24.723663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723670  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723700  1 16 json_node_t() makeChild() node_name=<HardwareConfig>
09-16 14:40:24.723704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723711  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.723716  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.723720  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.723723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.723728  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723734  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723740  1 15 json_gui_to_db() operator() switch ARRAY child name= eventDataInterfaceSelect, value=int(1)
09-16 14:40:24.723745  1 16 json_node_t() makeChild() node_name=<eventDataInterfaceSelect>
09-16 14:40:24.723749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723766  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723785  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723792  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.723797  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:40:24.723801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723809  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723838  1 16 json_node_t() makeChild() node_name=<ChannelControl>
09-16 14:40:24.723842  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723849  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.723854  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.723858  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.723861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.723866  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723872  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723878  1 15 json_gui_to_db() operator() switch ARRAY child name= ExtTriggerMode, value=int(1)
09-16 14:40:24.723883  1 16 json_node_t() makeChild() node_name=<ExtTriggerMode>
09-16 14:40:24.723887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723922  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723928  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723934  1 15 json_gui_to_db() operator() switch ARRAY child name= LEDTrigger, value=int(0)
09-16 14:40:24.723939  1 16 json_node_t() makeChild() node_name=<LEDTrigger>
09-16 14:40:24.723943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723971  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.723977  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.723983  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.723988  1 15 json_gui_to_db() operator() switch ARRAY child name= TimestampRate, value=int(7)
09-16 14:40:24.723993  1 16 json_node_t() makeChild() node_name=<TimestampRate>
09-16 14:40:24.723997  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724032  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724038  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724044  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_channel_control, value=int(1)
09-16 14:40:24.724049  1 16 json_node_t() makeChild() node_name=<ALL_channel_control>
09-16 14:40:24.724053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724088  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724094  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724100  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_led_threshold, value=int(100)
09-16 14:40:24.724104  1 16 json_node_t() makeChild() node_name=<ALL_led_threshold>
09-16 14:40:24.724109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724143  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724149  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724155  1 15 json_gui_to_db() operator() switch ARRAY child name= trigger_input_delay, value=int(55)
09-16 14:40:24.724159  1 16 json_node_t() makeChild() node_name=<trigger_input_delay>
09-16 14:40:24.724163  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724198  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724204  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724209  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_clock_control, value=int(19)
09-16 14:40:24.724214  1 16 json_node_t() makeChild() node_name=<dsp_clock_control>
09-16 14:40:24.724218  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724233  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724252  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724258  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724264  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_window, value=int(700)
09-16 14:40:24.724268  1 16 json_node_t() makeChild() node_name=<ALL_readout_window>
09-16 14:40:24.724273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724280  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724307  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724313  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724318  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_readout_pretrigger, value=int(50)
09-16 14:40:24.724323  1 16 json_node_t() makeChild() node_name=<ALL_readout_pretrigger>
09-16 14:40:24.724327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724362  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724369  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724374  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_cfd_parameters, value=int(6144)
09-16 14:40:24.724379  1 16 json_node_t() makeChild() node_name=<ALL_cfd_parameters>
09-16 14:40:24.724383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724430  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724437  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724443  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_p_window, value=int(32)
09-16 14:40:24.724448  1 16 json_node_t() makeChild() node_name=<ALL_p_window>
09-16 14:40:24.724452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724476  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724488  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724494  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724500  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i2_window, value=int(500)
09-16 14:40:24.724504  1 16 json_node_t() makeChild() node_name=<ALL_i2_window>
09-16 14:40:24.724509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724543  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724549  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724555  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m1_window, value=int(10)
09-16 14:40:24.724559  1 16 json_node_t() makeChild() node_name=<ALL_m1_window>
09-16 14:40:24.724564  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724579  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724598  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724604  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724610  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_m2_window, value=int(10)
09-16 14:40:24.724614  1 16 json_node_t() makeChild() node_name=<ALL_m2_window>
09-16 14:40:24.724619  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724653  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724660  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724665  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_d_window, value=int(20)
09-16 14:40:24.724670  1 16 json_node_t() makeChild() node_name=<ALL_d_window>
09-16 14:40:24.724674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724709  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724715  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724721  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_i1_window, value=int(500)
09-16 14:40:24.724725  1 16 json_node_t() makeChild() node_name=<ALL_i1_window>
09-16 14:40:24.724729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724764  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724770  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724776  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_disc_width, value=int(10)
09-16 14:40:24.724780  1 16 json_node_t() makeChild() node_name=<ALL_disc_width>
09-16 14:40:24.724784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724819  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724825  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724831  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_baseline_start, value=int(0)
09-16 14:40:24.724835  1 16 json_node_t() makeChild() node_name=<ALL_baseline_start>
09-16 14:40:24.724839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724874  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724880  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724886  1 15 json_gui_to_db() operator() switch ARRAY child name= ALL_bias_config, value=int(265488)
09-16 14:40:24.724890  1 16 json_node_t() makeChild() node_name=<ALL_bias_config>
09-16 14:40:24.724895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724930  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724936  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724941  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_control, value=int(7)
09-16 14:40:24.724946  1 16 json_node_t() makeChild() node_name=<c2c_control>
09-16 14:40:24.724950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724958  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724973  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724979  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.724984  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.724991  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.724996  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_master_intr_control, value=int(0)
09-16 14:40:24.725001  1 16 json_node_t() makeChild() node_name=<c2c_master_intr_control>
09-16 14:40:24.725005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725039  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725046  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725051  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_clock_control, value=int(1)
09-16 14:40:24.725056  1 16 json_node_t() makeChild() node_name=<comm_clock_control>
09-16 14:40:24.725060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725068  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725089  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725094  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725101  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725106  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_config, value=int(0)
09-16 14:40:24.725111  1 16 json_node_t() makeChild() node_name=<comm_led_config>
09-16 14:40:24.725115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725143  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725149  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725155  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725161  1 15 json_gui_to_db() operator() switch ARRAY child name= comm_led_input, value=int(0)
09-16 14:40:24.725165  1 16 json_node_t() makeChild() node_name=<comm_led_input>
09-16 14:40:24.725170  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725185  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725207  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725214  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725220  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_config, value=int(0)
09-16 14:40:24.725224  1 16 json_node_t() makeChild() node_name=<qi_dac_config>
09-16 14:40:24.725228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725263  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725269  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725275  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_dac_control, value=int(1)
09-16 14:40:24.725279  1 16 json_node_t() makeChild() node_name=<qi_dac_control>
09-16 14:40:24.725284  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725318  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725324  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725330  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_config, value=int(1241088)
09-16 14:40:24.725335  1 16 json_node_t() makeChild() node_name=<mon_config>
09-16 14:40:24.725339  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725367  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725373  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725379  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725385  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_select, value=int(16776960)
09-16 14:40:24.725390  1 16 json_node_t() makeChild() node_name=<mon_select>
09-16 14:40:24.725394  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725405  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725420  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725432  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725439  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725444  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_gpio, value=int(0)
09-16 14:40:24.725449  1 16 json_node_t() makeChild() node_name=<mon_gpio>
09-16 14:40:24.725453  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725468  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725487  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725494  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725500  1 15 json_gui_to_db() operator() switch ARRAY child name= mon_control, value=int(65537)
09-16 14:40:24.725505  1 16 json_node_t() makeChild() node_name=<mon_control>
09-16 14:40:24.725509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725543  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725549  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725555  1 15 json_gui_to_db() operator() switch ARRAY child name= c2c_slave_intr_control, value=int(0)
09-16 14:40:24.725560  1 16 json_node_t() makeChild() node_name=<c2c_slave_intr_control>
09-16 14:40:24.725564  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725571  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725579  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725598  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725604  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725610  1 15 json_gui_to_db() operator() switch ARRAY child name= gpio_output_width, value=int(4096)
09-16 14:40:24.725614  1 16 json_node_t() makeChild() node_name=<gpio_output_width>
09-16 14:40:24.725618  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725653  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725659  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725664  1 15 json_gui_to_db() operator() switch ARRAY child name= front_panel_config, value=int(4369)
09-16 14:40:24.725669  1 16 json_node_t() makeChild() node_name=<front_panel_config>
09-16 14:40:24.725673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725707  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725714  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725719  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_config, value=int(0)
09-16 14:40:24.725724  1 16 json_node_t() makeChild() node_name=<dsp_led_config>
09-16 14:40:24.725728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725736  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725743  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725751  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725762  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725769  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725775  1 15 json_gui_to_db() operator() switch ARRAY child name= dsp_led_input, value=int(0)
09-16 14:40:24.725780  1 16 json_node_t() makeChild() node_name=<dsp_led_input>
09-16 14:40:24.725784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725806  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725818  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725825  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725830  1 15 json_gui_to_db() operator() switch ARRAY child name= baseline_delay, value=int(5)
09-16 14:40:24.725835  1 16 json_node_t() makeChild() node_name=<baseline_delay>
09-16 14:40:24.725839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725847  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725854  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725861  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725868  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725873  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725879  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725885  1 15 json_gui_to_db() operator() switch ARRAY child name= diag_channel_input, value=int(0)
09-16 14:40:24.725890  1 16 json_node_t() makeChild() node_name=<diag_channel_input>
09-16 14:40:24.725894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725909  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725928  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725934  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725940  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_config, value=int(268377856)
09-16 14:40:24.725945  1 16 json_node_t() makeChild() node_name=<qi_config>
09-16 14:40:24.725949  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725971  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725977  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.725983  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.725990  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.725995  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_delay, value=int(0)
09-16 14:40:24.726000  1 16 json_node_t() makeChild() node_name=<qi_delay>
09-16 14:40:24.726004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726038  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726045  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.726050  1 15 json_gui_to_db() operator() switch ARRAY child name= qi_pulse_width, value=int(0)
09-16 14:40:24.726056  1 16 json_node_t() makeChild() node_name=<qi_pulse_width>
09-16 14:40:24.726060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726089  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726094  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726100  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.726106  1 15 json_gui_to_db() operator() switch ARRAY child name= external_gate_width, value=int(32768)
09-16 14:40:24.726111  1 16 json_node_t() makeChild() node_name=<external_gate_width>
09-16 14:40:24.726115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726143  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726151  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726158  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.726164  1 15 json_gui_to_db() operator() switch ARRAY child name= daq, value=std::string(@local::ssp_standard)
09-16 14:40:24.726168  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:24.726173  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726180  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726207  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726214  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.726219  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_1, value=std::string(ssp_expert_run_options.fcl)
09-16 14:40:24.726224  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_1>
09-16 14:40:24.726228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726236  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726257  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726263  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726269  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.726274  1 15 json_gui_to_db() operator() switch ARRAY child name= fhicl_pound_include_2, value=std::string(user_run_options.fcl)
09-16 14:40:24.726279  1 16 json_node_t() makeChild() node_name=<fhicl_pound_include_2>
09-16 14:40:24.726283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726318  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726328  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.726334  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp_standard, value=std::string(@local::daq)
09-16 14:40:24.726339  1 16 json_node_t() makeChild() node_name=<ssp_standard>
09-16 14:40:24.726343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726366  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726378  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726385  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.726391  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.726398  1 16 json_node_t() makeChild() node_name=<ssp01_standard>
09-16 14:40:24.726405  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726417  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726433  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726440  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726445  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726452  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.726458  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.fragment_id, value=int(0)
09-16 14:40:24.726463  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.fragment_id>
09-16 14:40:24.726467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726502  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726509  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.726514  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_id, value=int(0)
09-16 14:40:24.726519  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_id>
09-16 14:40:24.726523  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726539  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726552  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726558  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726564  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.726570  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.board_ip, value=std::string(192.168.1.109)
09-16 14:40:24.726575  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.board_ip>
09-16 14:40:24.726579  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726613  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726620  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.726626  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp01_standard.fragment_receiver.HardwareConfig.module_id, value=int(1)
09-16 14:40:24.726631  1 16 json_node_t() makeChild() node_name=<ssp01_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.726635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726643  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726651  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726670  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726676  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.726682  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.726687  1 16 json_node_t() makeChild() node_name=<ssp02_standard>
09-16 14:40:24.726691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726706  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726725  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726732  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.726737  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.fragment_id, value=int(1)
09-16 14:40:24.726742  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.fragment_id>
09-16 14:40:24.726746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726769  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726781  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726787  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.726793  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_id, value=int(1)
09-16 14:40:24.726798  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_id>
09-16 14:40:24.726802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726836  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.726842  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.726848  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.board_ip, value=std::string(192.168.1.117)
09-16 14:40:24.726853  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.board_ip>
09-16 14:40:24.726857  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804138  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804167  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.804182  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp02_standard.fragment_receiver.HardwareConfig.module_id, value=int(2)
09-16 14:40:24.804194  1 16 json_node_t() makeChild() node_name=<ssp02_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.804204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804278  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804290  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.804301  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.804309  1 16 json_node_t() makeChild() node_name=<ssp03_standard>
09-16 14:40:24.804316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804329  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804342  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804364  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804374  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804384  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.804394  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.fragment_id, value=int(2)
09-16 14:40:24.804418  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.fragment_id>
09-16 14:40:24.804427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804486  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804496  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804507  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.804517  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_id, value=int(2)
09-16 14:40:24.804525  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_id>
09-16 14:40:24.804531  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804558  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804590  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804601  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.804611  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.board_ip, value=std::string(192.168.1.113)
09-16 14:40:24.804620  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.board_ip>
09-16 14:40:24.804626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804665  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804684  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804695  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.804704  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp03_standard.fragment_receiver.HardwareConfig.module_id, value=int(3)
09-16 14:40:24.804713  1 16 json_node_t() makeChild() node_name=<ssp03_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.804719  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804776  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804787  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.804796  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.804804  1 16 json_node_t() makeChild() node_name=<ssp04_standard>
09-16 14:40:24.804811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804823  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804835  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804871  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804881  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804892  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.804901  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.fragment_id, value=int(3)
09-16 14:40:24.804910  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.fragment_id>
09-16 14:40:24.804917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804930  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804976  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.804985  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.804996  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.805005  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_id, value=int(3)
09-16 14:40:24.805014  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_id>
09-16 14:40:24.805021  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805078  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805089  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.805098  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.board_ip, value=std::string(192.168.1.110)
09-16 14:40:24.805107  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.board_ip>
09-16 14:40:24.805113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805138  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805150  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805169  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805180  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.805189  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp04_standard.fragment_receiver.HardwareConfig.module_id, value=int(4)
09-16 14:40:24.805198  1 16 json_node_t() makeChild() node_name=<ssp04_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.805204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805262  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805273  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.805283  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.805291  1 16 json_node_t() makeChild() node_name=<ssp05_standard>
09-16 14:40:24.805298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805355  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805366  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.805376  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.fragment_id, value=int(4)
09-16 14:40:24.805384  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.fragment_id>
09-16 14:40:24.805391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805434  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805454  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805465  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.805475  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_id, value=int(4)
09-16 14:40:24.805483  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_id>
09-16 14:40:24.805490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805547  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805558  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.805567  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.board_ip, value=std::string(192.168.1.114)
09-16 14:40:24.805575  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.board_ip>
09-16 14:40:24.805582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805619  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805630  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805639  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805649  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.805659  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp05_standard.fragment_receiver.HardwareConfig.module_id, value=int(5)
09-16 14:40:24.805667  1 16 json_node_t() makeChild() node_name=<ssp05_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.805674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805686  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805730  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805741  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.805751  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.805759  1 16 json_node_t() makeChild() node_name=<ssp06_standard>
09-16 14:40:24.805765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805803  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805823  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805833  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.805842  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.fragment_id, value=int(5)
09-16 14:40:24.805851  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.fragment_id>
09-16 14:40:24.805859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805899  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805909  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805919  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.805930  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.805939  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_id, value=int(5)
09-16 14:40:24.805948  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_id>
09-16 14:40:24.805955  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805967  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.805993  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806003  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806012  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806022  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.806032  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.board_ip, value=std::string(192.168.1.106)
09-16 14:40:24.806041  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.board_ip>
09-16 14:40:24.806047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806105  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806115  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.806125  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp06_standard.fragment_receiver.HardwareConfig.module_id, value=int(6)
09-16 14:40:24.806133  1 16 json_node_t() makeChild() node_name=<ssp06_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.806140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806187  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806196  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806207  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.806216  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.806224  1 16 json_node_t() makeChild() node_name=<ssp07_standard>
09-16 14:40:24.806231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806243  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806256  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806287  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806298  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.806308  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.fragment_id, value=int(6)
09-16 14:40:24.806316  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.fragment_id>
09-16 14:40:24.806322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806391  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806416  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.806439  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_id, value=int(6)
09-16 14:40:24.806458  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_id>
09-16 14:40:24.806466  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806537  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806550  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.806561  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:40:24.806571  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.board_ip>
09-16 14:40:24.806580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806595  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806647  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806660  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.806671  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp07_standard.fragment_receiver.HardwareConfig.module_id, value=int(7)
09-16 14:40:24.806681  1 16 json_node_t() makeChild() node_name=<ssp07_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.806690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806758  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806771  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.806782  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard, value=std::string(@local::ssp_standard)
09-16 14:40:24.806792  1 16 json_node_t() makeChild() node_name=<ssp08_standard>
09-16 14:40:24.806801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806857  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806868  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.806881  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.806902  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.fragment_id, value=int(7)
09-16 14:40:24.806912  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.fragment_id>
09-16 14:40:24.806921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806946  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.806997  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.807011  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.807022  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_id, value=int(7)
09-16 14:40:24.807032  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_id>
09-16 14:40:24.807041  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807070  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807108  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.807121  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.807132  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.board_ip, value=std::string(192.168.1.105)
09-16 14:40:24.807142  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.board_ip>
09-16 14:40:24.807151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807181  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807195  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807208  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807219  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.807232  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.807243  1 15 json_gui_to_db() operator() switch ARRAY child name= ssp08_standard.fragment_receiver.HardwareConfig.module_id, value=int(8)
09-16 14:40:24.807253  1 16 json_node_t() makeChild() node_name=<ssp08_standard.fragment_receiver.HardwareConfig.module_id>
09-16 14:40:24.807262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807277  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807330  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.807343  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.807353  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:40:24.807363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807378  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807394  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807410  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807441  1 16 json_node_t() makeChild() node_name=<main>
09-16 14:40:24.807450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.807462  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.807474  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.807484  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.807492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.807526  1 14 json_gui_to_db() Found changelog in guiAST <empty>
09-16 14:40:24.807646  1 14 json_gui_to_db() created db_node
09-16 14:40:24.824587  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.22 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_006_t" end time: Sep 16 14:40 CDT
"Convert_GUIJson2DBJson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

40/65 Testing: RoundConvert_GUIJson2DBJson_001_t
40/65 Test: RoundConvert_GUIJson2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_001_t.d
"RoundConvert_GUIJson2DBJson_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:24.659180  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:24.661678  1 14 json_gui_to_db() begin
09-16 14:40:24.691257  1 14 json_gui_to_db() read guiAST
09-16 14:40:24.691472  1 14 json_gui_to_db() created dbAST
09-16 14:40:24.691586  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.691640  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.691668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.691720  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.691830  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.691876  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:24.691906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.691944  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.691978  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692049  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:24.692056  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692067  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.692075  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.692082  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.692087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.692095  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692106  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.692114  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:24.692120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692146  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692170  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692181  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:24.692188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692198  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.692206  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.692212  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.692218  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.692225  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692236  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.692274  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:40:24.692284  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:40:24.692291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692304  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692318  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692341  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692366  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692379  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.692389  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:40:24.692401  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:40:24.692409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692469  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692480  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.692489  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:40:24.692497  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:40:24.692503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692542  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692552  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692561  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692571  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.692580  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:24.692588  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:24.692594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692643  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692652  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692662  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:24.692675  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:40:24.692683  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:40:24.692690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692715  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692746  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692756  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:24.692764  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:40:24.692772  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:40:24.692779  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692835  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692845  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:24.692853  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:40:24.692860  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:40:24.692867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692905  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692933  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.692944  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.692954  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:24.692962  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:24.692969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692981  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.692994  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693024  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693034  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.693042  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:24.693049  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693085  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693110  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:24.693117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693127  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.693134  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.693140  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.693146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.693153  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693164  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.693172  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:40:24.693179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693204  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693215  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693228  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693238  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:40:24.693245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693255  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.693262  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.693268  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.693274  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.693281  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693291  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.693316  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:40:24.693325  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:40:24.693332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693392  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693407  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.693417  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:40:24.693425  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:40:24.693432  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693491  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693502  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.693511  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:40:24.693519  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:40:24.693526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693563  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693573  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693582  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693592  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:24.693600  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:40:24.693608  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:40:24.693614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693627  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693639  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693672  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693682  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.693690  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:24.693697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693745  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693756  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:24.693763  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693773  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.693780  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.693786  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.693792  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.693799  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693809  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.693817  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:40:24.693824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693849  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693884  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:40:24.693891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693900  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.693908  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.693914  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.693920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.693927  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.693937  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.693945  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:24.693952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693977  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.693988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694001  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694011  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:24.694018  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694027  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.694035  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.694041  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.694046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.694053  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.694063  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.694074  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:24.694080  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694118  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:24.694126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694406  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.694416  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.694422  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.694428  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.694436  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:40:24.694456  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.694486  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:40:24.694494  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.694505  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.694516  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.694526  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:40:24.694534  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:24.694540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694602  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.694614  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.694622  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:24.694629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694691  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:24.694698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694708  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.694715  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.694723  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.694728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.694736  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.694747  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.694755  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:24.694762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694827  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:24.694834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694844  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.694852  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.694858  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.694863  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.694872  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.694883  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.694890  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:24.694897  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694908  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694957  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:24.694965  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.694975  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.694983  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.694989  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.694995  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.695002  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695013  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.695021  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:24.695028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695040  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695076  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695089  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:24.695095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695105  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.695113  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.695119  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.695125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.695132  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695142  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.695151  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:24.695159  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:24.695165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695202  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695221  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695232  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.695241  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:40:24.695249  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:24.695255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695312  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695322  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.695330  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:24.695336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695348  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695362  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695401  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:24.695409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695420  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.695427  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.695433  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.695439  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.695446  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695457  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.695466  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:24.695474  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:24.695481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695493  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695538  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695548  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.695558  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:40:24.695566  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:24.695572  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695632  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695641  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.695651  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:40:24.695657  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695671  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:40:24.695678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695703  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695746  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.695754  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.695760  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.695765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.695773  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:40:24.695780  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.695791  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695801  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.695811  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:24.695818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695833  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:24.695840  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695905  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.695912  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.695919  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.695924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.695933  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.695944  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.695953  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:24.695960  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695975  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:24.695982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.695996  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696036  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696046  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.696054  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.696060  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.696066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.696075  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:24.696082  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.696092  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.696102  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.696112  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:24.696118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696132  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:24.696139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696164  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696203  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.696211  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.696217  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.696222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.696230  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:24.696237  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.696247  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.696258  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.696266  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:24.696273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696285  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696309  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696334  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:24.696341  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696351  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.696359  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.696365  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.696370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.696381  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.696392  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.696406  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:40:24.696415  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:40:24.696421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696434  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696458  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696478  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.696489  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.696497  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:24.696504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696529  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696564  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:24.696570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696581  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.696589  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.696595  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.696601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.696608  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.696619  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.696627  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:24.696634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696646  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696670  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696693  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:24.696699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696709  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.696716  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.696722  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.696728  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.696735  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.696746  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.696756  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:40:24.696763  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:40:24.696770  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696826  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.696837  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.696846  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:40:24.696853  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:40:24.696860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696872  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696916  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.696927  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.696936  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:24.696944  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:24.696950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696962  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696999  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697011  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.697023  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.697032  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:40:24.697040  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:24.697047  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697060  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697107  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.697119  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.697129  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:40:24.697138  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:40:24.697144  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697197  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697209  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.697223  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.697232  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:24.697240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697296  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697308  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:24.697315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697327  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.697335  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.697342  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.697347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.697356  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.697368  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:24.697378  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:40:24.697386  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:40:24.697393  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697434  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697470  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.697487  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.697499  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:40:24.697507  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:40:24.697515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697544  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697580  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.697593  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.697601  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:24.697607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697674  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:24.697681  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697694  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.697702  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.697709  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.697715  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.697723  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.697738  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.697749  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:40:24.697757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697778  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:40:24.697786  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.697872  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.697881  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.697889  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.697895  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.697917  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:24.697943  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.697958  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:24.697965  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.697974  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:24.697980  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.697989  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:24.697995  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.698004  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:24.698011  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.698019  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:24.698026  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.698037  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.698048  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.698058  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:40:24.698065  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:24.698072  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698132  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.698143  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:24.698151  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:40:24.698159  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:40:24.698165  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698189  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698201  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698221  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.698231  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.698241  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:40:24.698249  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:40:24.698255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.698332  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:40:24.698462  1 14 json_gui_to_db() created db_node
09-16 14:40:24.711315  1 14 json_gui_to_db() created db_json
09-16 14:40:24.711487  1 10 json_db_to_gui() begin
09-16 14:40:24.726664  1 10 json_db_to_gui() read dbAST
09-16 14:40:24.726726  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.726747  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.726757  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.726765  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.726784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.726809  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:24.726840  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:24.726847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.726857  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:24.726865  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.726882  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.726889  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.726915  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.726932  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.726966  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.726973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.726985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727028  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.727035  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.727042  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.727048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.727063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727071  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:40:24.727080  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:40:24.727086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727129  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:40:24.727138  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.727144  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.727151  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.727162  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.727174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727186  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.727193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727221  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.727229  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.727236  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.727242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.727257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727264  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:40:24.727273  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:40:24.727279  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727308  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:40:24.727317  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.727323  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.727329  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.727341  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.727352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727365  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.727372  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727384  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727422  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.727429  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727444  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.727451  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727471  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:40:24.727480  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:40:24.727486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727514  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:40:24.727522  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.727529  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.727535  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.727546  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.727558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727571  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.727577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727602  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.727608  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727620  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.727627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727637  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:40:24.727645  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:40:24.727652  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727679  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:40:24.727689  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.727695  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.727702  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.727713  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.727724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727737  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.727744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727768  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.727775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727787  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.727793  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727804  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:24.727812  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:24.727819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727845  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:24.727854  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.727860  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.727867  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.727878  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.727889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727902  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.727909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.727933  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.727939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727951  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.727958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.727968  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:40:24.727977  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:40:24.727983  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728009  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:40:24.728018  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.728024  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.728030  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.728041  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.728053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.728065  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.728071  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.728111  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.728118  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728133  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.728149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728160  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:40:24.728169  1 13 json_db_to_gui() child args name <use_art>
09-16 14:40:24.728175  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728204  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:40:24.728213  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.728219  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.728226  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.728245  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.728257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.728270  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.728276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728288  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.728301  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.728307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728319  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.728326  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728336  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:40:24.728344  1 13 json_db_to_gui() child args name <verbose>
09-16 14:40:24.728350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728377  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:40:24.728386  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.728392  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.728403  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.728414  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.728426  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.728439  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.728445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728457  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.728470  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.728476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728488  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.728494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728507  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.728513  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728523  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:24.728532  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:24.728537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728563  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:24.728581  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.728587  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.728594  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.728606  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.728620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.728634  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.728641  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.728656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.859570  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.859582  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859599  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.859604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859614  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:40:24.859622  1 13 json_db_to_gui() child args name <metrics>
09-16 14:40:24.859626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859655  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:40:24.859662  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.859667  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.859672  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.859684  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.859692  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.859701  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.859704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.859723  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.859727  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.859732  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.859736  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.859749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859753  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:40:24.859758  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:40:24.859762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859779  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:40:24.859784  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.859788  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.859791  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.859799  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.859806  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.859814  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.859818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.859833  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.859837  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.859841  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.859844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.859853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859858  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:40:24.859862  1 13 json_db_to_gui() child args name <fileName>
09-16 14:40:24.859866  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859882  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:40:24.859888  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.859891  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.859895  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.859902  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.859909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.859917  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.859921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859928  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.859943  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.859947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859954  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.859958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859964  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:40:24.859969  1 13 json_db_to_gui() child args name <level>
09-16 14:40:24.859972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.859989  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:40:24.859994  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.859997  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.860001  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860008  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.860015  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860022  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.860026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860040  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.860044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860051  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.860055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860061  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:40:24.860065  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:40:24.860069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860085  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:40:24.860090  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860093  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.860097  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860104  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.860110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860118  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.860121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860129  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860136  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.860139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860146  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.860150  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860156  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:40:24.860160  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:40:24.860164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860180  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:40:24.860185  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860188  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.860192  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860199  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.860206  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860213  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.860217  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860224  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860232  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.860235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860242  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.860246  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860253  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.860257  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860264  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.860267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860274  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.860278  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860284  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:40:24.860289  1 13 json_db_to_gui() child args name <outputs>
09-16 14:40:24.860292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860297  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:40:24.860302  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860305  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.860309  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860315  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.860322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860329  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.860332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860339  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860347  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860351  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.860355  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.860359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.860367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860372  1 11 json_db_to_gui() operator() switch OBJECT child name=<rootMPIOutput>
09-16 14:40:24.860377  1 13 json_db_to_gui() child args name <rootMPIOutput>
09-16 14:40:24.860380  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860404  1 13 json_db_to_gui() metadata node was found, name=<rootMPIOutput>
09-16 14:40:24.860410  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860414  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.860418  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860425  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.860433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860441  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.860445  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860460  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860464  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.860468  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.860472  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.860480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860485  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:40:24.860490  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:40:24.860493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860509  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:40:24.860514  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860518  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.860522  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860528  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.860536  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860543  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.860547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860563  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860566  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.860570  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.860574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.860583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860587  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:40:24.860592  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:40:24.860595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860612  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:40:24.860617  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860620  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.860624  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860631  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.860638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860645  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.860649  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860677  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860682  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.860686  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.860690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.860705  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860710  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.860721  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.860725  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.860738  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:40:24.860770  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860792  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.860796  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860802  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.860826  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:40:24.860850  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860854  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.860858  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.860870  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.860873  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860882  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.860886  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860892  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:24.860897  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:24.860901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860917  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:24.860941  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.860946  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.860950  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.860957  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.860965  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860973  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.860976  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.860984  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.860993  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.860997  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861005  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.861010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861017  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.861022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861029  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.861033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861039  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:40:24.861045  1 13 json_db_to_gui() child args name <physics>
09-16 14:40:24.861049  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861054  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:40:24.861059  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861072  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.861077  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.861084  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.861092  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861100  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.861104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861120  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861125  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.861129  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.861133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.861143  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861149  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:40:24.861154  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:40:24.861158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861184  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:40:24.861190  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861194  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.861198  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.861205  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.861213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861222  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.861226  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861243  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861247  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.861251  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.861255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.861265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861272  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.861276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861283  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:40:24.861288  1 13 json_db_to_gui() child args name <filters>
09-16 14:40:24.861292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861308  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:40:24.861314  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861318  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.861322  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.861329  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.861337  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861345  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.861350  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861366  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861371  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.861375  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.861378  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.861388  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861394  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:40:24.861417  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:40:24.861423  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861450  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:40:24.861456  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861460  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.861464  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.861473  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.861481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861490  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.861494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861511  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861516  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.861520  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.861524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.861533  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861539  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:24.861544  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:24.861548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861565  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:24.861571  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861574  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.861579  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.861586  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.861594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861603  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.861607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861614  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861622  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.861627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861634  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.861638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861645  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:40:24.861650  1 13 json_db_to_gui() child args name <nth>
09-16 14:40:24.861654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861670  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:40:24.861676  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861680  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.861684  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.861691  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.861699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861707  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.861711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861726  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.861731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861738  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.861742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861750  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.861754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861760  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:40:24.861765  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:40:24.861769  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861785  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:40:24.861791  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861795  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.861800  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.861807  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.861814  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861822  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.861827  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861843  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861848  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.861852  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.861857  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.861866  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861871  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:24.861876  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:24.861880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861897  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:24.861903  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.861907  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.861911  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.861918  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.861926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861935  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.861939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.861954  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.861959  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861966  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.861970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.861977  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:40:24.861982  1 13 json_db_to_gui() child args name <nth>
09-16 14:40:24.861986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862002  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:40:24.862008  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862012  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.862017  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862024  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.862031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862040  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.862044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862051  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862059  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.862063  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862071  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862083  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862094  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862098  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862103  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:40:24.862108  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:40:24.862113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862128  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:40:24.862134  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862137  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.862142  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862149  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.862156  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862164  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.862169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862184  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862189  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.862193  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.862198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.862209  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862214  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.862218  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.862223  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.862234  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:40:24.862240  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862244  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.862248  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.862261  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862273  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:40:24.862279  1 13 json_db_to_gui() child args name <p1>
09-16 14:40:24.862282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862299  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:40:24.862305  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862308  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.862313  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862320  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.862328  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862337  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.862341  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862357  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862362  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.862366  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.862371  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.862382  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862387  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.862391  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.862398  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.862413  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862424  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:40:24.862430  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:40:24.862434  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862450  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:40:24.862455  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862459  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.862464  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862471  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.862480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862488  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.862492  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862499  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862508  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862513  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.862517  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.862522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.862533  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862538  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.862542  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.862547  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.862558  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:24.862564  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862568  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.862572  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.862586  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862597  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:40:24.862603  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:40:24.862607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862623  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:40:24.862629  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862633  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.862638  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862645  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.862653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862662  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.862666  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862682  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862687  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.862691  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.862695  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.862706  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862711  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.862715  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.862720  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.862732  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:24.862737  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862741  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.862745  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.862758  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862769  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:40:24.862775  1 13 json_db_to_gui() child args name <producers>
09-16 14:40:24.862778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862795  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:40:24.862801  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862805  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.862809  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862816  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.862824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862832  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.862837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862844  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862853  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862858  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.862862  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.862866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.862876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862883  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862895  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862899  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862905  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:40:24.862911  1 13 json_db_to_gui() child args name <process_name>
09-16 14:40:24.862914  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862920  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:40:24.862925  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.862929  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.862933  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.862940  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.862948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862956  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.862961  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862968  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.862976  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.862980  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862987  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.862991  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.862998  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:40:24.863003  1 13 json_db_to_gui() child args name <services>
09-16 14:40:24.863007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863012  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:40:24.863018  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863021  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863025  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863031  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863046  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863051  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863058  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863067  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863072  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.863076  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.863079  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.863089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863094  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:40:24.863099  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:40:24.863103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863119  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:40:24.863125  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863129  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863133  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863140  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863157  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863161  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863168  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863177  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863182  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.863186  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.863190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.863200  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863205  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:40:24.863210  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:40:24.863214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863231  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:40:24.863236  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863240  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863245  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863252  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863268  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863273  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863280  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863288  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.863292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863299  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.863304  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863310  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:40:24.863315  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:40:24.863319  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863334  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:40:24.863340  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863344  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863349  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863356  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863364  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863372  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863391  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.863399  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863408  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.863412  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863418  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:24.863424  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:24.863428  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863445  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:24.863450  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863454  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863459  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863467  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863482  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863502  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.863506  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863514  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.863518  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863524  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:24.863530  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:24.863533  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863550  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:24.863555  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863559  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863564  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863571  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863578  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863586  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863590  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863605  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.863610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863617  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.863621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863627  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:40:24.863633  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:40:24.863636  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863652  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:40:24.863658  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863661  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863666  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863673  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863688  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863693  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863708  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.863712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863719  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.863724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863731  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.863735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863741  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:40:24.863747  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:40:24.863750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863766  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:40:24.863772  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863776  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863781  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863788  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863795  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863803  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863807  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863824  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863828  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.863832  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.863836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.863847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863852  1 11 json_db_to_gui() operator() switch OBJECT child name=<errorOnFailureToPut>
09-16 14:40:24.863857  1 13 json_db_to_gui() child args name <errorOnFailureToPut>
09-16 14:40:24.863861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863877  1 13 json_db_to_gui() metadata node was found, name=<errorOnFailureToPut>
09-16 14:40:24.863883  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863887  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863892  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.863899  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.863907  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863915  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.863920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.863935  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.863939  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863946  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.863951  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863957  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:40:24.863963  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:40:24.863966  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.863982  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:40:24.863988  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.863992  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.863997  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864004  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.864012  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864020  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.864024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864039  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.864043  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864051  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.864055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864063  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.864067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864074  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.864078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864083  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:40:24.864089  1 13 json_db_to_gui() child args name <source>
09-16 14:40:24.864092  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864098  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:40:24.864103  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864107  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.864111  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864118  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.864126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864134  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.864138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864154  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864159  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.864163  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.864167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.864177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864182  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type_map>
09-16 14:40:24.864187  1 13 json_db_to_gui() child args name <fragment_type_map>
09-16 14:40:24.864191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864207  1 13 json_db_to_gui() metadata node was found, name=<fragment_type_map>
09-16 14:40:24.864213  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864216  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.864221  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864228  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.864236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864244  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.864249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864265  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864270  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.864274  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.864278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.864289  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864294  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.864298  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.864302  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.864314  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:24.864319  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864323  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.864327  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.864339  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:24.864344  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864348  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.864353  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.864363  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:24.864369  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864372  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.864377  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.864388  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:24.864393  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864414  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.864420  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.864433  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:24.864449  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864453  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.864457  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.864468  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:24.864474  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864478  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.864482  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864486  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.864495  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.864500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864507  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:24.864513  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:24.864517  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864533  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:24.864539  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864543  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.864548  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864555  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.864564  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864572  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.864576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864584  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864592  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.864596  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864603  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.864608  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864614  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:40:24.864619  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:40:24.864623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864639  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:40:24.864645  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864648  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.864653  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864660  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.864667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864676  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.864680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864687  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864695  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.864699  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864706  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.864711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864717  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:40:24.864722  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:40:24.864726  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864741  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:40:24.864746  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.864750  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.864754  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.864760  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.864767  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864775  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.864780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.864795  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.864799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864807  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.864811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864818  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.864823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.864845  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:40:24.864859  1 10 json_db_to_gui() created gui_node
09-16 14:40:24.877974  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.27 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_001_t" end time: Sep 16 14:40 CDT
"RoundConvert_GUIJson2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

63/65 Testing: FileSystemFhicl_insert_001_t
63/65 Test: FileSystemFhicl_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/FileSystemFhicl_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/test001.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/test001.cmp.fcl" "--skip-return-code" "247" "FileSystemFhicl_t" "-s" "test001.src.fcl" "-c" "test001.cmp.fcl" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemFhicl/test001/FileSystemFhicl_insert_001_t.d
"FileSystemFhicl_insert_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:24.674361  1  0 artdaq::database::filesystem trace_enable
09-16 14:40:24.674495  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:40:24.674559  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:24.717135  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.717152  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.717306  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.717315  1  5 findChild() args  path=<collection>
09-16 14:40:24.722762  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.724178  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.724229  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.724328  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.724334  1  5 findChild() Find succeeded.
09-16 14:40:24.725435  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.725444  1  5 findChild() args  path=<filter>
09-16 14:40:24.727308  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.728673  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.728682  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.729087  1 12 StorageProvider::FileSystemDB generate_oid=75e5fe5c579a4b6fa482ed6c
09-16 14:40:24.730181  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ]
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.730190  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "75e5fe5c579a4b6fa482ed6c"
    }
}>
09-16 14:40:24.730194  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.732192  1  4 insertChild() new child value=object(...)
09-16 14:40:24.732207  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.733554  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.733564  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.734755  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.734797  1  4 insertChild() found child value=object(...)
09-16 14:40:24.736154  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "75e5fe5c579a4b6fa482ed6c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.736227  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "75e5fe5c579a4b6fa482ed6c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.736237  1  4 insertChild() Insert succeeded.
09-16 14:40:24.736281  1  4 StorageProvider::FileSystemDB::store() using generated oid=<75e5fe5c579a4b6fa482ed6c>.
09-16 14:40:24.736311  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.736330  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.736362  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.736495  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/75e5fe5c579a4b6fa482ed6c.json>.
09-16 14:40:24.736619  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "75e5fe5c579a4b6fa482ed6c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.736625  1  5 findChild() args  path=<document>
09-16 14:40:24.738474  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.739827  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "75e5fe5c579a4b6fa482ed6c"
}
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.739853  1  5 findChild() found child value=object(...)
09-16 14:40:24.741204  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "75e5fe5c579a4b6fa482ed6c"
}
}
}>
09-16 14:40:24.741211  1  5 findChild() Find succeeded.
09-16 14:40:24.749456  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.749466  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.749529  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.750472  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.750480  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "prolog" : {

                }, 
                "main" : {
                    "source" : {
                        "module_type" : "RawInput", 
                        "resume_after_timeout" : true, 
                        "waiting_time" : 900
                    }
                }
            }, 
            "metadata" : {
                "prolog" : {
                    "type" : "table", 
                    "comment" : "#prolog", 
                    "children" : {

                    }
                }, 
                "main" : {
                    "type" : "table", 
                    "comment" : "#main", 
                    "children" : {
                        "source" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "module_type" : {
                                    "type" : "string", 
                                    "comment" : "#Success 1  above satom", 
                                    "annotation" : " "
                                }, 
                                "resume_after_timeout" : {
                                    "type" : "bool", 
                                    "comment" : " ", 
                                    "annotation" : "#Success 3 right of satom"
                                }, 
                                "waiting_time" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : "//Success 2 right of satom"
                                }
                            }
                        }
                    }
                }
            }
        }, 
        "comments" : [
            {
                "linenum" : 3, 
                "value" : "#Success 1  above satom"
            }, 
            {
                "linenum" : 6, 
                "value" : "#Success 3 right of satom"
            }, 
            {
                "linenum" : 8, 
                "value" : "//Success 2 right of satom"
            }
        ], 
        "origin" : {
            "format" : "fhicl", 
            "source" : "fhicl_to_json", 
            "timestamp" : "Mon Feb  8 14:00:30 2016"
        }, 
        "version" : "notprovided", 
        "configurable_entity" : {
            "name" : "notprovided"
        }, 
        "configurations" : [

        ], 
        "_id" : {
            "_oid" : "75e5fe5c579a4b6fa482ed6c"
        }
    }>.
09-16 14:40:24.750486  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<75e5fe5c579a4b6fa482ed6c>.
09-16 14:40:24.752257  1  5 StorageProvider::FileSystemDB::index::addDocument() found 7 keys.
09-16 14:40:24.752282  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:24.752286  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<75e5fe5c579a4b6fa482ed6c>.
09-16 14:40:24.752290  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<notprovided>.
09-16 14:40:24.752392  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() begin
09-16 14:40:24.752400  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args ouid=<75e5fe5c579a4b6fa482ed6c>.
09-16 14:40:24.752404  1  7 StorageProvider::FileSystemDB::index::_addConfigurableEntity() args entity=<notprovided>.
09-16 14:40:24.752433  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.752950  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"75e5fe5c579a4b6fa482ed6c",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"75e5fe5c579a4b6fa482ed6c",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.753060  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.753082  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:24.753087  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "75e5fe5c579a4b6fa482ed6c"}, "collection":"testFHICL_V001"}>
09-16 14:40:24.753180  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "75e5fe5c579a4b6fa482ed6c"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.753186  1  5 findChild() args  path=<collection>
09-16 14:40:24.753380  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.753491  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "75e5fe5c579a4b6fa482ed6c"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.753503  1  5 findChild() found child value=std::string(testFHICL_V001)
09-16 14:40:24.753570  1  5 findChild() resultDocument=<{
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.753576  1  5 findChild() Find succeeded.
09-16 14:40:24.754557  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "75e5fe5c579a4b6fa482ed6c"
    }, 
    "collection" : "testFHICL_V001"
}>
09-16 14:40:24.754563  1  5 findChild() args  path=<filter>
09-16 14:40:24.754733  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.754839  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "75e5fe5c579a4b6fa482ed6c"
},
"collection" : "testFHICL_V001"
}>
09-16 14:40:24.754850  1  5 findChild() found child value=object(...)
09-16 14:40:24.754936  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "75e5fe5c579a4b6fa482ed6c"
}
}>
09-16 14:40:24.754941  1  5 findChild() Find succeeded.
09-16 14:40:24.755963  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>.
09-16 14:40:24.755970  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.755978  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/>
09-16 14:40:24.755997  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.756001  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/index.json>.
09-16 14:40:24.756047  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"75e5fe5c579a4b6fa482ed6c",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"75e5fe5c579a4b6fa482ed6c",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.757045  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:24.757051  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "75e5fe5c579a4b6fa482ed6c"
    }>.
09-16 14:40:24.757149  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:24.757272  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:40:24.757277  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<75e5fe5c579a4b6fa482ed6c>.
09-16 14:40:24.757307  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:40:24.757441  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testFHICL_V001/75e5fe5c579a4b6fa482ed6c.json>.
09-16 14:40:24.757567  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.758072  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"75e5fe5c579a4b6fa482ed6c",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {
"notprovided" : [
"181059a3a1e84eed855eb3b8",
"326612e764504bc892e0cb7d",
"3fbe9e3d19504b46aab36eca",
"4a28173c086d44cab0687be6",
"4af80e19cf7c4f11af926170",
"75e5fe5c579a4b6fa482ed6c",
"85020ca9a0704bf58a80ad2f",
"92b710ed20d1412fa1cde47c",
"a32e88f347e54e7dbc6f37e8",
"a3cb7270a5354bb982cc4eeb",
"a66f9e18f8c44ceba4cc2a03",
"e58bbc9d80924218b1215eb3"
]
}
}>
09-16 14:40:24.758141  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.758289  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ], 
    "_id" : {
        "_oid" : "75e5fe5c579a4b6fa482ed6c"
    }
}>
09-16 14:40:24.758296  1  3 deleteChild() args  path=<_id>
09-16 14:40:24.760069  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.761340  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

],
"_id" : {
"_oid" : "75e5fe5c579a4b6fa482ed6c"
}
}>
09-16 14:40:24.761386  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:24.762591  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.762664  1  3 deleteChild() deletedChild=<{
"_oid" : "75e5fe5c579a4b6fa482ed6c"
}>
09-16 14:40:24.762669  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.762708  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.762717  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:24.766302  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{ "$oid" : "75e5fe5c579a4b6fa482ed6c"}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.27 sec
----------------------------------------------------------
Test Passed.
"FileSystemFhicl_insert_001_t" end time: Sep 16 14:40 CDT
"FileSystemFhicl_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

41/65 Testing: RoundConvert_GUIJson2DBJson_002_t
41/65 Test: RoundConvert_GUIJson2DBJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "RoundConvert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test004/RoundConvert_GUIJson2DBJson_002_t.d
"RoundConvert_GUIJson2DBJson_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:24.659067  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:24.660947  1 14 json_gui_to_db() begin
09-16 14:40:24.676889  1 14 json_gui_to_db() read guiAST
09-16 14:40:24.677032  1 14 json_gui_to_db() created dbAST
09-16 14:40:24.677116  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.677158  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.677177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.677215  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677299  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.677335  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:24.677358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677416  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677460  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677469  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:24.677474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677481  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.677486  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.677491  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.677494  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.677499  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677506  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.677511  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:40:24.677516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677553  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:40:24.677557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677564  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.677569  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.677573  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.677576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.677581  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677587  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.677613  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:40:24.677619  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:40:24.677624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677641  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677672  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677679  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.677685  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_depth, value=int(2)
09-16 14:40:24.677690  1 16 json_node_t() makeChild() node_name=<event_queue_depth>
09-16 14:40:24.677694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677711  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677730  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677736  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.677742  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_wait_time, value=int(1)
09-16 14:40:24.677747  1 16 json_node_t() makeChild() node_name=<event_queue_wait_time>
09-16 14:40:24.677751  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677766  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677779  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677785  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677791  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.677796  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_events_per_bunch, value=int(1)
09-16 14:40:24.677801  1 16 json_node_t() makeChild() node_name=<expected_events_per_bunch>
09-16 14:40:24.677805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677820  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677827  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677833  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677839  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677845  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.677851  1 15 json_gui_to_db() operator() switch ARRAY child name= file_duration, value=int(0)
09-16 14:40:24.677855  1 16 json_node_t() makeChild() node_name=<file_duration>
09-16 14:40:24.677859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677882  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677888  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677893  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677900  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.677905  1 15 json_gui_to_db() operator() switch ARRAY child name= file_event_count, value=int(0)
09-16 14:40:24.677910  1 16 json_node_t() makeChild() node_name=<file_event_count>
09-16 14:40:24.677914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677921  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677936  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677948  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.677954  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.677960  1 15 json_gui_to_db() operator() switch ARRAY child name= file_size_MB, value=int(8000)
09-16 14:40:24.677965  1 16 json_node_t() makeChild() node_name=<file_size_MB>
09-16 14:40:24.677969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677976  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.677998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678003  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678010  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.678015  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:40:24.678020  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:40:24.678024  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678032  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678039  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678053  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678058  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678064  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.678070  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:40:24.678074  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:24.678078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678094  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678101  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678112  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678119  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.678124  1 15 json_gui_to_db() operator() switch ARRAY child name= onmon_event_prescale, value=int(1)
09-16 14:40:24.678129  1 16 json_node_t() makeChild() node_name=<onmon_event_prescale>
09-16 14:40:24.678133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678148  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678155  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678167  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678173  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:24.678181  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:40:24.678186  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:40:24.678190  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678225  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678231  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.678248  1 15 json_gui_to_db() operator() switch ARRAY child name= xmlrpc_client_list, value=std::string(;http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5)
09-16 14:40:24.678254  1 16 json_node_t() makeChild() node_name=<xmlrpc_client_list>
09-16 14:40:24.678259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678300  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678307  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.678313  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:24.678318  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:24.678322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678357  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678363  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.678368  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:24.678372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678397  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678407  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678414  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:24.678419  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678425  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.678430  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.678435  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.678438  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.678443  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678450  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.678455  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:40:24.678459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678496  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:40:24.678501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678507  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.678512  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.678516  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.678519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.678524  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678530  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.678536  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/aggregator/agg_%UID%_metrics.log)
09-16 14:40:24.678541  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:40:24.678545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678580  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678587  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.678593  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:40:24.678597  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:40:24.678601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678617  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678630  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678636  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678642  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.678648  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:40:24.678652  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:40:24.678656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678690  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678696  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:24.678701  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:40:24.678705  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:40:24.678710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678745  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678752  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.678757  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:24.678761  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678797  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:24.678802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678808  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.678813  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.678817  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.678821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.678826  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678833  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.678838  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:24.678842  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678858  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678879  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:24.678884  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678890  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.678895  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.678899  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.678903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.678907  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678914  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.678918  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:24.678923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678930  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678953  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678959  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:24.678964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.678970  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.678975  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.678979  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.678982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.678988  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.678995  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.678999  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:24.679004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679042  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:24.679049  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679060  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.679067  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.679072  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.679075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.679080  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679087  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.679092  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:24.679096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679113  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679128  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679134  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:24.679139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679145  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.679150  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.679154  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.679158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.679163  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679169  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.679175  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:24.679179  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:24.679184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679218  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679224  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.679230  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:40:24.679235  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:24.679239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679274  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679280  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.679285  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:24.679289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679326  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:24.679330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679336  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.679341  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.679345  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.679349  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.679353  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679359  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.679365  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:24.679370  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:24.679374  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679389  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679407  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679413  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679420  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.679426  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:40:24.679431  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:24.679435  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679443  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679451  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679472  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679479  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.679486  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:24.679490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679519  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:24.679525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679709  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.679715  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.679719  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.679723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.679730  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679737  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.679743  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:40:24.679748  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679758  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:40:24.679762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679779  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679806  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.679811  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.679815  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.679819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.679824  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:40:24.679838  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.679862  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679869  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.679875  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:24.679880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679890  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:24.679895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679903  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679930  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679937  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.679942  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.679946  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.679950  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.679955  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:24.679960  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.679966  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.679973  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:24.679980  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:24.679984  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.679994  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:24.679999  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680034  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680041  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:24.680046  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.680050  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.680054  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.680059  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:24.680064  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.680070  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680077  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.680082  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:24.680087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680111  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680126  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:24.680130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680136  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.680141  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.680145  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.680149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.680153  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680160  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.680165  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:40:24.680169  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680177  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680185  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680206  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:40:24.680210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680217  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.680221  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.680225  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.680229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.680233  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680240  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.680245  1 15 json_gui_to_db() operator() switch ARRAY child name= instance_name, value=std::string(ArtdaqDemo)
09-16 14:40:24.680250  1 16 json_node_t() makeChild() node_name=<instance_name>
09-16 14:40:24.680254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680270  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680278  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680284  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680290  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680296  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.680302  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(ArtdaqDemoBuildInfo)
09-16 14:40:24.680307  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:24.680311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680333  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680347  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680354  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.680359  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQAG)
09-16 14:40:24.680364  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:40:24.680368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680390  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680407  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680414  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.680419  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:24.680423  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680431  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680439  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680461  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:24.680465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680471  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.680477  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.680481  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.680484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.680489  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680495  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.680500  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:24.680504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680520  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680535  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680541  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:24.680546  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680552  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.680557  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.680561  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.680565  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.680569  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680576  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:24.680582  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:24.680587  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:24.680591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680620  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680626  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680632  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.680638  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:40:24.680643  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:40:24.680647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680662  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680669  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680682  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680688  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.680693  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:24.680697  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680712  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680719  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680734  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:24.680738  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680744  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.680749  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.680753  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.680757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.680761  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680768  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.680773  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:40:24.680778  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:40:24.680782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680790  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680818  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680825  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:24.680830  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:24.680834  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680841  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680856  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680864  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680871  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:24.680875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680882  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:24.680887  1 15 json_gui_to_db() operator() begin
09-16 14:40:24.680891  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:24.680894  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.680898  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:24.680905  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:24.680910  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonInput)
09-16 14:40:24.680915  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:24.680919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680927  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680942  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.680967  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:40:24.681019  1 14 json_gui_to_db() created db_node
09-16 14:40:24.689000  1 14 json_gui_to_db() created db_json
09-16 14:40:24.689105  1 10 json_db_to_gui() begin
09-16 14:40:24.696368  1 10 json_db_to_gui() read dbAST
09-16 14:40:24.696437  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.696457  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.696464  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.696471  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.696513  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:24.696545  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:24.696551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.696560  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:24.696567  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.696583  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.696589  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.696605  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.696623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.696659  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.696665  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.696677  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.696722  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.696729  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.696735  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.696741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.696761  1 11 json_db_to_gui() operator() switch OBJECT child name=<aggregator>
09-16 14:40:24.696768  1 13 json_db_to_gui() child args name <aggregator>
09-16 14:40:24.696773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.696805  1 13 json_db_to_gui() metadata node was found, name=<aggregator>
09-16 14:40:24.696814  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.696821  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.696827  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.696837  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.696848  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.696860  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.696866  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.696878  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.696890  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.696896  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.696902  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.696907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.696921  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.696927  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder_count>
09-16 14:40:24.696935  1 13 json_db_to_gui() child args name <event_builder_count>
09-16 14:40:24.696940  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.696967  1 13 json_db_to_gui() metadata node was found, name=<event_builder_count>
09-16 14:40:24.696976  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.696983  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.696988  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.696999  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.697012  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697027  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.697032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697045  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697103  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.697111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697129  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.697136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697173  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_queue_depth>
09-16 14:40:24.697182  1 13 json_db_to_gui() child args name <event_queue_depth>
09-16 14:40:24.697188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697216  1 13 json_db_to_gui() metadata node was found, name=<event_queue_depth>
09-16 14:40:24.697225  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.697231  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.697236  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.697249  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.697262  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697275  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.697281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697306  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.697312  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697325  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.697331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697341  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_queue_wait_time>
09-16 14:40:24.697350  1 13 json_db_to_gui() child args name <event_queue_wait_time>
09-16 14:40:24.697355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697383  1 13 json_db_to_gui() metadata node was found, name=<event_queue_wait_time>
09-16 14:40:24.697391  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.697404  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.697410  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.697422  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.697435  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697449  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.697456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697481  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.697487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697500  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.697506  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697517  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_events_per_bunch>
09-16 14:40:24.697525  1 13 json_db_to_gui() child args name <expected_events_per_bunch>
09-16 14:40:24.697531  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697558  1 13 json_db_to_gui() metadata node was found, name=<expected_events_per_bunch>
09-16 14:40:24.697567  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.697573  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.697579  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.697590  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.697601  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697614  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.697621  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697635  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697648  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.697654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697668  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.697674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697684  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_duration>
09-16 14:40:24.697692  1 13 json_db_to_gui() child args name <file_duration>
09-16 14:40:24.697698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697725  1 13 json_db_to_gui() metadata node was found, name=<file_duration>
09-16 14:40:24.697734  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.697741  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.697747  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.697758  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.697770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697784  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.697791  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697817  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.697823  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697836  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.697842  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697853  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_event_count>
09-16 14:40:24.697861  1 13 json_db_to_gui() child args name <file_event_count>
09-16 14:40:24.697868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697897  1 13 json_db_to_gui() metadata node was found, name=<file_event_count>
09-16 14:40:24.697906  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.697912  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.697917  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.697927  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.697938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697952  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.697958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.697981  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.697986  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.697997  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.698003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698012  1 11 json_db_to_gui() operator() switch OBJECT child name=<file_size_MB>
09-16 14:40:24.698020  1 13 json_db_to_gui() child args name <file_size_MB>
09-16 14:40:24.698026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698051  1 13 json_db_to_gui() metadata node was found, name=<file_size_MB>
09-16 14:40:24.698059  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.698065  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.698070  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.698080  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.698091  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698103  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.698108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698119  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698130  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.698135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698147  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.698153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698163  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_event_builder_rank>
09-16 14:40:24.698170  1 13 json_db_to_gui() child args name <first_event_builder_rank>
09-16 14:40:24.698176  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698200  1 13 json_db_to_gui() metadata node was found, name=<first_event_builder_rank>
09-16 14:40:24.698207  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.698213  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.698218  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.698228  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.698239  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698250  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.698256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698279  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.698285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698296  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.698302  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698311  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:24.698320  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:24.698325  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698350  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:24.698358  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.698364  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.698370  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.698381  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.698392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698416  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.698423  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698449  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.698454  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698465  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.698471  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698480  1 11 json_db_to_gui() operator() switch OBJECT child name=<onmon_event_prescale>
09-16 14:40:24.698488  1 13 json_db_to_gui() child args name <onmon_event_prescale>
09-16 14:40:24.698493  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698519  1 13 json_db_to_gui() metadata node was found, name=<onmon_event_prescale>
09-16 14:40:24.698527  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.698532  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.698538  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.698549  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.698559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698571  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.698576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698587  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698599  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.698605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698617  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.698623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698633  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:40:24.698641  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:40:24.698646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698671  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:40:24.698679  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.698685  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.698690  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.698701  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.698712  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698724  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.698730  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698741  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.698775  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.698781  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.698793  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.698799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911109  1 11 json_db_to_gui() operator() switch OBJECT child name=<xmlrpc_client_list>
09-16 14:40:24.911143  1 13 json_db_to_gui() child args name <xmlrpc_client_list>
09-16 14:40:24.911148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911179  1 13 json_db_to_gui() metadata node was found, name=<xmlrpc_client_list>
09-16 14:40:24.911186  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.911190  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.911195  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.911209  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.911219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911229  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.911233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911256  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.911261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911268  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.911272  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911281  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.911285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911291  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:24.911297  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:24.911300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911318  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:24.911324  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.911327  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.911332  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.911339  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.911347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911355  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.911359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911375  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.911378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911386  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.911390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911403  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:40:24.911410  1 13 json_db_to_gui() child args name <metrics>
09-16 14:40:24.911424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911455  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:40:24.911465  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.911472  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.911480  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.911493  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.911507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911522  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.911529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911560  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.911569  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.911577  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.911584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.911605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911613  1 11 json_db_to_gui() operator() switch OBJECT child name=<aggFile>
09-16 14:40:24.911622  1 13 json_db_to_gui() child args name <aggFile>
09-16 14:40:24.911629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911659  1 13 json_db_to_gui() metadata node was found, name=<aggFile>
09-16 14:40:24.911669  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.911676  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.911683  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.911696  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.911709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911723  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.911731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911759  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.911766  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.911774  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.911780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.911797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911805  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:40:24.911814  1 13 json_db_to_gui() child args name <fileName>
09-16 14:40:24.911820  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911851  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:40:24.911861  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.911867  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.911874  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.911887  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.911901  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911915  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.911922  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.911949  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.911956  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911970  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.911976  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.911988  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:40:24.911997  1 13 json_db_to_gui() child args name <level>
09-16 14:40:24.912003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912034  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:40:24.912043  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.912050  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.912057  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.912070  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.912082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912096  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.912103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912130  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.912137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912150  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.912157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912168  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:40:24.912177  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:40:24.912184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912220  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:40:24.912230  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.912238  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.912244  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.912278  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.912292  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912306  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.912313  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912360  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.912367  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912380  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.912387  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912404  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:40:24.912415  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:40:24.912421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912453  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:40:24.912462  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.912469  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.912476  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.912489  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.912503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912517  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.912524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912537  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912551  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.912558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912571  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.912577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912591  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.912598  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912610  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.912617  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912629  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.912636  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912647  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:40:24.912656  1 13 json_db_to_gui() child args name <outputs>
09-16 14:40:24.912662  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912671  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:40:24.912680  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.912687  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.912693  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.912706  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.912718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912732  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.912739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912767  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.912775  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.912782  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.912789  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.912806  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912818  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.912825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912836  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:40:24.912845  1 13 json_db_to_gui() child args name <physics>
09-16 14:40:24.912852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912861  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:40:24.912869  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.912876  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.912883  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.912895  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.912908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912922  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.912929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.912942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.912957  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.912964  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.912971  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.912978  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.912994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913002  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:40:24.913011  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:40:24.913017  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913046  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:40:24.913056  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.913062  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.913069  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.913082  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.913095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913110  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.913117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913130  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913145  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.913152  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.913159  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.913166  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.913182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913194  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.913201  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913213  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:40:24.913226  1 13 json_db_to_gui() child args name <filters>
09-16 14:40:24.913233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913261  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:40:24.913272  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.913279  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.913287  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.913300  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.913314  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913328  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.913335  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913348  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913367  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.913376  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.913384  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.913392  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.913416  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913427  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:40:24.913437  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:40:24.913443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913474  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:40:24.913485  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.913493  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.913500  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.913513  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.913528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913542  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.913549  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913581  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.913590  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.913598  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.913607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.913624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913634  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:24.913643  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:24.913651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913683  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:24.913694  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.913701  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.913710  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.913723  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.913738  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913754  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.913763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913776  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913791  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.913799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913813  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.913821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913833  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:40:24.913843  1 13 json_db_to_gui() child args name <nth>
09-16 14:40:24.913850  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913881  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:40:24.913892  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.913898  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.913907  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.913920  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.913935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913950  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.913958  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.913972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.913986  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.913994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914008  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.914016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914030  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.914038  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914049  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:40:24.914059  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:40:24.914065  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914095  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:40:24.914106  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.914113  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.914121  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.914134  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.914149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.914164  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.914172  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.914203  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.914211  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.914218  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.914225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.914242  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914251  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:24.914260  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:24.914268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914299  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:24.914310  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.914317  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.914325  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.914339  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.914354  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.914370  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.914378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.914416  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.914425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914439  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.914447  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914459  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:40:24.914470  1 13 json_db_to_gui() child args name <nth>
09-16 14:40:24.914477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914510  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:40:24.914521  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.914528  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.914536  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.914549  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.914564  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.914580  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.914588  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914602  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.914616  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.914624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914638  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.914646  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914661  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.914668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914681  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.914689  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914700  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:40:24.914710  1 13 json_db_to_gui() child args name <p1>
09-16 14:40:24.914718  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914746  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:40:24.914757  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.914764  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.914773  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.914786  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.914801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.914816  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.914824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.914838  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.914887  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.914897  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.914905  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.914914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.914943  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.914953  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.914970  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.914979  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.914990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.915007  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.915016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915029  1 11 json_db_to_gui() operator() switch OBJECT child name=<p2>
09-16 14:40:24.915040  1 13 json_db_to_gui() child args name <p2>
09-16 14:40:24.915047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915077  1 13 json_db_to_gui() metadata node was found, name=<p2>
09-16 14:40:24.915088  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915095  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.915103  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.915117  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.915133  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.915149  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.915157  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915171  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.915188  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915197  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.915204  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.915211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.915232  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915241  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.915249  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.915256  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.915266  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.915279  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:40:24.915314  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915332  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.915341  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.915351  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.915389  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.915405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915430  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:40:24.915441  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:40:24.915458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915490  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:40:24.915501  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915508  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.915516  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.915530  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.915546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.915562  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.915570  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915584  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.915601  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915610  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.915617  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.915624  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.915646  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915655  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.915662  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.915669  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.915680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.915692  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:24.915703  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915710  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.915717  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.915725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.915741  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.915749  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915762  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:40:24.915772  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:40:24.915779  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915811  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:40:24.915822  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915829  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.915838  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.915851  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.915867  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.915883  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.915892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.915906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.915922  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915931  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.915938  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:24.915945  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.915966  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.915975  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:24.915983  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:24.915989  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.916000  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:24.916011  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:24.916022  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.916030  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:24.916037  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.916044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:24.916061  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.916069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916082  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:40:24.916092  1 13 json_db_to_gui() child args name <producers>
09-16 14:40:24.916099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916129  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:40:24.916140  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.916147  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.916155  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.916169  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.916185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.916201  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.916209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916223  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.916239  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.916248  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.916255  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.916262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.916281  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916290  1 11 json_db_to_gui() operator() switch OBJECT child name=<BuildInfo>
09-16 14:40:24.916300  1 13 json_db_to_gui() child args name <BuildInfo>
09-16 14:40:24.916307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916338  1 13 json_db_to_gui() metadata node was found, name=<BuildInfo>
09-16 14:40:24.916348  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.916355  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.916364  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.916377  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.916392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.916416  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.916425  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916439  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.916457  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.916465  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.916473  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.916481  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.916500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916510  1 11 json_db_to_gui() operator() switch OBJECT child name=<instance_name>
09-16 14:40:24.916519  1 13 json_db_to_gui() child args name <instance_name>
09-16 14:40:24.916527  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916559  1 13 json_db_to_gui() metadata node was found, name=<instance_name>
09-16 14:40:24.916570  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.916577  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.916586  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.916599  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.916615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.916631  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.916639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.916668  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.916676  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916689  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.916697  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916709  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:24.916719  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:24.916725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916756  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:24.916767  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.916773  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.916782  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.916795  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.916810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.916826  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.916834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916847  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.916862  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.916870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916883  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.916891  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916905  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.916913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916926  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.916934  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916947  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.916955  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916966  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:40:24.916976  1 13 json_db_to_gui() child args name <process_name>
09-16 14:40:24.916982  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.916992  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:40:24.917002  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.917008  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.917017  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.917030  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.917044  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917059  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.917067  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917095  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.917104  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917117  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.917125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917136  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:40:24.917146  1 13 json_db_to_gui() child args name <services>
09-16 14:40:24.917153  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917162  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:40:24.917172  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.917178  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.917185  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.917199  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.917213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917228  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.917236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917266  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.917275  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.917282  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.917289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.917306  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917315  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:40:24.917325  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:40:24.917332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917362  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:40:24.917373  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.917390  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.917415  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.917429  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.917443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917460  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.917468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917482  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917499  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.917508  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.917516  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.917522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.917542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917551  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:24.917564  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:24.917572  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917625  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:24.917637  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.917644  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.917653  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.917666  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.917682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917697  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.917706  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917734  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.917742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917756  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.917764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917776  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:40:24.917786  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:40:24.917792  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917822  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:40:24.917833  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.917840  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.917848  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.917861  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.917876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917891  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.917899  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.917928  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.917936  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917949  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.917957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917971  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.917979  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.917990  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:40:24.918000  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:40:24.918006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918035  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:40:24.918046  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.918052  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.918061  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.918074  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.918089  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.918105  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.918113  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918126  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.918143  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.918151  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.918159  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.918166  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.918184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918194  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:40:24.918203  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:40:24.918211  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918242  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:40:24.918253  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.918260  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.918268  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.918281  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.918296  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.918312  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.918321  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918334  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.918349  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.918357  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918370  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.918378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918393  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.918408  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918423  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.918431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918441  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:40:24.918452  1 13 json_db_to_gui() child args name <source>
09-16 14:40:24.918459  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918470  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:40:24.918478  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.918486  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.918493  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.918506  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.918521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.918536  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.918545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918558  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.918575  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.918583  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:24.918591  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:24.918599  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:24.918617  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918626  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:24.918635  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:24.918644  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918674  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:24.918685  1 11 json_db_to_gui() operator() begin
09-16 14:40:24.918692  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:24.918700  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:24.918713  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:24.918729  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.918744  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:24.918753  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918766  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:24.918781  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:24.918789  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918803  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.918811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918825  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:24.918833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:24.918872  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:40:24.918896  1 10 json_db_to_gui() created gui_node
09-16 14:40:24.940168  1 10 json_db_to_gui() created gui_json
Running test:<RoundConvert_GUIJson2DBJson>
json_gui_to_db succeeded.
json_db_to_gui succeeded.
<end of output>
Test time =   0.34 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_GUIJson2DBJson_002_t" end time: Sep 16 14:40 CDT
"RoundConvert_GUIJson2DBJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

57/65 Testing: MongoFhicl_update_003_t
57/65 Test: MongoFhicl_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/MongoFhicl_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.cmp.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/test003.update.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test003.src.fcl" "-c" "test003.cmp.fcl" "-t" "update" "-o" "test003.update.fcl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test003/MongoFhicl_update_003_t.d
"MongoFhicl_update_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:24.680399  1  0 artdaq::database::mongo trace_enable
09-16 14:40:24.680552  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:24.742427  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:24.742437  1  3 deleteChild() args  path=<comments>
09-16 14:40:24.747379  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.748702  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.748766  1  3 deleteChild() deleted child value=array(...)
09-16 14:40:24.749796  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.750058  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
]
}>
09-16 14:40:24.750068  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.750294  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:40:24.750305  1  3 deleteChild() args  path=<comments>
09-16 14:40:24.752953  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.755332  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.755348  1  3 deleteChild() deleted child value=array(...)
09-16 14:40:24.757615  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.757743  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:40:24.757749  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.757951  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                
09-16 14:40:24.757961  1  3 deleteChild() args  path=<comments>
09-16 14:40:24.760616  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.762891  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 14,
"value" : "# 2"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.762907  1  3 deleteChild() deleted child value=array(...)
09-16 14:40:24.765154  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.765282  1  3 deleteChild() deletedChild=<{
"deleted" : [
{
"linenum" : 14,
"value" : "# 2"
}
]
}>
09-16 14:40:24.765287  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.765765  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.766141  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:24.768036  1  5 inserted_id={
    "$oid" : "57dc4aa81a72ba1eb21e14b1"
}
09-16 14:40:24.768071  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:24.768075  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4aa81a72ba1eb21e14b1"
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.768129  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4aa81a72ba1eb21e14b1"
}>
09-16 14:40:24.768206  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa81a72ba1eb21e14b1"
            }
        ]
    }
}>
09-16 14:40:24.768602  1  3 found_count=1
09-16 14:40:24.769453  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1eb21e14b1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:24.769674  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1eb21e14b1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:24.769682  1  3 deleteChild() args  path=<_id>
09-16 14:40:24.771144  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.772280  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4aa81a72ba1eb21e14b1"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.772304  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:24.773321  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.773392  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4aa81a72ba1eb21e14b1"
}>
09-16 14:40:24.773400  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.773446  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.773452  1  5 findChild() args  path=<document>
09-16 14:40:24.775814  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.778010  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.778040  1  5 findChild() found child value=object(...)
09-16 14:40:24.780088  1  5 findChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
}
}>
09-16 14:40:24.780095  1  5 findChild() Find succeeded.
09-16 14:40:24.780279  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.780287  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }
                                   
09-16 14:40:24.780294  1  4 replaceChild() args  path=<document>
09-16 14:40:24.783848  1  4 replaceChild() new child value=object(...)
09-16 14:40:24.783856  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:24.784876  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 901
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.784924  1  4 replaceChild() found child value=object(...)
09-16 14:40:24.787132  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.787919  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.787927  1  4 replaceChild() Replace succeeded.
09-16 14:40:24.788045  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:24.788106  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4aa81a72ba1eb21e14b1"
}>
09-16 14:40:24.788123  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa81a72ba1eb21e14b1"
            }
        ]
    }
}>
09-16 14:40:24.789579  1  8 modified_count=1
09-16 14:40:24.789604  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:24.789608  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4aa81a72ba1eb21e14b1"
}, "collection":"testFHICL_V001"}>
09-16 14:40:24.789645  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4aa81a72ba1eb21e14b1"
}>
09-16 14:40:24.789662  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa81a72ba1eb21e14b1"
            }
        ]
    }
}>
09-16 14:40:24.789969  1  3 found_count=1
09-16 14:40:24.790916  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1eb21e14b1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
                              
09-16 14:40:24.791220  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4aa81a72ba1eb21e14b1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "process_name" : {
                        "type" : "string", 
                        "comment" : " ", 
                        "annotation" : " "
                    }, 
                    "services" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "scheduler" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "fileMode" : {
                                        "type" : "string", 
                                        "comment" : " ", 
                                        "annotation" : " "
                                    }
                                }
                            }, 
                            "user" : {
                                "type" : "table", 
                                "comment" : " ", 
                                "children" : {
                                    "NetMonTransportServiceInterface" : {
                                        "type" : "table", 
                                        "comment" : " ", 
                                        "children" : {
                                            "data_receiver_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : "# 2"
                                            }, 
                                            "first_data_receiver_rank" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "max_fragment_size_words" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "mpi_buffer_count" : {
                                                "type" : "number", 
                                                "comment" : " ", 
                                                "annotation" : " "
                                            }, 
                                            "service_provider" : {
                                                "type" : "string", 
                                                "comment" : " ", 
                                                "annotation" : " "
            
09-16 14:40:24.791230  1  3 deleteChild() args  path=<_id>
09-16 14:40:24.987693  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:24.992243  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4aa81a72ba1eb21e14b1"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.992266  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:24.995432  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.995535  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4aa81a72ba1eb21e14b1"
}>
09-16 14:40:24.995542  1  3 deleteChild() Delete succeeded.
09-16 14:40:24.995628  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:24.995641  1 10 operator==() args  other.__json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileMode" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
},
"user" : {
"type" : "table",
"comment" : " ",
"children" : {
"NetMonTransportServiceInterface" : {
"type" : "table",
"comment" : " ",
"children" : {
"data_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : "# 2"
},
"first_data_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"service_provider" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
}
}
}
}
},
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
Running test:<update>
Search criteria {"filter":{
    "$oid" : "57dc4aa81a72ba1eb21e14b1"
}, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.35 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_update_003_t" end time: Sep 16 14:40 CDT
"MongoFhicl_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

5/65 Testing: JSONDocument_insertChild_101_t
5/65 Test: JSONDocument_insertChild_101_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/JSONDocument_insertChild_101_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/test101.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test101.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test101/JSONDocument_insertChild_101_t.d
"JSONDocument_insertChild_101_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.048702  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.050581  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.050595  1  5 findChild() args  path=<operation>
09-16 14:40:25.055835  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.059894  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.060136  1  5 findChild() found child value=std::string(insertChild)
09-16 14:40:25.060350  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:40:25.060359  1  5 findChild() Find succeeded.
09-16 14:40:25.063346  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.063360  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.064235  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.064585  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.064601  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.064712  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.064721  1  5 findChild() Find succeeded.
09-16 14:40:25.067196  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.067207  1  5 findChild() args  path=<delta>
09-16 14:40:25.068027  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.068367  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.068384  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.068509  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.068518  1  5 findChild() Find succeeded.
09-16 14:40:25.070732  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.070743  1  5 findChild() args  path=<path>
09-16 14:40:25.071544  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.071883  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.071900  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.072014  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.072023  1  5 findChild() Find succeeded.
09-16 14:40:25.074063  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.074073  1  5 findChild() args  path=<end-state>
09-16 14:40:25.074792  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.075112  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.075128  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.075240  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.075249  1  5 findChild() Find succeeded.
09-16 14:40:25.077725  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.077736  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.078552  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.078893  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.078909  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.079026  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.079035  1  5 findChild() Find succeeded.
09-16 14:40:25.081194  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.081204  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.081967  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.082275  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.082315  1  5 findChild() found child value=int(1)
09-16 14:40:25.082443  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.082451  1  5 findChild() Find succeeded.
09-16 14:40:25.084335  1  2 insertChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.084349  1  2 insertChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.084356  1  2 insertChild() args  path=<document.data>
09-16 14:40:25.089947  1  4 insertChild() new child value=object(...)
09-16 14:40:25.089966  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.092825  1  4 insertChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.092842  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.094001  1  4 insertChild() recurse() args childValue=<{
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:40:25.094043  1  4 insertChild() found child value=object(...)
09-16 14:40:25.096688  1  4 insertChild() resultDocument=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.096968  1  4 insertChild() insertChild=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.096980  1  4 insertChild() Insert succeeded.
09-16 14:40:25.097067  1 10 operator==() begin _json_buffer=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
},
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.097080  1 10 operator==() args  other.__json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }, 
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.106962  1 10 matches() JSON buffers are equal.
09-16 14:40:25.107014  1 10 operator==() begin _json_buffer=<{
    "aa" : 3, 
    "b" : {
        "c" : "2", 
        "dd" : [
            2, 
            5, 
            6, 
            7
        ]
    }
}>
09-16 14:40:25.107021  1 10 operator==() args  other.__json_buffer=<{
    "aa" : 3, 
    "b" : {
        "c" : "2", 
        "dd" : [
            2, 
            5, 
            6, 
            7
        ]
    }
}>
Running test:<insertChild>
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_101_t" end time: Sep 16 14:40 CDT
"JSONDocument_insertChild_101_t" time elapsed: 00:00:00
----------------------------------------------------------

47/65 Testing: Convert_Fhicl2DBJson_005_t
47/65 Test: Convert_Fhicl2DBJson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/Convert_Fhicl2DBJson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/test005.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/test005.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test005.fcl" "-c" "test005.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test005/Convert_Fhicl2DBJson_005_t.d
"Convert_Fhicl2DBJson_005_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.031774  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:40:25.031950  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:40:25.031982  1  0 artdaq::database::fhicljson trace_enable
09-16 14:40:25.032016  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:40:25.034264  1  2 fhicl_to_json: begin
09-16 14:40:25.034608  1  2 fhicl_to_json: Created root nodes
09-16 14:40:25.034721  1  2 read_comments begin
09-16 14:40:25.041071  1  2 read_comments end result=1
09-16 14:40:25.041088  1  2 read_data begin
09-16 14:40:25.041104  1  2 read_data() begin
09-16 14:40:25.080054  1  2 parse_document() returned 6 entries.
09-16 14:40:25.080201  1  2 fcl2jsondb() key=<services>
09-16 14:40:25.080251  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE" errorOnFailureToPut:false} NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:4 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:40:25.080327  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.080365  1  2 fcl2jsondb() key=<scheduler>
09-16 14:40:25.080377  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE" errorOnFailureToPut:false}>
09-16 14:40:25.080391  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.080413  1  2 fcl2jsondb() key=<fileMode>
09-16 14:40:25.080418  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:40:25.080432  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.080485  1  2 fcl2jsondb() key=<errorOnFailureToPut>
09-16 14:40:25.080491  1  2 fcl2jsondb() value=<false>
09-16 14:40:25.080506  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.080570  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:40:25.080584  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:4 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:40:25.080599  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.080616  1  2 fcl2jsondb() key=<service_provider>
09-16 14:40:25.080621  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:40:25.080635  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.080654  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:40:25.080658  1  2 fcl2jsondb() value=<4>
09-16 14:40:25.080672  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.081684  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:25.081692  1  2 fcl2jsondb() value=<8>
09-16 14:40:25.081711  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.082559  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:25.082566  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:40:25.082583  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.083576  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:40:25.083583  1  2 fcl2jsondb() value=<1>
09-16 14:40:25.083657  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.084551  1  2 fcl2jsondb() key=<daq>
09-16 14:40:25.084590  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:40:25.084608  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.084630  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:25.084634  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:40:25.084648  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.085533  1  2 fcl2jsondb() key=<event_builder>
09-16 14:40:25.085550  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:40:25.085566  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.085584  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:25.085589  1  2 fcl2jsondb() value=<16>
09-16 14:40:25.085602  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.086455  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:40:25.086462  1  2 fcl2jsondb() value=<0>
09-16 14:40:25.086479  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.087318  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:40:25.087325  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.087342  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.088192  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:40:25.088199  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.088215  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.089065  1  2 fcl2jsondb() key=<use_art>
09-16 14:40:25.089072  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.089088  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.089110  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:40:25.089115  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.089129  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.089149  1  2 fcl2jsondb() key=<verbose>
09-16 14:40:25.089153  1  2 fcl2jsondb() value=<false>
09-16 14:40:25.089167  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.089208  1  2 fcl2jsondb() key=<metrics>
09-16 14:40:25.089223  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:40:25.089237  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.089255  1  2 fcl2jsondb() key=<evbFile>
09-16 14:40:25.089265  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:40:25.089278  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.089294  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:40:25.089298  1  2 fcl2jsondb() value=<"file">
09-16 14:40:25.089312  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.089330  1  2 fcl2jsondb() key=<level>
09-16 14:40:25.089334  1  2 fcl2jsondb() value=<3>
09-16 14:40:25.089348  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.090203  1  2 fcl2jsondb() key=<fileName>
09-16 14:40:25.090210  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:40:25.090226  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.090245  1  2 fcl2jsondb() key=<uniquify>
09-16 14:40:25.090250  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.090264  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.090351  1  2 fcl2jsondb() key=<outputs>
09-16 14:40:25.090393  1  2 fcl2jsondb() value=<{rootMPIOutput:{module_type:"RootMPIOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:40:25.090414  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.090435  1  2 fcl2jsondb() key=<rootMPIOutput>
09-16 14:40:25.090452  1  2 fcl2jsondb() value=<{module_type:"RootMPIOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:40:25.090466  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.090482  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.090487  1  2 fcl2jsondb() value=<"RootMPIOutput">
09-16 14:40:25.090500  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.090521  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:40:25.090533  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:40:25.090546  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.090563  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:40:25.090571  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:40:25.090585  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.090699  1  2 fcl2jsondb() key=<physics>
09-16 14:40:25.090734  1  2 fcl2jsondb() value=<{analyzers:{} producers:{} filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} p1:[] pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["rootMPIOutput"]}>
09-16 14:40:25.090750  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.090772  1  2 fcl2jsondb() key=<analyzers>
09-16 14:40:25.090779  1  2 fcl2jsondb() value=<{}>
09-16 14:40:25.090792  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.090819  1  2 fcl2jsondb() key=<producers>
09-16 14:40:25.090826  1  2 fcl2jsondb() value=<{}>
09-16 14:40:25.090839  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.090867  1  2 fcl2jsondb() key=<filters>
09-16 14:40:25.090883  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:40:25.090897  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.090914  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:40:25.090923  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:40:25.090938  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.090953  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.090958  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:40:25.090971  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.090989  1  2 fcl2jsondb() key=<nth>
09-16 14:40:25.090994  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.091007  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.091868  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:40:25.091880  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:40:25.091895  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.091911  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.091916  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:40:25.091929  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.091946  1  2 fcl2jsondb() key=<nth>
09-16 14:40:25.091951  1  2 fcl2jsondb() value=<3>
09-16 14:40:25.091964  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.092814  1  2 fcl2jsondb() key=<p1>
09-16 14:40:25.092823  1  2 fcl2jsondb() value=<[]>
09-16 14:40:25.092839  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.092867  1  2 fcl2jsondb() key=<pmod2>
09-16 14:40:25.092875  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:40:25.092890  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.092919  1  2 fcl2jsondb() key=<pmod3>
09-16 14:40:25.092927  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:40:25.092941  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.092970  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:40:25.092977  1  2 fcl2jsondb() value=<["rootMPIOutput"]>
09-16 14:40:25.092992  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.093058  1  2 fcl2jsondb() key=<source>
09-16 14:40:25.093091  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:2.5e6 resume_after_timeout:true fragment_type_map:[[1,"missed"],[3,"V1720"],[4,"V1724"],[6,"TOY1"],[7,"TOY2"],[8,"ASCII"]]}>
09-16 14:40:25.093106  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.093127  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.093132  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:40:25.093145  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.093168  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:40:25.093172  1  2 fcl2jsondb() value=<2.5e6>
09-16 14:40:25.093185  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.094026  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:40:25.094032  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.094049  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.094076  1  2 fcl2jsondb() key=<fragment_type_map>
09-16 14:40:25.094097  1  2 fcl2jsondb() value=<[[1,"missed"],[3,"V1720"],[4,"V1724"],[6,"TOY1"],[7,"TOY2"],[8,"ASCII"]]>
09-16 14:40:25.094112  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.099134  1  2 fcl2jsondb() key=<process_name>
09-16 14:40:25.099142  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:40:25.099161  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.099176  1  2 read_data() end
09-16 14:40:25.099202  1  2 read_data end result=1
09-16 14:40:25.099206  1  2 fhicl_to_json: write() begin
09-16 14:40:25.110892  1  2 fhicl_to_json: write() end
09-16 14:40:25.110906  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.13 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_005_t" end time: Sep 16 14:40 CDT
"Convert_Fhicl2DBJson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

1/65 Testing: JSONDocument_replaceChild_001_t
1/65 Test: JSONDocument_replaceChild_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/JSONDocument_replaceChild_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/test001.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test001/JSONDocument_replaceChild_001_t.d
"JSONDocument_replaceChild_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.045447  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.047344  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.047361  1  5 findChild() args  path=<operation>
09-16 14:40:25.053501  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.057488  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.057544  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:40:25.057746  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:40:25.057756  1  5 findChild() Find succeeded.
09-16 14:40:25.060877  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.060891  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.061923  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.062441  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.062465  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.062597  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.062606  1  5 findChild() Find succeeded.
09-16 14:40:25.065478  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.065490  1  5 findChild() args  path=<delta>
09-16 14:40:25.066386  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.066773  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.066790  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.066909  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.066918  1  5 findChild() Find succeeded.
09-16 14:40:25.069203  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.069214  1  5 findChild() args  path=<path>
09-16 14:40:25.070075  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.070443  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.070460  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.070576  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.070585  1  5 findChild() Find succeeded.
09-16 14:40:25.072672  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.072684  1  5 findChild() args  path=<end-state>
09-16 14:40:25.073517  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.073871  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.073886  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.074003  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.074012  1  5 findChild() Find succeeded.
09-16 14:40:25.076535  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.076545  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.077253  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.077593  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.077610  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.077724  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.077733  1  5 findChild() Find succeeded.
09-16 14:40:25.079909  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.079920  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.080693  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.081030  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.081081  1  5 findChild() found child value=int(1)
09-16 14:40:25.081197  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.081206  1  5 findChild() Find succeeded.
09-16 14:40:25.083269  1  4 replaceChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : {
                "c" : "2", 
                "d" : [
                    2, 
                    5, 
                    6
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.083284  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.083292  1  4 replaceChild() args  path=<document.data>
09-16 14:40:25.088832  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.088849  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.092065  1  4 replaceChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"d" : [
2,
5,
6
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.092082  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.093452  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"d" : [
2,
5,
6
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:40:25.093515  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.096079  1  4 replaceChild() resultDocument=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.096340  1  4 replaceChild() replacedChild=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.096352  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.096443  1 10 operator==() begin _json_buffer=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.096457  1 10 operator==() args  other.__json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.105616  1 10 matches() JSON buffers are equal.
09-16 14:40:25.105664  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : {
        "c" : "2", 
        "d" : [
            2, 
            5, 
            6
        ]
    }
}>
09-16 14:40:25.105672  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : {
        "c" : "2", 
        "d" : [
            2, 
            5, 
            6
        ]
    }
}>
Running test:<replaceChild>
<end of output>
Test time =   0.23 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_001_t" end time: Sep 16 14:40 CDT
"JSONDocument_replaceChild_001_t" time elapsed: 00:00:00
----------------------------------------------------------

10/65 Testing: JSONDocument_appendChild_301_t
10/65 Test: JSONDocument_appendChild_301_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/JSONDocument_appendChild_301_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/test301.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test301.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test301/JSONDocument_appendChild_301_t.d
"JSONDocument_appendChild_301_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.045445  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.047347  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.047363  1  5 findChild() args  path=<operation>
09-16 14:40:25.055892  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.060585  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.060637  1  5 findChild() found child value=std::string(appendChild)
09-16 14:40:25.060832  1  5 findChild() resultDocument=<{
"operation" : "appendChild"
}>
09-16 14:40:25.060841  1  5 findChild() Find succeeded.
09-16 14:40:25.063460  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.063473  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.064250  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.064588  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.064604  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.064715  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.064724  1  5 findChild() Find succeeded.
09-16 14:40:25.066839  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.066849  1  5 findChild() args  path=<delta>
09-16 14:40:25.068545  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.068858  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.068876  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.068987  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.068995  1  5 findChild() Find succeeded.
09-16 14:40:25.070878  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.070888  1  5 findChild() args  path=<path>
09-16 14:40:25.071625  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.071929  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.071944  1  5 findChild() found child value=std::string(aliases.active)
09-16 14:40:25.072046  1  5 findChild() resultDocument=<{
"path" : "aliases.active"
}>
09-16 14:40:25.072055  1  5 findChild() Find succeeded.
09-16 14:40:25.073827  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.073838  1  5 findChild() args  path=<end-state>
09-16 14:40:25.074583  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.075826  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.075844  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.075958  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.075967  1  5 findChild() Find succeeded.
09-16 14:40:25.078218  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.078228  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.079048  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.079376  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.079392  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.079513  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.079522  1  5 findChild() Find succeeded.
09-16 14:40:25.081384  1  5 findChild() begin _json_buffer=<{
    "operation" : "appendChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.081398  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.082083  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.082393  1  5 findChild() recurse() args currentView=<{
"operation" : "appendChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.082440  1  5 findChild() found child value=int(1)
09-16 14:40:25.082551  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.082560  1  5 findChild() Find succeeded.
09-16 14:40:25.085387  1 13 appendChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.085403  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "version alias 2", 
        "assigned" : "Tue Dec 29 18:19:25 2015"
    }
}>
09-16 14:40:25.085411  1 13 appendChild() args  path=<aliases.active>
09-16 14:40:25.085820  1  4 appendChild() new child value=object(...)
09-16 14:40:25.085834  1  5 findChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.085841  1  5 findChild() args  path=<aliases.active>
09-16 14:40:25.088239  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.089820  1  5 findChild() recurse() args currentView=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.089834  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.090589  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:40:25.090613  1  5 findChild() found child value=array(...)
09-16 14:40:25.091925  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:40:25.091934  1  5 findChild() Find succeeded.
09-16 14:40:25.093124  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:40:25.093267  1  3 appendChild() newChild=<{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}>
09-16 14:40:25.093338  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:40:25.093350  1  4 replaceChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.093360  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:40:25.093366  1  4 replaceChild() args  path=<aliases.active>
09-16 14:40:25.095987  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.096002  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.097012  1  4 replaceChild() recurse() args childValue=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.097025  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.097707  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:40:25.097761  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.099796  1  4 replaceChild() resultDocument=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.100121  1  4 replaceChild() replacedChild=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.100129  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.100239  1 10 operator==() begin _json_buffer=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.100250  1 10 operator==() args  other.__json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.104459  1 10 matches() JSON buffers are equal.
09-16 14:40:25.104485  1 10 operator==() begin _json_buffer=<{
    "name" : "version alias 2", 
    "assigned" : "Tue Dec 29 18:19:25 2015"
}>
09-16 14:40:25.104492  1 10 operator==() args  other.__json_buffer=<{
    "name" : "version alias 2", 
    "assigned" : "Tue Dec 29 18:19:25 2015"
}>
Running test:<appendChild>
<end of output>
Test time =   0.23 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_appendChild_301_t" end time: Sep 16 14:40 CDT
"JSONDocument_appendChild_301_t" time elapsed: 00:00:00
----------------------------------------------------------

20/65 Testing: JSONDocumentBuilder_markDeleted_009_t
20/65 Test: JSONDocumentBuilder_markDeleted_009_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/JSONDocumentBuilder_markDeleted_009_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/test009.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test009.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test009/JSONDocumentBuilder_markDeleted_009_t.d
"JSONDocumentBuilder_markDeleted_009_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.048858  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.048976  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.050580  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.050596  1  5 findChild() args  path=<operation>
09-16 14:40:25.055637  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.059894  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.060028  1  5 findChild() found child value=std::string(markDeleted)
09-16 14:40:25.060302  1  5 findChild() resultDocument=<{
"operation" : "markDeleted"
}>
09-16 14:40:25.060311  1  5 findChild() Find succeeded.
09-16 14:40:25.063526  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.063540  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.064115  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.064376  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.064394  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.064521  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.064530  1  5 findChild() Find succeeded.
09-16 14:40:25.067248  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.067259  1  5 findChild() args  path=<end-state>
09-16 14:40:25.067797  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.068043  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.068060  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.068175  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.068184  1  5 findChild() Find succeeded.
09-16 14:40:25.070755  1  5 findChild() begin _json_buffer=<{
    "operation" : "markDeleted", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.070766  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.071277  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.071520  1  5 findChild() recurse() args currentView=<{
"operation" : "markDeleted",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.071570  1  5 findChild() found child value=int(1)
09-16 14:40:25.071686  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.071695  1  5 findChild() Find succeeded.
09-16 14:40:25.073772  1  7 markDeleted()
09-16 14:40:25.073867  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.073881  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isdeleted" : true
    }
}>
09-16 14:40:25.073887  1  4 replaceChild() args  path=<bookkeeping.isdeleted>
09-16 14:40:25.077851  1  4 replaceChild() new child value=bool(true)
09-16 14:40:25.077871  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.080466  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.080484  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.080860  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.080909  1  4 replaceChild() found child value=bool(false)
09-16 14:40:25.082762  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.082907  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.082917  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.083101  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.083112  1 13 appendChild() args  child=<{
    "payload" : {
        "markDeleted" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.083118  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:40:25.083405  1  4 appendChild() new child value=object(...)
09-16 14:40:25.083419  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.083427  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:40:25.086063  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.087866  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.087880  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.088240  1  5 findChild() recurse() args currentView=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.088265  1  5 findChild() found child value=array(...)
09-16 14:40:25.088535  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.088546  1  5 findChild() Find succeeded.
09-16 14:40:25.089431  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.089542  1  3 appendChild() newChild=<{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.089599  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.089610  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.089617  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.089623  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:40:25.093063  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.093075  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.094770  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.094784  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.095112  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.095160  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.096975  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.097233  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.097243  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.097393  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.097408  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isreadonly" : true
    }
}>
09-16 14:40:25.097414  1  4 replaceChild() args  path=<bookkeeping.isreadonly>
09-16 14:40:25.100257  1  4 replaceChild() new child value=bool(true)
09-16 14:40:25.100268  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.102106  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.102122  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.102532  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.102549  1  4 replaceChild() found child value=bool(false)
09-16 14:40:25.104279  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.104385  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.104399  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.104542  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.104551  1 13 appendChild() args  child=<{
    "payload" : {
        "markReadonly" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.104557  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:40:25.104796  1  4 appendChild() new child value=object(...)
09-16 14:40:25.104806  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.104813  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:40:25.107058  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.108116  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.108128  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.108378  1  5 findChild() recurse() args currentView=<{
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.108392  1  5 findChild() found child value=array(...)
09-16 14:40:25.108591  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.108598  1  5 findChild() Find succeeded.
09-16 14:40:25.109164  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.109234  1  3 appendChild() newChild=<{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.109275  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.109281  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.109286  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markDeleted" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.109289  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:40:25.110939  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.110948  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.111968  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.111980  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.112230  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.112247  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.113307  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.113510  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.113517  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.113607  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : true,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markDeleted" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.113616  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : true, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markDeleted" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markReadonly" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.116699  1 10 matches() JSON buffers are equal.
Running test:<markDeleted>
<end of output>
Test time =   0.23 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_markDeleted_009_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_markDeleted_009_t" time elapsed: 00:00:00
----------------------------------------------------------

43/65 Testing: Convert_Fhicl2DBJson_001_t
43/65 Test: Convert_Fhicl2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/Convert_Fhicl2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/test001.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/test001.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.fcl" "-c" "test001.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test001/Convert_Fhicl2DBJson_001_t.d
"Convert_Fhicl2DBJson_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.032616  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:40:25.032715  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:40:25.032733  1  0 artdaq::database::fhicljson trace_enable
09-16 14:40:25.032750  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:40:25.034123  1  2 fhicl_to_json: begin
09-16 14:40:25.034439  1  2 fhicl_to_json: Created root nodes
09-16 14:40:25.034533  1  2 read_comments begin
09-16 14:40:25.040411  1  2 read_comments end result=1
09-16 14:40:25.040440  1  2 read_data begin
09-16 14:40:25.040459  1  2 read_data() begin
09-16 14:40:25.082265  1  2 parse_document() returned 6 entries.
09-16 14:40:25.082463  1  2 fcl2jsondb() key=<services>
09-16 14:40:25.082552  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:40:25.082648  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.082706  1  2 fcl2jsondb() key=<scheduler>
09-16 14:40:25.082722  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:40:25.082745  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.082775  1  2 fcl2jsondb() key=<fileMode>
09-16 14:40:25.082782  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:40:25.082807  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.082903  1  2 fcl2jsondb() key=<user>
09-16 14:40:25.082934  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:40:25.082960  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.082998  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:40:25.083020  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:40:25.083042  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.083074  1  2 fcl2jsondb() key=<service_provider>
09-16 14:40:25.083082  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:40:25.083106  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.083141  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:40:25.083149  1  2 fcl2jsondb() value=<6>
09-16 14:40:25.083174  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.085192  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:25.085202  1  2 fcl2jsondb() value=<8>
09-16 14:40:25.085233  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.087167  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:25.087177  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:40:25.087206  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.089282  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:40:25.089292  1  2 fcl2jsondb() value=<1>
09-16 14:40:25.089410  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.091481  1  2 fcl2jsondb() key=<daq>
09-16 14:40:25.091534  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:40:25.091561  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.091599  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:25.091606  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:40:25.091629  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.093570  1  2 fcl2jsondb() key=<event_builder>
09-16 14:40:25.093597  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:40:25.093623  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.093659  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:25.093668  1  2 fcl2jsondb() value=<16>
09-16 14:40:25.093695  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.095611  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:40:25.095621  1  2 fcl2jsondb() value=<0>
09-16 14:40:25.095649  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.097556  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:40:25.097566  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.097595  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.099532  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:40:25.099542  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.099572  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.101545  1  2 fcl2jsondb() key=<use_art>
09-16 14:40:25.101555  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.101584  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.101670  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:40:25.101679  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.101704  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.101740  1  2 fcl2jsondb() key=<verbose>
09-16 14:40:25.101747  1  2 fcl2jsondb() value=<false>
09-16 14:40:25.101773  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.101858  1  2 fcl2jsondb() key=<metrics>
09-16 14:40:25.101889  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:40:25.101915  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.101950  1  2 fcl2jsondb() key=<evbFile>
09-16 14:40:25.101968  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:40:25.101989  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.102019  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:40:25.102026  1  2 fcl2jsondb() value=<"file">
09-16 14:40:25.102052  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.102086  1  2 fcl2jsondb() key=<level>
09-16 14:40:25.102094  1  2 fcl2jsondb() value=<3>
09-16 14:40:25.102119  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.104004  1  2 fcl2jsondb() key=<fileName>
09-16 14:40:25.104013  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:40:25.104125  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.104163  1  2 fcl2jsondb() key=<uniquify>
09-16 14:40:25.104171  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.104281  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.104471  1  2 fcl2jsondb() key=<outputs>
09-16 14:40:25.104535  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:40:25.104561  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.104597  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:40:25.104624  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:40:25.104649  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.104681  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.104689  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:40:25.104714  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.104753  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:40:25.104772  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:40:25.104897  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.104933  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:40:25.104946  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:40:25.105063  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.105253  1  2 fcl2jsondb() key=<physics>
09-16 14:40:25.105308  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:40:25.105334  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.105376  1  2 fcl2jsondb() key=<filters>
09-16 14:40:25.105409  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:40:25.105435  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.105468  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:40:25.105484  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:40:25.105601  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.105633  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.105640  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:40:25.105764  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.105800  1  2 fcl2jsondb() key=<nth>
09-16 14:40:25.105808  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.105929  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.107695  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:40:25.107717  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:40:25.107743  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.107771  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.107778  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:40:25.107801  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.107832  1  2 fcl2jsondb() key=<nth>
09-16 14:40:25.107839  1  2 fcl2jsondb() value=<3>
09-16 14:40:25.107957  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.108787  1  2 fcl2jsondb() key=<pmod2>
09-16 14:40:25.108799  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:40:25.108877  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.108916  1  2 fcl2jsondb() key=<pmod3>
09-16 14:40:25.108924  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:40:25.108997  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.109032  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:40:25.109040  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:40:25.109055  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.109114  1  2 fcl2jsondb() key=<source>
09-16 14:40:25.109126  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:40:25.109139  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.109155  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.109159  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:40:25.109231  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.109254  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:40:25.109259  1  2 fcl2jsondb() value=<900>
09-16 14:40:25.109331  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.110081  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:40:25.110087  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.110216  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.110252  1  2 fcl2jsondb() key=<process_name>
09-16 14:40:25.110256  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:40:25.110270  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.110285  1  2 read_data() end
09-16 14:40:25.110310  1  2 read_data end result=1
09-16 14:40:25.110315  1  2 fhicl_to_json: write() begin
09-16 14:40:25.121687  1  2 fhicl_to_json: write() end
09-16 14:40:25.121699  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.23 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_001_t" end time: Sep 16 14:40 CDT
"Convert_Fhicl2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

28/65 Testing: Convert_DBJson2GUIJson_002_t
28/65 Test: Convert_DBJson2GUIJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_002_t.d
"Convert_DBJson2GUIJson_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.264034  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:25.266416  1 10 json_db_to_gui() begin
09-16 14:40:25.284605  1 10 json_db_to_gui() read dbAST
09-16 14:40:25.284841  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284909  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.284966  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.285029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.285125  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285185  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:25.285232  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:25.285254  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285312  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:25.285337  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285367  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.285390  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.285469  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.285541  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285603  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.285625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285745  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285768  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.285790  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.285811  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.285840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285863  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:40:25.285887  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:40:25.285906  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286126  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:40:25.286154  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.286176  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.286196  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.286222  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.286249  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286280  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.286288  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286321  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.286330  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.286338  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.286345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.286362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286371  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:40:25.286380  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:40:25.286388  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286419  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:40:25.286430  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.286437  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.286444  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.286458  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.286473  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286489  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.286496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286544  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.286551  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286568  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.286575  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286606  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:40:25.286617  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:40:25.286624  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286651  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:40:25.286660  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.286667  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.286676  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.286689  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.286702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286718  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.286725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286739  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286754  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.286761  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286776  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.286783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286794  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:40:25.286805  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:40:25.286813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286836  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:40:25.286846  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.286853  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.286861  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.286873  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.286887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286902  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.286909  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286924  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286938  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.286945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286960  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.286967  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286979  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:25.286989  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:25.286997  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287021  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:25.287030  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.287037  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.287045  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.287058  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.287072  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287088  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.287095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287124  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.287132  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287147  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.287154  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287165  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:40:25.287176  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:40:25.287184  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287208  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:40:25.287217  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.287225  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.287233  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.287246  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.287259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287275  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.287282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287296  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287323  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.287330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287346  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.287353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287365  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:40:25.287375  1 13 json_db_to_gui() child args name <use_art>
09-16 14:40:25.287383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287412  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:40:25.287423  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.287430  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.287438  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.287451  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.287465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287480  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.287488  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287516  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.287524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287538  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.287545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287557  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:40:25.287567  1 13 json_db_to_gui() child args name <verbose>
09-16 14:40:25.287576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287599  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:40:25.287609  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.287616  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.287624  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.287638  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.287651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287667  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.287674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287688  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287702  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.287710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287724  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.287731  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287751  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.287758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287769  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:25.287779  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:25.287787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287811  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:25.287820  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.287827  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.287835  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.287848  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.287862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287877  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.287884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287898  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.287913  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.287920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287935  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.287942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287954  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:40:25.287964  1 13 json_db_to_gui() child args name <metrics>
09-16 14:40:25.287972  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.287995  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:40:25.288004  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.288011  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.288019  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.288033  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.288046  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288061  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.288068  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288082  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288098  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.288106  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.288113  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.288122  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.288138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288146  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:40:25.288155  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:40:25.288163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288186  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:40:25.288195  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.288202  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.288209  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.288222  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.288236  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288251  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.288259  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288273  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288289  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.288296  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.288303  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.288311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.288328  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288335  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:40:25.288344  1 13 json_db_to_gui() child args name <fileName>
09-16 14:40:25.288352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288376  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:40:25.288386  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.288393  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.288405  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.288419  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.288433  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288449  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.288456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288495  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.288502  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288518  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.288525  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288537  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:40:25.288547  1 13 json_db_to_gui() child args name <level>
09-16 14:40:25.288555  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288579  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:40:25.288588  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.288596  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.288604  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.288617  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.288631  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288646  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.288654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288668  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288683  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.288690  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288704  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.288711  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288723  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:40:25.288733  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:40:25.288740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288765  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:40:25.288774  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.288781  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.288789  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.288802  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.288816  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288832  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.288839  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288853  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.288868  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.288875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288890  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.288897  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288908  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:40:25.288919  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:40:25.288927  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.288951  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:40:25.288961  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.288968  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.288976  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.288989  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.289003  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.289019  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.289026  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289040  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.289055  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.289062  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289077  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.289084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289099  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.289106  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289120  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.289127  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289141  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.289148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289159  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:40:25.289169  1 13 json_db_to_gui() child args name <outputs>
09-16 14:40:25.289177  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289187  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:40:25.289196  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.289204  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.289212  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.289225  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.289238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.289254  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.289261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.289291  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.289299  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.289306  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.289313  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.289330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289338  1 11 json_db_to_gui() operator() switch OBJECT child name=<rootMPIOutput>
09-16 14:40:25.289348  1 13 json_db_to_gui() child args name <rootMPIOutput>
09-16 14:40:25.289356  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289379  1 13 json_db_to_gui() metadata node was found, name=<rootMPIOutput>
09-16 14:40:25.289388  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.289399  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.289408  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.289422  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.289436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.289468  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.289490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.289550  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.289571  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.289590  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.289609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.289637  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289660  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:40:25.289684  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:40:25.289705  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289749  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:40:25.289773  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.289794  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.289814  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.289840  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.289868  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.289899  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.289920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.289948  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.289979  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.290001  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.290022  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.290042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.290072  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.290094  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:40:25.290118  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:40:25.290139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.290182  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:40:25.290206  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.290227  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.290246  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.290272  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.290300  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.290331  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.290353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.290384  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.290458  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.290490  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.290512  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.290533  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.290572  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.290594  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.290624  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.290646  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.290673  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.290741  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:40:25.290785  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.290816  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.290837  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.290862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.290909  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:40:25.290933  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.290955  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.290976  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.290997  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.291025  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.291047  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291077  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.291110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291136  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:25.291159  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:25.291178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291220  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:25.291246  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.291269  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.291290  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.291318  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.291346  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.291376  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.291404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291446  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.291478  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.291500  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291530  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.291552  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291581  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.291605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291634  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.291656  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291688  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:40:25.291712  1 13 json_db_to_gui() child args name <physics>
09-16 14:40:25.291732  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291758  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:40:25.291783  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.291803  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.291823  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.291859  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.291888  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.291918  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.291941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.291971  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.292004  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.292027  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.292048  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.292068  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.292101  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.292126  1 11 json_db_to_gui() operator() switch OBJECT child name=<analyzers>
09-16 14:40:25.292151  1 13 json_db_to_gui() child args name <analyzers>
09-16 14:40:25.292174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.292222  1 13 json_db_to_gui() metadata node was found, name=<analyzers>
09-16 14:40:25.292248  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.292269  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.292293  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.292322  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.292355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.292389  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.292417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.292452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.292487  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.292512  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.292534  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.292559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.292593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.292621  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.292643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.292671  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:40:25.292697  1 13 json_db_to_gui() child args name <filters>
09-16 14:40:25.292719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.292764  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:40:25.292789  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.292809  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.292828  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.292853  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.292881  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.292913  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.292935  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.292962  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.292992  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.293014  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.293036  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.293057  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.293087  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293144  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:40:25.293157  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:40:25.293163  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293194  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:40:25.293205  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.293212  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.293219  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.293232  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.293245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.293260  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.293267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.293298  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.293307  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.293315  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.293323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.293340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293348  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:25.293358  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:25.293366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293403  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:25.293414  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.293421  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.293428  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.293441  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.293455  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.293472  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.293481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293496  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.293514  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.293521  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293537  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.293545  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293557  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:40:25.293585  1 13 json_db_to_gui() child args name <nth>
09-16 14:40:25.293594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293626  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:40:25.293636  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.293644  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.293651  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.293663  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.293677  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.293691  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.293698  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293713  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.293727  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.293735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293751  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.293760  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293775  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.293783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293795  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:40:25.293805  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:40:25.293813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293842  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:40:25.293852  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.293859  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.293867  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.293879  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.293892  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.293909  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.293918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.293949  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.293957  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.293965  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.293972  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.293990  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.293999  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:25.294010  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:25.294018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294049  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:25.294059  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294066  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.294073  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.294085  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.294099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.294114  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.294121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294135  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.294148  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.294155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294170  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.294178  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294189  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:40:25.294198  1 13 json_db_to_gui() child args name <nth>
09-16 14:40:25.294205  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294233  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:40:25.294243  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294250  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.294257  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.294269  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.294282  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.294299  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.294307  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294322  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.294335  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.294343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294358  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.294366  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294380  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.294388  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294406  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.294413  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294425  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:40:25.294435  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:40:25.294442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294471  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:40:25.294482  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294490  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.294497  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.294510  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.294524  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.294538  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.294546  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.294575  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294583  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.294591  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.294598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.294619  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294629  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.294637  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.294644  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.294654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.294666  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:40:25.294676  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294684  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.294691  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.294700  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.294717  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.294725  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294738  1 11 json_db_to_gui() operator() switch OBJECT child name=<p1>
09-16 14:40:25.294749  1 13 json_db_to_gui() child args name <p1>
09-16 14:40:25.294756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294786  1 13 json_db_to_gui() metadata node was found, name=<p1>
09-16 14:40:25.294798  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294806  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.294813  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.294826  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.294840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.294856  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.294864  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.294880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.294897  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294906  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.294915  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.294922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.294942  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.294951  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.294959  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.294966  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.294977  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.294991  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.294999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295013  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:40:25.295024  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:40:25.295031  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295061  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:40:25.295073  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295081  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.295089  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.295102  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.295117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.295133  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.295142  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.295175  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295184  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.295192  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.295199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.295219  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295229  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.295238  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.295245  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.295255  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.295267  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:25.295276  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295284  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.295291  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.295299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.295316  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.295324  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295337  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:40:25.295347  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:40:25.295355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295384  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:40:25.295399  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295408  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.295416  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.295428  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.295443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.295460  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.295468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.295499  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295507  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.295515  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.295522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.295541  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295550  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.295558  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.295566  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.295577  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.295588  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:25.295597  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295605  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.295612  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.295620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.295635  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.295643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295655  1 11 json_db_to_gui() operator() switch OBJECT child name=<producers>
09-16 14:40:25.295665  1 13 json_db_to_gui() child args name <producers>
09-16 14:40:25.295672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295703  1 13 json_db_to_gui() metadata node was found, name=<producers>
09-16 14:40:25.295714  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295722  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.295730  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.295743  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.295757  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.295774  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.295783  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295798  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.295815  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295824  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.295832  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.295839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.295856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295870  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.295879  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295895  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.295903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295916  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:40:25.295926  1 13 json_db_to_gui() child args name <process_name>
09-16 14:40:25.295933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.295944  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:40:25.295954  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.295962  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.295970  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.295982  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.295996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296011  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.296019  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296048  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.296056  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296072  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.296081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296094  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:40:25.296103  1 13 json_db_to_gui() child args name <services>
09-16 14:40:25.296110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296120  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:40:25.296129  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.296136  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.296144  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.296156  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.296170  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296185  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.296193  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296209  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296225  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.296234  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.296242  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.296249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.296265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296274  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:40:25.296284  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:40:25.296291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296321  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:40:25.296333  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.296340  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.296347  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.296360  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.296374  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296390  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.296402  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296417  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296433  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.296442  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.296450  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.296458  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.296475  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296484  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:40:25.296494  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:40:25.296501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296531  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:40:25.296542  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.296549  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.296556  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.296570  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.296586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296602  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.296610  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296644  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.296653  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296670  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.296678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296691  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:40:25.296701  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:40:25.296709  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296739  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:40:25.296751  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.296759  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.296767  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.296780  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.296795  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296810  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.296818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296834  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.296850  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.296859  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296875  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.296883  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296895  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:25.296905  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:25.296913  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.296944  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:25.296956  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.296964  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.296971  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.296985  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.296999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297016  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.297024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297039  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297054  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.297061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297075  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.297083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297095  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:25.297105  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:25.297112  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297141  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:25.297152  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.297160  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.297167  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.297178  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.297191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297205  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.297214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297228  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297242  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.297248  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297262  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.297270  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297283  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:40:25.297292  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:40:25.297299  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297330  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:40:25.297341  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.297349  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.297356  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.297369  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.297382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297402  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.297411  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297427  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297444  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.297452  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297466  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.297474  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297490  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.297497  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297509  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:40:25.297519  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:40:25.297526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297556  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:40:25.297566  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.297574  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.297581  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.297593  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.297607  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297623  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.297630  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297658  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.297666  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.297675  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.297683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.297702  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297711  1 11 json_db_to_gui() operator() switch OBJECT child name=<errorOnFailureToPut>
09-16 14:40:25.297721  1 13 json_db_to_gui() child args name <errorOnFailureToPut>
09-16 14:40:25.297729  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297760  1 13 json_db_to_gui() metadata node was found, name=<errorOnFailureToPut>
09-16 14:40:25.297771  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.297778  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.297786  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.297799  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.297813  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297829  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.297837  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.297867  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.297875  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297889  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.297896  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297908  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:40:25.297918  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:40:25.297926  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.297957  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:40:25.297968  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.297976  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.297983  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.297996  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.298010  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.298025  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.298034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298048  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.298063  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.298070  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298093  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.298108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298134  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.298148  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298171  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.298186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298209  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:40:25.298226  1 13 json_db_to_gui() child args name <source>
09-16 14:40:25.298238  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298256  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:40:25.298272  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.298284  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.298297  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.298319  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.298343  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.298369  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.298383  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298414  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.298444  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.298458  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.298472  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.298484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.298514  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298530  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_type_map>
09-16 14:40:25.298546  1 13 json_db_to_gui() child args name <fragment_type_map>
09-16 14:40:25.298561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298606  1 13 json_db_to_gui() metadata node was found, name=<fragment_type_map>
09-16 14:40:25.298624  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.298638  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.298651  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.298672  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.298707  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.298734  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.298750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.298778  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.298805  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.298821  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.298836  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.298850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.298884  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.298902  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.298915  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.298928  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.298946  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.298976  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:25.298993  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299007  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.299015  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299024  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.299039  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:25.299049  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299058  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.299065  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299072  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.299085  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:25.299095  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299102  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.299109  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299117  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.299130  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:25.299138  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299145  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.299152  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299159  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.299172  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:25.299181  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299188  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.299196  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299203  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.299215  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:25.299224  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299231  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.299238  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.299261  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.299268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299281  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:25.299291  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:25.299298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299327  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:25.299336  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299344  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.299351  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299364  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.299377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.299391  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.299404  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.299434  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.299462  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299480  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.299487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299499  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:40:25.299509  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:40:25.299516  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299545  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:40:25.299555  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299562  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.299571  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299584  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.299597  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.299611  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.299618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299632  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.299647  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.299654  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299668  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.299676  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299687  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:40:25.299697  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:40:25.299704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299731  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:40:25.299741  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.299748  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.299755  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.299766  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.299777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.299790  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.299797  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.299826  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.299833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299846  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.299852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299866  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.299872  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.299955  1 10 json_db_to_gui() created gui_node
09-16 14:40:25.315389  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_002_t" end time: Sep 16 14:40 CDT
"Convert_DBJson2GUIJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

38/65 Testing: RoundConvert_DBJson2GUIJson_002_t
38/65 Test: RoundConvert_DBJson2GUIJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_002_t.d
"RoundConvert_DBJson2GUIJson_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.260428  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:25.262372  1 10 json_db_to_gui() begin
09-16 14:40:25.276917  1 10 json_db_to_gui() read dbAST
09-16 14:40:25.277138  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.277198  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.277243  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.277292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.277382  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.277421  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:25.277455  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:25.277463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.277509  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:25.277520  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.277537  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.277546  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.277608  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.277667  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.277716  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.277724  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.277756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.277817  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.277826  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.277833  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.277840  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.277856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.277864  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:40:25.277874  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:40:25.277880  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278051  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:40:25.278063  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.278070  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.278077  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.278088  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.278102  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278117  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.278124  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278138  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278154  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.278161  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.278168  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.278174  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.278190  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278198  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:40:25.278207  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:40:25.278213  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278244  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:40:25.278254  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.278261  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.278267  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.278279  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.278293  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278309  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.278316  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278330  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278368  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.278377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278397  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.278405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278443  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_fragment_receiver_rank>
09-16 14:40:25.278455  1 13 json_db_to_gui() child args name <first_fragment_receiver_rank>
09-16 14:40:25.278461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278491  1 13 json_db_to_gui() metadata node was found, name=<first_fragment_receiver_rank>
09-16 14:40:25.278502  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.278509  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.278516  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.278527  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.278539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278553  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.278559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278571  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278585  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.278591  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278603  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.278609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278620  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver_count>
09-16 14:40:25.278628  1 13 json_db_to_gui() child args name <fragment_receiver_count>
09-16 14:40:25.278634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278662  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver_count>
09-16 14:40:25.278670  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.278677  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.278683  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.278693  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.278704  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278717  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.278723  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278735  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278749  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.278755  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278769  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.278777  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278788  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:25.278797  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:25.278804  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278832  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:25.278842  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.278849  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.278856  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.278868  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.278881  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278896  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.278903  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278917  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.278932  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.278938  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278953  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.278960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.278972  1 11 json_db_to_gui() operator() switch OBJECT child name=<print_event_store_stats>
09-16 14:40:25.278981  1 13 json_db_to_gui() child args name <print_event_store_stats>
09-16 14:40:25.278987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279016  1 13 json_db_to_gui() metadata node was found, name=<print_event_store_stats>
09-16 14:40:25.279026  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.279033  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.279040  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.279051  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.279064  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279079  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.279085  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279098  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279128  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.279136  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279152  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.279159  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279171  1 11 json_db_to_gui() operator() switch OBJECT child name=<use_art>
09-16 14:40:25.279180  1 13 json_db_to_gui() child args name <use_art>
09-16 14:40:25.279186  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279215  1 13 json_db_to_gui() metadata node was found, name=<use_art>
09-16 14:40:25.279225  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.279232  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.279238  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.279249  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.279261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279277  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.279284  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279312  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.279320  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279334  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.279340  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279352  1 11 json_db_to_gui() operator() switch OBJECT child name=<verbose>
09-16 14:40:25.279362  1 13 json_db_to_gui() child args name <verbose>
09-16 14:40:25.279368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279400  1 13 json_db_to_gui() metadata node was found, name=<verbose>
09-16 14:40:25.279411  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.279418  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.279425  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.279437  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.279450  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279464  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.279470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279484  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279500  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.279507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279521  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.279528  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279549  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.279556  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279568  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:25.279577  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:25.279583  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279611  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:25.279621  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.279628  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.279635  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.279646  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.279658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279673  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.279681  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279695  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279709  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.279716  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279731  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.279737  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279749  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:40:25.279758  1 13 json_db_to_gui() child args name <metrics>
09-16 14:40:25.279765  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279793  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:40:25.279802  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.279809  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.279816  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.279828  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.279841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279854  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.279861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.279892  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.279899  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.279907  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.279914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.279931  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279939  1 11 json_db_to_gui() operator() switch OBJECT child name=<evbFile>
09-16 14:40:25.279948  1 13 json_db_to_gui() child args name <evbFile>
09-16 14:40:25.279955  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.279985  1 13 json_db_to_gui() metadata node was found, name=<evbFile>
09-16 14:40:25.279995  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.280003  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.280009  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.280021  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.280034  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280048  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.280055  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280069  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280085  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.280092  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.280099  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.280105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.280121  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280129  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileName>
09-16 14:40:25.280138  1 13 json_db_to_gui() child args name <fileName>
09-16 14:40:25.280145  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280174  1 13 json_db_to_gui() metadata node was found, name=<fileName>
09-16 14:40:25.280184  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.280191  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.280197  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.280208  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.280220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280233  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.280240  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280253  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280279  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.280287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280301  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.280308  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280320  1 11 json_db_to_gui() operator() switch OBJECT child name=<level>
09-16 14:40:25.280329  1 13 json_db_to_gui() child args name <level>
09-16 14:40:25.280336  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280366  1 13 json_db_to_gui() metadata node was found, name=<level>
09-16 14:40:25.280375  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.280382  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.280389  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.280406  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.280420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280435  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.280443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280470  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.280477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280492  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.280499  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280510  1 11 json_db_to_gui() operator() switch OBJECT child name=<metricPluginType>
09-16 14:40:25.280520  1 13 json_db_to_gui() child args name <metricPluginType>
09-16 14:40:25.280527  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280556  1 13 json_db_to_gui() metadata node was found, name=<metricPluginType>
09-16 14:40:25.280566  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.280573  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.280579  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.280591  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.280603  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280617  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.280625  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280654  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.280661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280676  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.280682  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280694  1 11 json_db_to_gui() operator() switch OBJECT child name=<uniquify>
09-16 14:40:25.280704  1 13 json_db_to_gui() child args name <uniquify>
09-16 14:40:25.280710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280739  1 13 json_db_to_gui() metadata node was found, name=<uniquify>
09-16 14:40:25.280749  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.280756  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.280763  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.280775  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.280788  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280802  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.280808  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280821  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.280834  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.280841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280854  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.280861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280874  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.280881  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280893  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.280900  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280912  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.280918  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280928  1 11 json_db_to_gui() operator() switch OBJECT child name=<outputs>
09-16 14:40:25.280937  1 13 json_db_to_gui() child args name <outputs>
09-16 14:40:25.280943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.280951  1 13 json_db_to_gui() metadata node was found, name=<outputs>
09-16 14:40:25.280959  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.280965  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.280971  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.280982  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.280994  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.281009  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.281016  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281030  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.281046  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281054  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.281061  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.281067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.281083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281091  1 11 json_db_to_gui() operator() switch OBJECT child name=<netMonOutput>
09-16 14:40:25.281101  1 13 json_db_to_gui() child args name <netMonOutput>
09-16 14:40:25.281107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281134  1 13 json_db_to_gui() metadata node was found, name=<netMonOutput>
09-16 14:40:25.281144  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281151  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.281157  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.281169  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.281182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.281197  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.281204  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281219  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.281234  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281241  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.281248  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.281255  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.281271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281278  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:40:25.281288  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:40:25.281294  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281322  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:40:25.281332  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281339  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.281346  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.281358  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.281371  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.281386  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.281393  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281413  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.281428  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281436  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.281443  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.281449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.281465  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281473  1 11 json_db_to_gui() operator() switch OBJECT child name=<SelectEvents>
09-16 14:40:25.281482  1 13 json_db_to_gui() child args name <SelectEvents>
09-16 14:40:25.281489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281518  1 13 json_db_to_gui() metadata node was found, name=<SelectEvents>
09-16 14:40:25.281528  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281535  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.281541  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.281553  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.281566  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.281582  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.281589  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.281661  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281678  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.281686  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.281693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.281718  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281727  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.281743  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.281750  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.281762  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.281818  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:40:25.281850  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281867  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.281874  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.281883  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.281915  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:40:25.281923  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.281930  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.281935  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.281942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.281954  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.281960  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281975  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.281981  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.281991  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:25.281999  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:25.282005  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282034  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:25.282043  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282049  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.282055  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.282066  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.282078  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282090  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.282096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282108  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282121  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.282127  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282140  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.282146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282158  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.282164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282176  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.282182  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282192  1 11 json_db_to_gui() operator() switch OBJECT child name=<physics>
09-16 14:40:25.282200  1 13 json_db_to_gui() child args name <physics>
09-16 14:40:25.282205  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282214  1 13 json_db_to_gui() metadata node was found, name=<physics>
09-16 14:40:25.282222  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282228  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.282234  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.282244  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.282255  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282268  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.282274  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282287  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282302  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282309  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.282316  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.282323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.282338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282346  1 11 json_db_to_gui() operator() switch OBJECT child name=<filters>
09-16 14:40:25.282355  1 13 json_db_to_gui() child args name <filters>
09-16 14:40:25.282362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282390  1 13 json_db_to_gui() metadata node was found, name=<filters>
09-16 14:40:25.282405  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282412  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.282419  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.282430  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.282442  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282456  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.282463  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282492  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282500  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.282506  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.282512  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.282526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282533  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod2>
09-16 14:40:25.282541  1 13 json_db_to_gui() child args name <prescaleMod2>
09-16 14:40:25.282547  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282575  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod2>
09-16 14:40:25.282584  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282590  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.282596  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.282607  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.282619  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282632  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.282639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282651  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282664  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282671  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.282677  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.282683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.282697  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282704  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:25.282713  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:25.282719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282748  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:25.282756  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282762  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.282768  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.282779  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.282790  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282804  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.282810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282835  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.282841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282854  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.282861  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282871  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:40:25.282880  1 13 json_db_to_gui() child args name <nth>
09-16 14:40:25.282885  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282914  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:40:25.282922  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.282928  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.282934  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.282945  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.282957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.282969  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.282975  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.282987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283000  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.283006  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283021  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.283027  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283042  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.283049  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283060  1 11 json_db_to_gui() operator() switch OBJECT child name=<prescaleMod3>
09-16 14:40:25.283069  1 13 json_db_to_gui() child args name <prescaleMod3>
09-16 14:40:25.283076  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283104  1 13 json_db_to_gui() metadata node was found, name=<prescaleMod3>
09-16 14:40:25.283114  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.283121  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.283128  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.283139  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.283152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283167  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.283174  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283203  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.283211  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.283218  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.283225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.283241  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283248  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:25.283257  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:25.283264  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283293  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:25.283303  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.283310  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.283317  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.283328  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.283341  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283355  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.283362  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283376  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283390  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.283401  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283416  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.283423  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283434  1 11 json_db_to_gui() operator() switch OBJECT child name=<nth>
09-16 14:40:25.283443  1 13 json_db_to_gui() child args name <nth>
09-16 14:40:25.283449  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283478  1 13 json_db_to_gui() metadata node was found, name=<nth>
09-16 14:40:25.283489  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.283495  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.283502  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.283514  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.283527  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283542  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.283548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283578  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.283585  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283600  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.283606  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283621  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.283627  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283641  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.283648  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283658  1 11 json_db_to_gui() operator() switch OBJECT child name=<my_output_modules>
09-16 14:40:25.283668  1 13 json_db_to_gui() child args name <my_output_modules>
09-16 14:40:25.283674  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283701  1 13 json_db_to_gui() metadata node was found, name=<my_output_modules>
09-16 14:40:25.283711  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.283718  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.283725  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.283737  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.283750  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283764  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.283772  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283784  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.283799  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.283807  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.283814  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.283820  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.283839  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.283847  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.283854  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.283860  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.283869  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.283880  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(netMonOutput)
09-16 14:40:25.283889  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.283895  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.283901  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.283908  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.283923  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.283929  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283942  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod2>
09-16 14:40:25.283951  1 13 json_db_to_gui() child args name <pmod2>
09-16 14:40:25.283957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.283985  1 13 json_db_to_gui() metadata node was found, name=<pmod2>
09-16 14:40:25.283995  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284001  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.284008  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284019  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.284032  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284047  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.284053  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284081  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284088  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.284095  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.284101  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.284119  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284127  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.284134  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.284141  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284149  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.284159  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:25.284167  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284174  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.284181  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284187  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.284202  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.284208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284219  1 11 json_db_to_gui() operator() switch OBJECT child name=<pmod3>
09-16 14:40:25.284229  1 13 json_db_to_gui() child args name <pmod3>
09-16 14:40:25.284235  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284265  1 13 json_db_to_gui() metadata node was found, name=<pmod3>
09-16 14:40:25.284275  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284281  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.284288  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284299  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.284312  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284330  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.284338  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284353  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284366  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284374  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.284380  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:25.284387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.284408  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284415  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:25.284422  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:25.284428  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.284445  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:25.284453  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284459  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:25.284465  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284472  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:25.284484  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.284491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284505  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.284511  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284521  1 11 json_db_to_gui() operator() switch OBJECT child name=<process_name>
09-16 14:40:25.284529  1 13 json_db_to_gui() child args name <process_name>
09-16 14:40:25.284535  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284544  1 13 json_db_to_gui() metadata node was found, name=<process_name>
09-16 14:40:25.284551  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284557  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.284563  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284574  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.284586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284598  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.284605  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284618  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284632  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.284638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284651  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.284658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284669  1 11 json_db_to_gui() operator() switch OBJECT child name=<services>
09-16 14:40:25.284677  1 13 json_db_to_gui() child args name <services>
09-16 14:40:25.284683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284691  1 13 json_db_to_gui() metadata node was found, name=<services>
09-16 14:40:25.284698  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284704  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.284711  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284722  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.284733  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284746  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.284752  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284764  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284777  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284783  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.284789  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.284795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.284810  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284817  1 11 json_db_to_gui() operator() switch OBJECT child name=<scheduler>
09-16 14:40:25.284825  1 13 json_db_to_gui() child args name <scheduler>
09-16 14:40:25.284830  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284858  1 13 json_db_to_gui() metadata node was found, name=<scheduler>
09-16 14:40:25.284868  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284874  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.284880  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.284891  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.284902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284916  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.284923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284937  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.284951  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.284957  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.284963  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.284969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.284985  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.284993  1 11 json_db_to_gui() operator() switch OBJECT child name=<fileMode>
09-16 14:40:25.285001  1 13 json_db_to_gui() child args name <fileMode>
09-16 14:40:25.285007  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285034  1 13 json_db_to_gui() metadata node was found, name=<fileMode>
09-16 14:40:25.285043  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285050  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.285057  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.285068  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.285080  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285093  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.285099  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285111  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285124  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.285131  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285145  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.285151  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285165  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.285171  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285181  1 11 json_db_to_gui() operator() switch OBJECT child name=<user>
09-16 14:40:25.285190  1 13 json_db_to_gui() child args name <user>
09-16 14:40:25.285197  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285224  1 13 json_db_to_gui() metadata node was found, name=<user>
09-16 14:40:25.285233  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285240  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.285246  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.285258  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.285271  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285285  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.285291  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285303  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285318  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285325  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.285332  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.285338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.285355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285362  1 11 json_db_to_gui() operator() switch OBJECT child name=<NetMonTransportServiceInterface>
09-16 14:40:25.285372  1 13 json_db_to_gui() child args name <NetMonTransportServiceInterface>
09-16 14:40:25.285378  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285413  1 13 json_db_to_gui() metadata node was found, name=<NetMonTransportServiceInterface>
09-16 14:40:25.285423  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285429  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.285435  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.285446  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.285458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285470  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.285477  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285491  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285506  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285513  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.285519  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.285525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.285539  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285547  1 11 json_db_to_gui() operator() switch OBJECT child name=<data_receiver_count>
09-16 14:40:25.285556  1 13 json_db_to_gui() child args name <data_receiver_count>
09-16 14:40:25.285562  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285589  1 13 json_db_to_gui() metadata node was found, name=<data_receiver_count>
09-16 14:40:25.285598  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285605  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.285611  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.285624  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.285638  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285652  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.285659  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285672  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285687  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.285694  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285707  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.285714  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285725  1 11 json_db_to_gui() operator() switch OBJECT child name=<first_data_receiver_rank>
09-16 14:40:25.285734  1 13 json_db_to_gui() child args name <first_data_receiver_rank>
09-16 14:40:25.285740  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285769  1 13 json_db_to_gui() metadata node was found, name=<first_data_receiver_rank>
09-16 14:40:25.285779  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285786  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.285793  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.285805  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.285819  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285834  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.285841  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285858  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.285874  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.285882  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285898  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.285905  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285917  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:25.285927  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:25.285934  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.285962  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:25.285972  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.285978  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.285984  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.285995  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.286008  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286022  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.286028  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286041  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286054  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.286061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286074  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.286081  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286092  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:25.286101  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:25.286107  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286135  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:25.286145  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.286152  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.286159  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.286171  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.286185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286200  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.286207  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.286238  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.286245  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.286260  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.286267  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345256  1 11 json_db_to_gui() operator() switch OBJECT child name=<service_provider>
09-16 14:40:25.345272  1 13 json_db_to_gui() child args name <service_provider>
09-16 14:40:25.345277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345311  1 13 json_db_to_gui() metadata node was found, name=<service_provider>
09-16 14:40:25.345318  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.345323  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.345328  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.345343  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.345355  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345365  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.345369  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345377  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345386  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.345389  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345403  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.345407  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345417  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.345420  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345428  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.345431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345457  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.345461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345467  1 11 json_db_to_gui() operator() switch OBJECT child name=<source>
09-16 14:40:25.345473  1 13 json_db_to_gui() child args name <source>
09-16 14:40:25.345476  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345481  1 13 json_db_to_gui() metadata node was found, name=<source>
09-16 14:40:25.345486  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.345490  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.345493  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.345500  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.345507  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345515  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.345519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345537  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.345541  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:25.345547  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:25.345551  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.345563  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345568  1 11 json_db_to_gui() operator() switch OBJECT child name=<module_type>
09-16 14:40:25.345573  1 13 json_db_to_gui() child args name <module_type>
09-16 14:40:25.345576  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345593  1 13 json_db_to_gui() metadata node was found, name=<module_type>
09-16 14:40:25.345598  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.345602  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.345606  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.345613  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.345620  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345628  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.345631  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345639  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345646  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.345650  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345657  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.345661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345667  1 11 json_db_to_gui() operator() switch OBJECT child name=<resume_after_timeout>
09-16 14:40:25.345672  1 13 json_db_to_gui() child args name <resume_after_timeout>
09-16 14:40:25.345675  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345690  1 13 json_db_to_gui() metadata node was found, name=<resume_after_timeout>
09-16 14:40:25.345695  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.345699  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.345702  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.345709  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.345716  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345724  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.345727  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345734  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345742  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.345746  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345753  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.345756  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345762  1 11 json_db_to_gui() operator() switch OBJECT child name=<waiting_time>
09-16 14:40:25.345767  1 13 json_db_to_gui() child args name <waiting_time>
09-16 14:40:25.345770  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345785  1 13 json_db_to_gui() metadata node was found, name=<waiting_time>
09-16 14:40:25.345790  1 11 json_db_to_gui() operator() begin
09-16 14:40:25.345794  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:25.345797  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.345804  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:25.345811  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345818  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:25.345822  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345829  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:25.345837  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:25.345840  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345847  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.345851  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345858  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:25.345862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:25.345884  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:40:25.345915  1 10 json_db_to_gui() created gui_node
09-16 14:40:25.361010  1 10 json_db_to_gui() created gui_json
09-16 14:40:25.361106  1 14 json_gui_to_db() begin
09-16 14:40:25.374011  1 14 json_gui_to_db() read guiAST
09-16 14:40:25.374057  1 14 json_gui_to_db() created dbAST
09-16 14:40:25.374077  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.374089  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.374096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.374112  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374132  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.374141  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:25.374147  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374194  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:25.374198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374205  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.374212  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.374217  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.374221  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.374226  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374234  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.374239  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:25.374244  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374284  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:25.374290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374297  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.374302  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.374306  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.374310  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.374315  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374321  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.374357  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:40:25.374365  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:40:25.374369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374379  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374401  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374416  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374424  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.374430  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:40:25.374436  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:40:25.374441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374450  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374475  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374481  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374488  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.374495  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:40:25.374500  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:40:25.374505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374514  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374522  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374544  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374551  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.374558  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:25.374563  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:25.374568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374585  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374593  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374600  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374607  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374613  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.374624  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:40:25.374630  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:40:25.374634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374643  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374652  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374674  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374681  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.374687  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:40:25.374691  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:40:25.374696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374734  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374741  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.374747  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:40:25.374752  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:40:25.374757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374764  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374797  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374804  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.374811  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:25.374816  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:25.374821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374846  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374859  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374867  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.374872  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:25.374877  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374919  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:25.374924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374930  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.374936  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.374940  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.374945  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.374949  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.374956  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.374962  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:40:25.374966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374974  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374983  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.374991  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375007  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:40:25.375012  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375019  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.375024  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.375029  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.375033  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.375038  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375045  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.375052  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:40:25.375058  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:40:25.375062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375070  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375079  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375094  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375101  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375108  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.375115  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:40:25.375120  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:40:25.375125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375142  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375150  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375158  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375164  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375171  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.375178  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:40:25.375183  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:40:25.375188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375197  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375206  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375214  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375221  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375227  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375235  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.375240  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:40:25.375245  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:40:25.375250  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375275  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375290  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375297  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.375303  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:25.375307  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375324  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375332  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375341  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375349  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:25.375354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375360  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.375366  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.375370  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.375375  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.375379  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375387  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.375392  1 16 json_node_t() makeChild() node_name=<netMonOutput>
09-16 14:40:25.375402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375411  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375454  1 16 json_node_t() makeChild() node_name=<netMonOutput>
09-16 14:40:25.375459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375465  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.375471  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.375475  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.375479  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.375484  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375491  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.375496  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.375501  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375509  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375518  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375526  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375542  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.375547  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375553  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.375559  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.375563  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.375567  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.375571  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375579  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.375586  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.375591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375601  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.375606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375664  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.375670  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.375675  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.375680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.375685  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:40:25.375691  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.375697  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:40:25.375701  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.375708  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375716  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.375722  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonOutput)
09-16 14:40:25.375728  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.375733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375742  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375751  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375759  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375766  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375773  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375781  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.375786  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:25.375790  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375799  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375831  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:25.375836  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375842  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.375848  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.375852  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.375856  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.375861  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375867  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.375873  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:25.375877  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375894  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375918  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:25.375923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375929  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.375935  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.375939  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.375943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.375947  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.375954  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.375960  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:25.375964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375973  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.375998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376005  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:25.376010  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376016  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.376022  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.376026  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.376030  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.376034  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376041  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.376047  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:25.376053  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.376058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376096  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376104  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.376110  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:40:25.376116  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:25.376120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376137  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376159  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376166  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.376172  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:25.376176  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376184  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376193  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376209  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376235  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:25.376240  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376246  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.376252  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.376256  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.376260  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.376265  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376271  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.376278  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:25.376283  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.376288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376305  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376313  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376326  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376334  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.376340  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:40:25.376346  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:25.376351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376376  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376390  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376401  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.376408  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:40:25.376413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376422  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:40:25.376428  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376444  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376472  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.376478  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.376483  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.376487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.376492  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(netMonOutput)
09-16 14:40:25.376498  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.376505  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376512  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.376518  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:25.376524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376534  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:25.376540  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376548  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376583  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.376589  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.376594  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.376599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.376604  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:25.376609  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.376616  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376624  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.376630  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:25.376635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376646  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:25.376651  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376669  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376687  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376695  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.376701  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.376706  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.376710  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.376716  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:25.376721  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.376728  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376736  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.376742  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:40:25.376748  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:40:25.376753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376792  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376799  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.376804  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:25.376808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376851  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376869  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376876  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:25.376881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376887  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.376893  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.376897  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.376902  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.376906  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.376913  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.376919  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:25.376923  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376957  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376964  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:25.376969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.376976  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.376981  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.376985  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.376989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.376994  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377001  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.377016  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:40:25.377022  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:40:25.377027  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377036  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377052  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377059  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377066  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377073  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.377078  1 16 json_node_t() makeChild() node_name=<user>
09-16 14:40:25.377082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377099  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377122  1 16 json_node_t() makeChild() node_name=<user>
09-16 14:40:25.377126  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377133  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.377138  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.377142  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.377146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.377150  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377157  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.377163  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:25.377167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377206  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:25.377211  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377218  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.377223  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.377227  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.377231  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.377235  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377242  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.377249  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:40:25.377254  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:40:25.377259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377267  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377276  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377284  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377297  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377304  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.377310  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(6)
09-16 14:40:25.377315  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:40:25.377320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377350  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377356  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377363  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.377369  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:25.377374  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:25.377379  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377398  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377420  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377427  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.377433  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:40:25.377438  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:25.377443  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377451  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377459  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377480  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377487  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.377493  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:40:25.377498  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:40:25.377503  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377534  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377542  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377549  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.377554  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:25.377558  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377598  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:25.377603  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377609  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.377614  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.377618  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.377623  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.377627  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377634  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.377640  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:40:25.377645  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.377650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377682  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377688  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377694  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.377699  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:40:25.377704  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:40:25.377709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377739  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377745  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.377751  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.377757  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(900)
09-16 14:40:25.377763  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:40:25.377768  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377784  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377798  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.377816  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:40:25.377858  1 14 json_gui_to_db() created db_node
09-16 14:40:25.383465  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.16 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_002_t" end time: Sep 16 14:40 CDT
"RoundConvert_DBJson2GUIJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

56/65 Testing: MongoFhicl_search1_002_t
56/65 Test: MongoFhicl_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/MongoFhicl_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.src.656.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.cmp.656.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/test002.opts.656.json" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test002.src.656.fcl" "-c" "test002.cmp.656.fcl" "-t" "search1" "-o" "test002.opts.656.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test002/MongoFhicl_search1_002_t.d
"MongoFhicl_search1_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
removed ‘test002.cmp.120.fcl’
removed ‘test002.opts.120.json’
removed ‘test002.src.120.fcl’
09-16 14:40:25.045447  1  0 artdaq::database::mongo trace_enable
09-16 14:40:25.045647  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.096793  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.097332  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.100471  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba1ed8683ab1"
}
09-16 14:40:25.100549  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:25.100584  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
 "document.data.main.source.waiting_time" : 1656
}
, "collection":"testFHICL_V001"}>
09-16 14:40:25.100705  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "document.data.main.source.waiting_time" : 1656
}>
09-16 14:40:25.100763  1  2 collection_name="testFHICL_V001", search filter=<{
    "document.data.main.source.waiting_time" : 1656
}>
09-16 14:40:25.101249  1  3 found_count=1
09-16 14:40:25.102625  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba1ed8683ab1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1656
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:25.103234  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba1ed8683ab1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1656
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:25.103391  1  3 deleteChild() args  path=<_id>
09-16 14:40:25.110090  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:25.112013  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4aa91a72ba1ed8683ab1"
},
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1656
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:25.112089  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:25.113325  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1656
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:25.113406  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4aa91a72ba1ed8683ab1"
}>
09-16 14:40:25.113415  1  3 deleteChild() Delete succeeded.
09-16 14:40:25.113479  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"prolog" : {

},
"main" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 1656
}
}
},
"metadata" : {
"prolog" : {
"type" : "table",
"comment" : "#prolog",
"children" : {

}
},
"main" : {
"type" : "table",
"comment" : "#main",
"children" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
}
}
}
},
"comments" : [
{
"linenum" : 3,
"value" : "#Success 1  above satom"
},
{
"linenum" : 6,
"value" : "#Success 3 right of satom"
},
{
"linenum" : 8,
"value" : "//Success 2 right of satom"
}
],
"origin" : {
"format" : "fhicl",
"source" : "fhicl_to_json",
"timestamp" : "Mon Feb  8 14:00:30 2016"
},
"version" : "notprovided",
"configurable_entity" : {
"name" : "notprovided"
},
"configurations" : [

]
}>
09-16 14:40:25.113488  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 1656
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:25.117069  1 10 matches() JSON buffers are equal.
Running test:<search1>
Search criteria {"filter":{
 "document.data.main.source.waiting_time" : 1656
}
, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.40 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_search1_002_t" end time: Sep 16 14:40 CDT
"MongoFhicl_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

11/65 Testing: JSONDocument_removeChild_302_t
11/65 Test: JSONDocument_removeChild_302_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/JSONDocument_removeChild_302_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/test302.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test302.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test302/JSONDocument_removeChild_302_t.d
"JSONDocument_removeChild_302_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.280771  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.282467  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.282478  1  5 findChild() args  path=<operation>
09-16 14:40:25.286841  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.289933  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.289976  1  5 findChild() found child value=std::string(removeChild)
09-16 14:40:25.290134  1  5 findChild() resultDocument=<{
"operation" : "removeChild"
}>
09-16 14:40:25.290142  1  5 findChild() Find succeeded.
09-16 14:40:25.292879  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.292891  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.293702  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.294025  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.294041  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.294146  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.294154  1  5 findChild() Find succeeded.
09-16 14:40:25.296342  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.296353  1  5 findChild() args  path=<delta>
09-16 14:40:25.297055  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.297366  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.297382  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.297490  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.297499  1  5 findChild() Find succeeded.
09-16 14:40:25.299414  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.299426  1  5 findChild() args  path=<path>
09-16 14:40:25.300164  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.300482  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.300502  1  5 findChild() found child value=std::string(aliases.active)
09-16 14:40:25.300617  1  5 findChild() resultDocument=<{
"path" : "aliases.active"
}>
09-16 14:40:25.300625  1  5 findChild() Find succeeded.
09-16 14:40:25.302723  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.302733  1  5 findChild() args  path=<end-state>
09-16 14:40:25.303401  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.303735  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.303750  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.303862  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.303870  1  5 findChild() Find succeeded.
09-16 14:40:25.305860  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.305869  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.306585  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.306869  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.306885  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.306987  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.306995  1  5 findChild() Find succeeded.
09-16 14:40:25.309061  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeChild", 
    "path" : "aliases.active", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.309070  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.309701  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.309994  1  5 findChild() recurse() args currentView=<{
"operation" : "removeChild",
"path" : "aliases.active",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.310045  1  5 findChild() found child value=int(1)
09-16 14:40:25.310149  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.310157  1  5 findChild() Find succeeded.
09-16 14:40:25.312088  1 13 removeChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.312098  1 13 removeChild() args  child=<{
    "payload" : {
        "name" : "version alias 2"
    }
}>
09-16 14:40:25.312105  1 13 removeChild() args  path=<aliases.active>
09-16 14:40:25.312373  1  4 removeChild() new delete value=object(...)
09-16 14:40:25.312387  1  5 findChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.312393  1  5 findChild() args  path=<aliases.active>
09-16 14:40:25.314705  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.316188  1  5 findChild() recurse() args currentView=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.316200  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.316943  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:40:25.316966  1  5 findChild() found child value=array(...)
09-16 14:40:25.317402  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:40:25.317411  1  5 findChild() Find succeeded.
09-16 14:40:25.318350  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:40:25.318370  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:40:25.318696  1  3 removeChild() updatedChild=<{
"payload" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:40:25.318904  1  3 removeChild() delChild=<{
"0" : [
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
]
}>
09-16 14:40:25.318962  1 13 removeChild() updatedChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:40:25.318975  1  4 replaceChild() begin _json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.318983  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "version alias 11", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }, 
        {
            "name" : "version alias 44", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:40:25.318989  1  4 replaceChild() args  path=<aliases.active>
09-16 14:40:25.321532  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.321546  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.322609  1  4 replaceChild() recurse() args childValue=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.322621  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.323361  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
}>
09-16 14:40:25.323413  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.324313  1  4 replaceChild() resultDocument=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.324752  1  4 replaceChild() replacedChild=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.324761  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.324886  1 10 operator==() begin _json_buffer=<{
"aliases" : {
"active" : [
{
"name" : "version alias 11",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 44",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.324897  1 10 operator==() args  other.__json_buffer=<{
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 11", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 44", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.328170  1 10 matches() JSON buffers are equal.
09-16 14:40:25.328193  1 10 operator==() begin _json_buffer=<{
    "0" : [
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
09-16 14:40:25.328199  1 10 operator==() args  other.__json_buffer=<{
    "0" : [
        {
            "name" : "version alias 2", 
            "assigned" : "Tue Dec 29 18:19:25 2015"
        }
    ]
}>
Running test:<removeChild>
<end of output>
Test time =   0.15 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_removeChild_302_t" end time: Sep 16 14:40 CDT
"JSONDocument_removeChild_302_t" time elapsed: 00:00:00
----------------------------------------------------------

52/65 Testing: MongoJson_search1_002_t
52/65 Test: MongoJson_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/MongoJson_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.src.454.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.cmp.454.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/test002.opts.454.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test002.src.454.json" "-c" "test002.cmp.454.json" "-t" "search1" "-o" "test002.opts.454.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test002/MongoJson_search1_002_t.d
"MongoJson_search1_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
removed ‘test002.cmp.233.json’
removed ‘test002.opts.233.json’
removed ‘test002.src.233.json’
09-16 14:40:25.274544  1  0 artdaq::database::mongo trace_enable
09-16 14:40:25.274712  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.277314  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.277806  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.279845  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba1f262b8931"
}
09-16 14:40:25.279901  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:25.279908  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
 "document.data.daq.event_builder.mpi_buffer_count" : 1454
}
, "collection":"testJSON_V001"}>
09-16 14:40:25.280004  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "document.data.daq.event_builder.mpi_buffer_count" : 1454
}>
09-16 14:40:25.280041  1  2 collection_name="testJSON_V001", search filter=<{
    "document.data.daq.event_builder.mpi_buffer_count" : 1454
}>
09-16 14:40:25.280538  1  3 found_count=1
09-16 14:40:25.281421  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba1f262b8931"
    }, 
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1454, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:25.281625  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba1f262b8931"
    }, 
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1454, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:25.281635  1  3 deleteChild() args  path=<_id>
09-16 14:40:25.287283  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:25.290182  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4aa91a72ba1f262b8931"
},
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1454,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.290247  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:25.290578  1  3 deleteChild() resultDocument=<{
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1454,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.290655  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4aa91a72ba1f262b8931"
}>
09-16 14:40:25.290663  1  3 deleteChild() Delete succeeded.
09-16 14:40:25.290709  1 10 operator==() begin _json_buffer=<{
"version" : "version55",
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 1454,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.290717  1 10 operator==() args  other.__json_buffer=<{
    "version" : "version55", 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 1454, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:25.291843  1 10 matches() JSON buffers are equal.
Running test:<search1>
Search criteria {"filter":{
 "document.data.daq.event_builder.mpi_buffer_count" : 1454
}
, "collection":"testJSON_V001"}
<end of output>
Test time =   0.26 sec
----------------------------------------------------------
Test Passed.
"MongoJson_search1_002_t" end time: Sep 16 14:40 CDT
"MongoJson_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

18/65 Testing: JSONDocumentBuilder_setVersion_007_t
18/65 Test: JSONDocumentBuilder_setVersion_007_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/JSONDocumentBuilder_setVersion_007_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/test007.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/version.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test007.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test007/JSONDocumentBuilder_setVersion_007_t.d
"JSONDocumentBuilder_setVersion_007_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.274543  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.274682  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.276313  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.276327  1  5 findChild() args  path=<operation>
09-16 14:40:25.281380  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.284870  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:40:25.284914  1  5 findChild() found child value=std::string(setVersion)
09-16 14:40:25.285085  1  5 findChild() resultDocument=<{
"operation" : "setVersion"
}>
09-16 14:40:25.285093  1  5 findChild() Find succeeded.
09-16 14:40:25.287699  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.287709  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.288209  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.288461  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:40:25.288477  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.288580  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.288589  1  5 findChild() Find succeeded.
09-16 14:40:25.290841  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.290852  1  5 findChild() args  path=<delta>
09-16 14:40:25.291398  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.291643  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:40:25.291658  1  5 findChild() found child value=std::string(version.json)
09-16 14:40:25.291761  1  5 findChild() resultDocument=<{
"delta" : "version.json"
}>
09-16 14:40:25.291769  1  5 findChild() Find succeeded.
09-16 14:40:25.293736  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.293746  1  5 findChild() args  path=<end-state>
09-16 14:40:25.294272  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.294521  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:40:25.294536  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.294639  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.294647  1  5 findChild() Find succeeded.
09-16 14:40:25.296785  1  5 findChild() begin _json_buffer=<{
    "operation" : "setVersion", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "version.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.296794  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.297265  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.297509  1  5 findChild() recurse() args currentView=<{
"operation" : "setVersion",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "version.json",
"must-succeed" : 1
}>
09-16 14:40:25.297561  1  5 findChild() found child value=int(1)
09-16 14:40:25.297669  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.297678  1  5 findChild() Find succeeded.
09-16 14:40:25.299517  1  6 setVersion() args  version=<{
    "version" : "updatedVersion"
}>
09-16 14:40:25.299609  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.299621  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "version" : "updatedVersion"
    }
}>
09-16 14:40:25.299627  1  4 replaceChild() args  path=<version>
09-16 14:40:25.303623  1  4 replaceChild() new child value=std::string(updatedVersion)
09-16 14:40:25.303642  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.305994  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.306044  1  4 replaceChild() found child value=std::string(version1)
09-16 14:40:25.307729  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.307863  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.307873  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.308044  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.308055  1 13 appendChild() args  child=<{
    "payload" : {
        "setVersion" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.308060  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:40:25.308312  1  4 appendChild() new child value=object(...)
09-16 14:40:25.308324  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.308331  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:40:25.311075  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.312783  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.312796  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.313125  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.313149  1  5 findChild() found child value=array(...)
09-16 14:40:25.313386  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.313397  1  5 findChild() Find succeeded.
09-16 14:40:25.314164  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.314265  1  3 appendChild() newChild=<{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.314316  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "setVersion" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.314325  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.314332  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "setVersion" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.314337  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:40:25.317534  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.317546  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.319252  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.319265  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.319614  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.319659  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.321400  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.321658  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.321667  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.321770  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "updatedVersion",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"setVersion" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.321782  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "updatedVersion", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "setVersion" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.327627  1 10 matches() JSON buffers are equal.
Running test:<setVersion>
<end of output>
Test time =   0.26 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_setVersion_007_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_setVersion_007_t" time elapsed: 00:00:00
----------------------------------------------------------

13/65 Testing: JSONDocumentBuilder_buildDocument_002_t
13/65 Test: JSONDocumentBuilder_buildDocument_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/JSONDocumentBuilder_buildDocument_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/test002.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test002/JSONDocumentBuilder_buildDocument_002_t.d
"JSONDocumentBuilder_buildDocument_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.280771  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.280897  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.282463  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.282475  1  5 findChild() args  path=<operation>
09-16 14:40:25.286527  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.290019  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.290059  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:40:25.290214  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:40:25.290222  1  5 findChild() Find succeeded.
09-16 14:40:25.293004  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.293016  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.293479  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.293715  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.293730  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.293838  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.293847  1  5 findChild() Find succeeded.
09-16 14:40:25.296470  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.296480  1  5 findChild() args  path=<end-state>
09-16 14:40:25.296871  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.297078  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.297092  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.297195  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.297203  1  5 findChild() Find succeeded.
09-16 14:40:25.299544  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.299556  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.300022  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.300309  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.300372  1  5 findChild() found child value=int(1)
09-16 14:40:25.300505  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.300514  1  5 findChild() Find succeeded.
09-16 14:40:25.302615  1  2 createFrom() args  document=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.302751  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.302760  1  5 findChild() args  path=<document.metadata>
09-16 14:40:25.305272  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.306852  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.306865  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.307385  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.307410  1  5 findChild() found child value=object(...)
09-16 14:40:25.307581  1  5 findChild() resultDocument=<{
"document.metadata" : {
"comments" : {
"empty" : "empty"
}
}
}>
09-16 14:40:25.307589  1  5 findChild() Find succeeded.
09-16 14:40:25.307636  1  2 createFrom() Found document.metadata=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:40:25.307650  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.307660  1  4 replaceChild() args  newChild=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:40:25.307666  1  4 replaceChild() args  path=<document.metadata>
09-16 14:40:25.309575  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.309589  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.310457  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.310471  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.310799  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.310852  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.311763  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.311896  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.311904  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.311952  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.311963  1  5 findChild() args  path=<changelog>
09-16 14:40:25.313683  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.314826  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.314837  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:40:25.315191  1  2 createFrom() No converted.changelog
09-16 14:40:25.315219  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.315227  1  5 findChild() args  path=<document.data>
09-16 14:40:25.317017  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.318155  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.318167  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.318732  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.318750  1  5 findChild() found child value=object(...)
09-16 14:40:25.319060  1  5 findChild() resultDocument=<{
"document.data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:40:25.319068  1  5 findChild() Find succeeded.
09-16 14:40:25.319130  1  2 createFrom() Found document.data=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.319147  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.319153  1  4 replaceChild() args  newChild=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.319159  1  4 replaceChild() args  path=<document.data>
09-16 14:40:25.321149  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.321158  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.322049  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.322062  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.322387  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.322415  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.323515  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.323533  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.323539  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.323582  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.323593  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.327619  1 10 matches() JSON buffers are equal.
Running test:<buildDocument>
<end of output>
Test time =   0.25 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_002_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_buildDocument_002_t" time elapsed: 00:00:00
----------------------------------------------------------

3/65 Testing: JSONDocument_replaceChild_003_t
3/65 Test: JSONDocument_replaceChild_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/JSONDocument_replaceChild_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/test003.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test003/JSONDocument_replaceChild_003_t.d
"JSONDocument_replaceChild_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.538931  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.540742  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.540807  1  5 findChild() args  path=<operation>
09-16 14:40:25.545647  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.549108  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.549214  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:40:25.549424  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:40:25.549452  1  5 findChild() Find succeeded.
09-16 14:40:25.552097  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.552151  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.552983  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.553334  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.553382  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.553516  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.553545  1  5 findChild() Find succeeded.
09-16 14:40:25.555744  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.555795  1  5 findChild() args  path=<delta>
09-16 14:40:25.556620  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.556960  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.557002  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.557127  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.557155  1  5 findChild() Find succeeded.
09-16 14:40:25.559245  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.559340  1  5 findChild() args  path=<path>
09-16 14:40:25.560337  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.560732  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.560784  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.560913  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.560941  1  5 findChild() Find succeeded.
09-16 14:40:25.562884  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.562952  1  5 findChild() args  path=<end-state>
09-16 14:40:25.563712  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.564116  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.564162  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.564285  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.564313  1  5 findChild() Find succeeded.
09-16 14:40:25.566315  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.566353  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.567089  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.567411  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.567455  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.567576  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.567602  1  5 findChild() Find succeeded.
09-16 14:40:25.569783  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.569841  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.570640  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.571017  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.571154  1  5 findChild() found child value=int(1)
09-16 14:40:25.571300  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.571330  1  5 findChild() Find succeeded.
09-16 14:40:25.573394  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : [
                1, 
                2, 
                3
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:40:25.573462  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:40:25.573495  1  4 replaceChild() args  path=<document.data>
09-16 14:40:25.574857  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.574888  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.575679  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.575729  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.576061  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:40:25.576160  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.576552  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.576777  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.576823  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.576903  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.576950  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : [
                6, 
                6, 
                8
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:40:25.578322  1 10 matches() JSON buffers are equal.
09-16 14:40:25.578358  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : [
        1, 
        2, 
        3
    ]
}>
09-16 14:40:25.578390  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : [
        1, 
        2, 
        3
    ]
}>
Running test:<replaceChild>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_003_t" end time: Sep 16 14:40 CDT
"JSONDocument_replaceChild_003_t" time elapsed: 00:00:00
----------------------------------------------------------

19/65 Testing: JSONDocumentBuilder_markReadonly_008_t
19/65 Test: JSONDocumentBuilder_markReadonly_008_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/JSONDocumentBuilder_markReadonly_008_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/test008.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test008.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test008/JSONDocumentBuilder_markReadonly_008_t.d
"JSONDocumentBuilder_markReadonly_008_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.533947  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.534047  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.542108  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.542121  1  5 findChild() args  path=<operation>
09-16 14:40:25.546388  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.549189  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.550802  1  5 findChild() found child value=std::string(markReadonly)
09-16 14:40:25.550982  1  5 findChild() resultDocument=<{
"operation" : "markReadonly"
}>
09-16 14:40:25.550990  1  5 findChild() Find succeeded.
09-16 14:40:25.553612  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.553624  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.554137  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.554358  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.554373  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.554487  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.554496  1  5 findChild() Find succeeded.
09-16 14:40:25.556855  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.556865  1  5 findChild() args  path=<end-state>
09-16 14:40:25.557336  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.557557  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.557572  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.557675  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.557682  1  5 findChild() Find succeeded.
09-16 14:40:25.559999  1  5 findChild() begin _json_buffer=<{
    "operation" : "markReadonly", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.560010  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.560542  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.560768  1  5 findChild() recurse() args currentView=<{
"operation" : "markReadonly",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.560833  1  5 findChild() found child value=int(1)
09-16 14:40:25.560941  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.560949  1  5 findChild() Find succeeded.
09-16 14:40:25.562905  1  6 markReadonly()
09-16 14:40:25.563016  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.563028  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "isreadonly" : true
    }
}>
09-16 14:40:25.563034  1  4 replaceChild() args  path=<bookkeeping.isreadonly>
09-16 14:40:25.566747  1  4 replaceChild() new child value=bool(true)
09-16 14:40:25.566765  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.569000  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.569030  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.569452  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.569571  1  4 replaceChild() found child value=bool(false)
09-16 14:40:25.571284  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.571489  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.571499  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.571761  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.571772  1 13 appendChild() args  child=<{
    "payload" : {
        "markReadonly" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.571779  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:40:25.572051  1  4 appendChild() new child value=object(...)
09-16 14:40:25.572064  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.572071  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:40:25.574777  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.576534  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.576548  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.576888  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.576910  1  5 findChild() found child value=array(...)
09-16 14:40:25.577159  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.577169  1  5 findChild() Find succeeded.
09-16 14:40:25.577952  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.578055  1  3 appendChild() newChild=<{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.578109  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.578118  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.578125  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "markReadonly" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.578130  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:40:25.581406  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.581418  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.583103  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.583116  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.583468  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.583515  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.585298  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.585555  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.585565  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.585673  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"markReadonly" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.585685  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "markReadonly" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.591785  1 10 matches() JSON buffers are equal.
Running test:<markReadonly>
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_markReadonly_008_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_markReadonly_008_t" time elapsed: 00:00:00
----------------------------------------------------------

16/65 Testing: JSONDocumentBuilder_removeAlias_005_t
16/65 Test: JSONDocumentBuilder_removeAlias_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/JSONDocumentBuilder_removeAlias_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/test005.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/alias.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test005.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test005/JSONDocumentBuilder_removeAlias_005_t.d
"JSONDocumentBuilder_removeAlias_005_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.533693  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.533835  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.536071  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.536090  1  5 findChild() args  path=<operation>
09-16 14:40:25.541447  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.544884  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.544941  1  5 findChild() found child value=std::string(removeAlias)
09-16 14:40:25.545112  1  5 findChild() resultDocument=<{
"operation" : "removeAlias"
}>
09-16 14:40:25.545120  1  5 findChild() Find succeeded.
09-16 14:40:25.547607  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.547620  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.548135  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.548382  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.548403  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.548513  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.548522  1  5 findChild() Find succeeded.
09-16 14:40:25.550810  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.550820  1  5 findChild() args  path=<delta>
09-16 14:40:25.551412  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.551657  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.551673  1  5 findChild() found child value=std::string(alias.json)
09-16 14:40:25.551774  1  5 findChild() resultDocument=<{
"delta" : "alias.json"
}>
09-16 14:40:25.551783  1  5 findChild() Find succeeded.
09-16 14:40:25.553771  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.553781  1  5 findChild() args  path=<end-state>
09-16 14:40:25.554330  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.554580  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.554595  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.554699  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.554707  1  5 findChild() Find succeeded.
09-16 14:40:25.556947  1  5 findChild() begin _json_buffer=<{
    "operation" : "removeAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.556957  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.557510  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.557757  1  5 findChild() recurse() args currentView=<{
"operation" : "removeAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.557804  1  5 findChild() found child value=int(1)
09-16 14:40:25.557912  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.557920  1  5 findChild() Find succeeded.
09-16 14:40:25.559854  1  4 removeAlias() args  alias=<{
    "alias" : "alias01"
}>
09-16 14:40:25.561811  1 10 _makeAlias() activeAlias<{"name":"alias01"}>
09-16 14:40:25.561933  1 13 removeChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.561946  1 13 removeChild() args  child=<{
    "payload" : {
        "name" : "alias01"
    }
}>
09-16 14:40:25.561952  1 13 removeChild() args  path=<aliases.active>
09-16 14:40:25.562370  1  4 removeChild() new delete value=object(...)
09-16 14:40:25.562385  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.562393  1  5 findChild() args  path=<aliases.active>
09-16 14:40:25.565691  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.567949  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.567964  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.568425  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:40:25.568451  1  5 findChild() found child value=array(...)
09-16 14:40:25.568884  1  5 findChild() resultDocument=<{
"aliases.active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.568895  1  5 findChild() Find succeeded.
09-16 14:40:25.570040  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:40:25.570069  1 26 artdaq::database::jsonutils::matches() objects are different at key=<name>
09-16 14:40:25.570403  1  3 removeChild() updatedChild=<{
"payload" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.570604  1  3 removeChild() delChild=<{
"0" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.570676  1 13 removeChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias012", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "alias02", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.570690  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.570700  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias012", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "alias02", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.570708  1  4 replaceChild() args  path=<aliases.active>
09-16 14:40:25.574007  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.574027  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.575638  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.575653  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.576117  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:40:25.576173  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.577697  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.578129  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.578138  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.578324  1 14 value_at() begin _json_buffer=<{
    "0" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.578331  1 14 value_at() begin index=<0>
09-16 14:40:25.578352  1 14 value_at() json_buffer=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.578674  1 14 value_at() new child value=array(...)
09-16 14:40:25.578874  1  2 insertChild() begin _json_buffer=<{
    "name" : "alias01", 
    "assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.578882  1  2 insertChild() args  newChild=<{
    "removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.578887  1  2 insertChild() args  path=<removed>
09-16 14:40:25.579279  1  4 insertChild() new child value=std::string(Mon Feb  8 14:00:30 2016)
09-16 14:40:25.579287  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.579416  1  4 insertChild() recurse() args childValue=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.579432  1  4 insertChild() found child value=std::string(Mon Feb  8 14:00:30 2016)
09-16 14:40:25.579583  1  4 insertChild() resultDocument=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.579684  1  4 insertChild() insertChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.579693  1  4 insertChild() Insert succeeded.
09-16 14:40:25.579726  1 10 _makeHistoryAlias() historyAlias<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.579772  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.579781  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "alias01", 
        "assigned" : "Mon Feb  8 14:00:30 2016", 
        "removed" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.579786  1 13 appendChild() args  path=<aliases.history>
09-16 14:40:25.580198  1  4 appendChild() new child value=object(...)
09-16 14:40:25.580210  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.580217  1  5 findChild() args  path=<aliases.history>
09-16 14:40:25.581882  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.582731  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.582741  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.582950  1  5 findChild() recurse() args currentView=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:40:25.582960  1  5 findChild() found child value=array(...)
09-16 14:40:25.583034  1  5 findChild() resultDocument=<{
"aliases.history" : [

]
}>
09-16 14:40:25.583039  1  5 findChild() Find succeeded.
09-16 14:40:25.583332  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.583443  1  3 appendChild() newChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.583478  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016", 
            "removed" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.583485  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.583489  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016", 
            "removed" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.583492  1  4 replaceChild() args  path=<aliases.history>
09-16 14:40:25.584848  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.584856  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.585716  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.585725  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.585934  1  4 replaceChild() recurse() args childValue=<{
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
}>
09-16 14:40:25.585946  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.586902  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.586981  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.586991  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.587089  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.587095  1 13 appendChild() args  child=<{
    "payload" : {
        "removeAlias" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.587098  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:40:25.587231  1  4 appendChild() new child value=object(...)
09-16 14:40:25.587239  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.587243  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:40:25.588465  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.589384  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.589393  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.589582  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.589595  1  5 findChild() found child value=array(...)
09-16 14:40:25.589709  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.589715  1  5 findChild() Find succeeded.
09-16 14:40:25.590047  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.590116  1  3 appendChild() newChild=<{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.590150  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.590156  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.590160  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.590164  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:40:25.591612  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.591620  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.592545  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.592554  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.592721  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.592736  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.593720  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.593871  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.593880  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.593969  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.593982  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.597078  1 10 matches() JSON buffers are equal.
Running test:<removeAlias>
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_removeAlias_005_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_removeAlias_005_t" time elapsed: 00:00:00
----------------------------------------------------------

17/65 Testing: JSONDocumentBuilder_addToGlobalConfig_006_t
17/65 Test: JSONDocumentBuilder_addToGlobalConfig_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/JSONDocumentBuilder_addToGlobalConfig_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/test006.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/globalconfig.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test006.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test006/JSONDocumentBuilder_addToGlobalConfig_006_t.d
"JSONDocumentBuilder_addToGlobalConfig_006_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.540487  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.540611  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.542108  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.542121  1  5 findChild() args  path=<operation>
09-16 14:40:25.546458  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.549207  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:40:25.549244  1  5 findChild() found child value=std::string(addToGlobalConfig)
09-16 14:40:25.549407  1  5 findChild() resultDocument=<{
"operation" : "addToGlobalConfig"
}>
09-16 14:40:25.549416  1  5 findChild() Find succeeded.
09-16 14:40:25.552086  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.552096  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.552694  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.552953  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:40:25.552968  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.553076  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.553084  1  5 findChild() Find succeeded.
09-16 14:40:25.555524  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.555535  1  5 findChild() args  path=<delta>
09-16 14:40:25.556116  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.556377  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:40:25.556392  1  5 findChild() found child value=std::string(globalconfig.json)
09-16 14:40:25.556505  1  5 findChild() resultDocument=<{
"delta" : "globalconfig.json"
}>
09-16 14:40:25.556513  1  5 findChild() Find succeeded.
09-16 14:40:25.558530  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.558540  1  5 findChild() args  path=<end-state>
09-16 14:40:25.559122  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.559464  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:40:25.559490  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.559625  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.559634  1  5 findChild() Find succeeded.
09-16 14:40:25.562051  1  5 findChild() begin _json_buffer=<{
    "operation" : "addToGlobalConfig", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "globalconfig.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.562065  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.562737  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.563066  1  5 findChild() recurse() args currentView=<{
"operation" : "addToGlobalConfig",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "globalconfig.json",
"must-succeed" : 1
}>
09-16 14:40:25.563133  1  5 findChild() found child value=int(1)
09-16 14:40:25.563240  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.563248  1  5 findChild() Find succeeded.
09-16 14:40:25.565234  1  5 addToGlobalConfig() args  globalconfig=<{
    "configurations" : "globalconfig01"
}>
09-16 14:40:25.567292  1 10 _makeaddToGlobalConfig() globalConfig<{"name":"globalconfig01","assigned":"Mon Feb  8 14:00:30 2016"}>
09-16 14:40:25.567372  1 13 appendChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.567383  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "globalconfig01", 
        "assigned" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.567390  1 13 appendChild() args  path=<configurations>
09-16 14:40:25.567785  1  4 appendChild() new child value=object(...)
09-16 14:40:25.567800  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.567809  1  5 findChild() args  path=<configurations>
09-16 14:40:25.571422  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.574186  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.574215  1  5 findChild() found child value=array(...)
09-16 14:40:25.574442  1  5 findChild() resultDocument=<{
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.574451  1  5 findChild() Find succeeded.
09-16 14:40:25.575182  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.575318  1  3 appendChild() newChild=<{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.575372  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.575385  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.575399  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.575405  1  4 replaceChild() args  path=<configurations>
09-16 14:40:25.578910  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.578926  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.580704  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.580759  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.582611  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.582827  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.582843  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.583023  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.583032  1 13 appendChild() args  child=<{
    "payload" : {
        "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.583037  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:40:25.583299  1  4 appendChild() new child value=object(...)
09-16 14:40:25.583309  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.583317  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:40:25.586403  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.588286  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.588299  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.588642  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.588661  1  5 findChild() found child value=array(...)
09-16 14:40:25.588905  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.588913  1  5 findChild() Find succeeded.
09-16 14:40:25.589663  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.589764  1  3 appendChild() newChild=<{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.589817  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.589827  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.589835  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "removeAlias" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.589841  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:40:25.592971  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.592980  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.594063  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.594072  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.594279  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.594294  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.595416  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.595574  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.595582  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.595655  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
{
"name" : "test",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "globalconfig01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"aliases" : {
"active" : [
{
"name" : "alias012",
"assigned" : "Mon Feb  8 14:00:30 2016"
},
{
"name" : "alias02",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016",
"removed" : "Mon Feb  8 14:00:30 2016"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : false,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"removeAlias" : "Mon Feb  8 14:00:30 2016"
},
{
"addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.595663  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        {
            "name" : "test", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }, 
        {
            "name" : "globalconfig01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias012", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "name" : "alias02", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016", 
                "removed" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : false, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "removeAlias" : "Mon Feb  8 14:00:30 2016"
            }, 
            {
                "addToGlobalConfig" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.598830  1 10 matches() JSON buffers are equal.
Running test:<addToGlobalConfig>
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_addToGlobalConfig_006_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_addToGlobalConfig_006_t" time elapsed: 00:00:00
----------------------------------------------------------

9/65 Testing: JSONDocument_deleteChild_201_t
9/65 Test: JSONDocument_deleteChild_201_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/JSONDocument_deleteChild_201_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/test201.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test201.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test201/JSONDocument_deleteChild_201_t.d
"JSONDocument_deleteChild_201_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.540487  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.542110  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.542123  1  5 findChild() args  path=<operation>
09-16 14:40:25.546664  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.549524  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.549564  1  5 findChild() found child value=std::string(deleteChild)
09-16 14:40:25.549722  1  5 findChild() resultDocument=<{
"operation" : "deleteChild"
}>
09-16 14:40:25.549730  1  5 findChild() Find succeeded.
09-16 14:40:25.564042  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.564054  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.564817  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.565151  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.565167  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.565276  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.565284  1  5 findChild() Find succeeded.
09-16 14:40:25.567318  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.567327  1  5 findChild() args  path=<path>
09-16 14:40:25.568027  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.568329  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.568345  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.568458  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.568467  1  5 findChild() Find succeeded.
09-16 14:40:25.570331  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.570345  1  5 findChild() args  path=<end-state>
09-16 14:40:25.571049  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.571446  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.571467  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.571592  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.571601  1  5 findChild() Find succeeded.
09-16 14:40:25.573432  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.573442  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.574167  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.574496  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.574511  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.574618  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.574626  1  5 findChild() Find succeeded.
09-16 14:40:25.576588  1  5 findChild() begin _json_buffer=<{
    "operation" : "deleteChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.576597  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.577349  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.577671  1  5 findChild() recurse() args currentView=<{
"operation" : "deleteChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.577728  1  5 findChild() found child value=int(1)
09-16 14:40:25.577839  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.577847  1  5 findChild() Find succeeded.
09-16 14:40:25.579942  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "tt" : "aa"
        }, 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:40:25.579952  1  3 deleteChild() args  path=<document.data>
09-16 14:40:25.580661  1  3 deleteChild() recurse() args currentDepth=1
09-16 14:40:25.581353  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"tt" : "aa"
},
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.581367  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:25.581587  1  3 deleteChild() recurse() args childValue=<{
"data" : {
"tt" : "aa"
},
"bbb" : [
1,
2,
3
]
}>
09-16 14:40:25.581640  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:25.581828  1  3 deleteChild() resultDocument=<{
"document" : {
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.581932  1  3 deleteChild() deletedChild=<{
"tt" : "aa"
}>
09-16 14:40:25.581940  1  3 deleteChild() Delete succeeded.
09-16 14:40:25.581986  1 10 operator==() begin _json_buffer=<{
"document" : {
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.581996  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:40:25.582697  1 10 matches() JSON buffers are equal.
09-16 14:40:25.582713  1 10 operator==() begin _json_buffer=<{
    "tt" : "aa"
}>
09-16 14:40:25.582719  1 10 operator==() args  other.__json_buffer=<{
    "tt" : "aa"
}>
Running test:<deleteChild>
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_deleteChild_201_t" end time: Sep 16 14:40 CDT
"JSONDocument_deleteChild_201_t" time elapsed: 00:00:00
----------------------------------------------------------

61/65 Testing: FileSystemJson_update_003_t
61/65 Test: FileSystemJson_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/FileSystemJson_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.cmp.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/test003.update.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "update" "-o" "test003.update.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test003/FileSystemJson_update_003_t.d
"FileSystemJson_update_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.537478  1  0 artdaq::database::filesystem trace_enable
09-16 14:40:25.537626  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:40:25.537689  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.540158  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:25.540187  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}, "collection":"testJSON_V001"}>
09-16 14:40:25.540333  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.540346  1  5 findChild() args  path=<collection>
09-16 14:40:25.546217  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.549833  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.549900  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.550082  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.550091  1  5 findChild() Find succeeded.
09-16 14:40:25.552564  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.552576  1  5 findChild() args  path=<filter>
09-16 14:40:25.553646  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.554283  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.554296  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:25.554841  1 12 StorageProvider::FileSystemDB generate_oid=e3338831015f4e61b2120f78
09-16 14:40:25.556907  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.556919  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "e3338831015f4e61b2120f78"
    }
}>
09-16 14:40:25.556925  1  2 insertChild() args  path=<document._id>
09-16 14:40:25.558220  1  4 insertChild() new child value=object(...)
09-16 14:40:25.558245  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.558887  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.558910  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.559695  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.559811  1  4 insertChild() found child value=object(...)
09-16 14:40:25.560466  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.560576  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.560594  1  4 insertChild() Insert succeeded.
09-16 14:40:25.560676  1  4 StorageProvider::FileSystemDB::store() using generated oid=<e3338831015f4e61b2120f78>.
09-16 14:40:25.560736  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.560786  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.560849  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.561066  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/e3338831015f4e61b2120f78.json>.
09-16 14:40:25.561255  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.561265  1  5 findChild() args  path=<document>
09-16 14:40:25.572614  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.573345  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.573367  1  5 findChild() found child value=object(...)
09-16 14:40:25.574026  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
}
}>
09-16 14:40:25.574035  1  5 findChild() Find succeeded.
09-16 14:40:25.579436  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.579448  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.579500  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.579833  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:25.579843  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 15, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "_id" : {
            "_oid" : "e3338831015f4e61b2120f78"
        }
    }>.
09-16 14:40:25.579852  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<e3338831015f4e61b2120f78>.
09-16 14:40:25.580798  1  5 StorageProvider::FileSystemDB::index::addDocument() found 2 keys.
09-16 14:40:25.580877  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:25.580884  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:25.580983  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:25.581008  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:25.581017  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.581200  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.581321  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.581346  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:25.581353  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "e3338831015f4e61b2120f78"}, "collection":"testJSON_V001"}>
09-16 14:40:25.581503  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "e3338831015f4e61b2120f78"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.581513  1  5 findChild() args  path=<collection>
09-16 14:40:25.581835  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.582010  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.582025  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.582131  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.582139  1  5 findChild() Find succeeded.
09-16 14:40:25.583838  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "e3338831015f4e61b2120f78"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.583847  1  5 findChild() args  path=<filter>
09-16 14:40:25.584032  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.584142  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.584154  1  5 findChild() found child value=object(...)
09-16 14:40:25.584242  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
}
}>
09-16 14:40:25.584248  1  5 findChild() Find succeeded.
09-16 14:40:25.585286  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.585293  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.585304  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.585328  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.585332  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.585353  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.585520  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:25.585526  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "e3338831015f4e61b2120f78"
    }>.
09-16 14:40:25.585622  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:25.585758  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:40:25.585763  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<e3338831015f4e61b2120f78>.
09-16 14:40:25.585802  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:40:25.585934  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/e3338831015f4e61b2120f78.json>.
09-16 14:40:25.585988  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.586097  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.586162  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.586224  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "_id" : {
        "_oid" : "e3338831015f4e61b2120f78"
    }
}>
09-16 14:40:25.586231  1  3 deleteChild() args  path=<_id>
09-16 14:40:25.586720  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:25.587041  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
}>
09-16 14:40:25.587093  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:25.587366  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.587445  1  3 deleteChild() deletedChild=<{
"_oid" : "e3338831015f4e61b2120f78"
}>
09-16 14:40:25.587451  1  3 deleteChild() Delete succeeded.
09-16 14:40:25.587482  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.587489  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:25.587492  1  4 replaceChild() args  path=<document>
09-16 14:40:25.588171  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.588178  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.588456  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.588528  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.588733  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.588972  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.588978  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.589025  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:25.589030  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}, "filter":{ "$oid" : "e3338831015f4e61b2120f78"},"collection":"testJSON_V001"}>
09-16 14:40:25.589071  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "e3338831015f4e61b2120f78"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.589076  1  5 findChild() args  path=<collection>
09-16 14:40:25.589516  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.589814  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.589825  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.589893  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.589898  1  5 findChild() Find succeeded.
09-16 14:40:25.590797  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "e3338831015f4e61b2120f78"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.590803  1  5 findChild() args  path=<filter>
09-16 14:40:25.591230  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.591538  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.591550  1  5 findChild() found child value=object(...)
09-16 14:40:25.591637  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
}
}>
09-16 14:40:25.591643  1  5 findChild() Find succeeded.
09-16 14:40:25.592638  1  4 StorageProvider::FileSystemDB::store() found filter=<{
        "$oid" : "e3338831015f4e61b2120f78"
    }>.
09-16 14:40:25.593341  1 12 value()JSON regex_search() result=e3338831015f4e61b2120f78
09-16 14:40:25.593353  1  4 StorageProvider::FileSystemDB::store() using provided oid=<e3338831015f4e61b2120f78>.
09-16 14:40:25.594299  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }
    }, 
    "filter" : {
        "$oid" : "e3338831015f4e61b2120f78"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.594306  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "e3338831015f4e61b2120f78"
    }
}>
09-16 14:40:25.594309  1  2 insertChild() args  path=<document._id>
09-16 14:40:25.594878  1  4 insertChild() new child value=object(...)
09-16 14:40:25.594885  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.595180  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
},
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.595188  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.595392  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.595411  1  4 insertChild() found child value=object(...)
09-16 14:40:25.595743  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
},
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.595810  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
},
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.595816  1  4 insertChild() Insert succeeded.
09-16 14:40:25.595844  1  4 StorageProvider::FileSystemDB::store() using generated oid=<e3338831015f4e61b2120f78>.
09-16 14:40:25.595856  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.595861  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.595872  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.595894  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/e3338831015f4e61b2120f78.json>.
09-16 14:40:25.595922  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
},
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.595927  1  5 findChild() args  path=<document>
09-16 14:40:25.596409  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.596745  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
},
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.596758  1  5 findChild() found child value=object(...)
09-16 14:40:25.597039  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
}
}>
09-16 14:40:25.597045  1  5 findChild() Find succeeded.
09-16 14:40:25.599199  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.599205  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.599228  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.599379  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:25.599385  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "first_fragment_receiver_rank" : 0, 
                        "demo123" : 16, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "_id" : {
            "_oid" : "e3338831015f4e61b2120f78"
        }
    }>.
09-16 14:40:25.599390  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<e3338831015f4e61b2120f78>.
09-16 14:40:25.599777  1  5 StorageProvider::FileSystemDB::index::addDocument() found 2 keys.
09-16 14:40:25.599801  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:25.599804  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:25.599820  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:25.599827  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:25.599831  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.599945  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.599998  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.600007  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:25.600011  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "e3338831015f4e61b2120f78"}, "collection":"testJSON_V001"}>
09-16 14:40:25.600039  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "e3338831015f4e61b2120f78"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.600044  1  5 findChild() args  path=<collection>
09-16 14:40:25.600213  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.600331  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.600342  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.600415  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.600429  1  5 findChild() Find succeeded.
09-16 14:40:25.601286  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "e3338831015f4e61b2120f78"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.601292  1  5 findChild() args  path=<filter>
09-16 14:40:25.601463  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.601569  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.601580  1  5 findChild() found child value=object(...)
09-16 14:40:25.601665  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "e3338831015f4e61b2120f78"
}
}>
09-16 14:40:25.601670  1  5 findChild() Find succeeded.
09-16 14:40:25.602660  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.602667  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.602675  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.602692  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.602696  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.602716  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.602860  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:25.602865  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "e3338831015f4e61b2120f78"
    }>.
09-16 14:40:25.602957  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:25.602975  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:40:25.602978  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<e3338831015f4e61b2120f78>.
09-16 14:40:25.602986  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:40:25.602997  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/e3338831015f4e61b2120f78.json>.
09-16 14:40:25.603031  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.603136  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.603185  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.603239  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "_id" : {
        "_oid" : "e3338831015f4e61b2120f78"
    }
}>
09-16 14:40:25.603245  1  3 deleteChild() args  path=<_id>
09-16 14:40:25.603621  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:25.603868  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
},
"_id" : {
"_oid" : "e3338831015f4e61b2120f78"
}
}>
09-16 14:40:25.603882  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:25.604080  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.604146  1  3 deleteChild() deletedChild=<{
"_oid" : "e3338831015f4e61b2120f78"
}>
09-16 14:40:25.604152  1  3 deleteChild() Delete succeeded.
09-16 14:40:25.604183  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:25.604188  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:25.604896  1 10 matches() JSON buffers are equal.
Running test:<update>
Search criteria {"filter":{ "$oid" : "e3338831015f4e61b2120f78"}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_update_003_t" end time: Sep 16 14:40 CDT
"FileSystemJson_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

7/65 Testing: JSONDocument_insertChild_103_t
7/65 Test: JSONDocument_insertChild_103_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/JSONDocument_insertChild_103_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/test103.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test103.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test103/JSONDocument_insertChild_103_t.d
"JSONDocument_insertChild_103_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.551777  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.553673  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.553685  1  5 findChild() args  path=<operation>
09-16 14:40:25.559167  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.564466  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.564513  1  5 findChild() found child value=std::string(insertChild)
09-16 14:40:25.564682  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:40:25.564690  1  5 findChild() Find succeeded.
09-16 14:40:25.567477  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.567487  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.568156  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.568478  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.568494  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.568599  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.568607  1  5 findChild() Find succeeded.
09-16 14:40:25.570963  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.570975  1  5 findChild() args  path=<delta>
09-16 14:40:25.571763  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.572119  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.572136  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.572243  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.572251  1  5 findChild() Find succeeded.
09-16 14:40:25.574409  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.574422  1  5 findChild() args  path=<path>
09-16 14:40:25.575065  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.575377  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.575391  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.575500  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.575508  1  5 findChild() Find succeeded.
09-16 14:40:25.577583  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.577593  1  5 findChild() args  path=<end-state>
09-16 14:40:25.578229  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.578538  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.578553  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.578659  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.578667  1  5 findChild() Find succeeded.
09-16 14:40:25.580803  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.580813  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.581531  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.581839  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.581855  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.581962  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.581971  1  5 findChild() Find succeeded.
09-16 14:40:25.584080  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.584090  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.584789  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.585084  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.585139  1  5 findChild() found child value=int(0)
09-16 14:40:25.585245  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:40:25.585253  1  5 findChild() Find succeeded.
09-16 14:40:25.587136  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "data" : "ss", 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:40:25.587146  1  2 insertChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:40:25.587152  1  2 insertChild() args  path=<document.data>
09-16 14:40:25.588214  1  4 insertChild() new child value=object(...)
09-16 14:40:25.588231  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.588918  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : "ss",
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.588930  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.589121  1  4 insertChild() recurse() args childValue=<{
"data" : "ss",
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:40:25.589132  1  4 insertChild() recurse() Error: Insert failed fordata, search path =<document.data>; Child exists, call replace instead.
Running test:<insertChild>
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_103_t" end time: Sep 16 14:40 CDT
"JSONDocument_insertChild_103_t" time elapsed: 00:00:00
----------------------------------------------------------

59/65 Testing: FileSystemJson_insert_001_t
59/65 Test: FileSystemJson_insert_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/FileSystemJson_insert_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/test001.cmp.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "insert"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test001/FileSystemJson_insert_001_t.d
"FileSystemJson_insert_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.727824  1  0 artdaq::database::filesystem trace_enable
09-16 14:40:25.728032  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:40:25.728116  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.730685  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:25.730745  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}, "collection":"testJSON_V001"}>
09-16 14:40:25.730918  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.730978  1  5 findChild() args  path=<collection>
09-16 14:40:25.736806  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.741178  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.741326  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.741536  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.741564  1  5 findChild() Find succeeded.
09-16 14:40:25.744948  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.745055  1  5 findChild() args  path=<filter>
09-16 14:40:25.746258  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.747037  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.747130  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:25.748094  1 12 StorageProvider::FileSystemDB generate_oid=f2529e156a464608b7188c7d
09-16 14:40:25.750484  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \""
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.750552  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "f2529e156a464608b7188c7d"
    }
}>
09-16 14:40:25.750580  1  2 insertChild() args  path=<document._id>
09-16 14:40:25.751974  1  4 insertChild() new child value=object(...)
09-16 14:40:25.752015  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.752698  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.752766  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.753428  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:40:25.753641  1  4 insertChild() found child value=object(...)
09-16 14:40:25.754410  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "f2529e156a464608b7188c7d"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.754590  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "f2529e156a464608b7188c7d"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.754662  1  4 insertChild() Insert succeeded.
09-16 14:40:25.754792  1  4 StorageProvider::FileSystemDB::store() using generated oid=<f2529e156a464608b7188c7d>.
09-16 14:40:25.754877  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.754934  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.755052  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.755421  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/f2529e156a464608b7188c7d.json>.
09-16 14:40:25.755717  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "f2529e156a464608b7188c7d"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.755792  1  5 findChild() args  path=<document>
09-16 14:40:25.757115  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.757899  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "f2529e156a464608b7188c7d"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.757972  1  5 findChild() found child value=object(...)
09-16 14:40:25.758695  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "f2529e156a464608b7188c7d"
}
}
}>
09-16 14:40:25.758754  1  5 findChild() Find succeeded.
09-16 14:40:25.764554  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.764587  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.764652  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.764996  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:25.765023  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "\n AA \"", 
        "_id" : {
            "_oid" : "f2529e156a464608b7188c7d"
        }
    }>.
09-16 14:40:25.765080  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<f2529e156a464608b7188c7d>.
09-16 14:40:25.766118  1  5 StorageProvider::FileSystemDB::index::addDocument() found 3 keys.
09-16 14:40:25.766170  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:25.766190  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<f2529e156a464608b7188c7d>.
09-16 14:40:25.766213  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<\n AA \">.
09-16 14:40:25.766532  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:25.766556  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<version>
09-16 14:40:25.766573  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:25.766682  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=configurations
09-16 14:40:25.766727  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:25.766752  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.767542  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.767706  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.767750  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:25.767772  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{ "$oid" : "f2529e156a464608b7188c7d"}, "collection":"testJSON_V001"}>
09-16 14:40:25.767926  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "f2529e156a464608b7188c7d"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.767959  1  5 findChild() args  path=<collection>
09-16 14:40:25.768274  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.768476  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "f2529e156a464608b7188c7d"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.768518  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.768637  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.768664  1  5 findChild() Find succeeded.
09-16 14:40:25.770818  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "$oid" : "f2529e156a464608b7188c7d"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:25.770855  1  5 findChild() args  path=<filter>
09-16 14:40:25.771185  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.771376  1  5 findChild() recurse() args currentView=<{
"filter" : {
"$oid" : "f2529e156a464608b7188c7d"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:25.771420  1  5 findChild() found child value=object(...)
09-16 14:40:25.771576  1  5 findChild() resultDocument=<{
"filter" : {
"$oid" : "f2529e156a464608b7188c7d"
}
}>
09-16 14:40:25.771607  1  5 findChild() Find succeeded.
09-16 14:40:25.773918  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.773939  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.773959  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.774007  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.774016  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.774069  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.774914  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:25.774933  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "$oid" : "f2529e156a464608b7188c7d"
    }>.
09-16 14:40:25.775101  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:25.775266  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() begin
09-16 14:40:25.775284  1 16 StorageProvider::FileSystemDB::index::_matchObjectId() args objectid=<f2529e156a464608b7188c7d>.
09-16 14:40:25.775334  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:40:25.775526  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/f2529e156a464608b7188c7d.json>.
09-16 14:40:25.775622  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.775888  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.776003  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.776114  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \"", 
    "_id" : {
        "_oid" : "f2529e156a464608b7188c7d"
    }
}>
09-16 14:40:25.776125  1  3 deleteChild() args  path=<_id>
09-16 14:40:25.777243  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:25.777857  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \"",
"_id" : {
"_oid" : "f2529e156a464608b7188c7d"
}
}>
09-16 14:40:25.777930  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:25.778465  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:40:25.778571  1  3 deleteChild() deletedChild=<{
"_oid" : "f2529e156a464608b7188c7d"
}>
09-16 14:40:25.778581  1  3 deleteChild() Delete succeeded.
09-16 14:40:25.778623  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "\n AA \""
}>
09-16 14:40:25.778634  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "\n AA \""
}>
09-16 14:40:25.780740  1 10 matches() JSON buffers are equal.
Running test:<insert>
Search criteria {"filter":{ "$oid" : "f2529e156a464608b7188c7d"}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_insert_001_t" end time: Sep 16 14:40 CDT
"FileSystemJson_insert_001_t" time elapsed: 00:00:00
----------------------------------------------------------

15/65 Testing: JSONDocumentBuilder_addAlias_004_t
15/65 Test: JSONDocumentBuilder_addAlias_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/JSONDocumentBuilder_addAlias_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/test004.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/alias.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test004/JSONDocumentBuilder_addAlias_004_t.d
"JSONDocumentBuilder_addAlias_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.718052  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.718197  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.719873  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.719888  1  5 findChild() args  path=<operation>
09-16 14:40:25.725146  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.728721  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.728772  1  5 findChild() found child value=std::string(addAlias)
09-16 14:40:25.728970  1  5 findChild() resultDocument=<{
"operation" : "addAlias"
}>
09-16 14:40:25.728978  1  5 findChild() Find succeeded.
09-16 14:40:25.731589  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.731602  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.732159  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.732460  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.732478  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.732592  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.732601  1  5 findChild() Find succeeded.
09-16 14:40:25.734813  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.734824  1  5 findChild() args  path=<delta>
09-16 14:40:25.735334  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.735595  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.735612  1  5 findChild() found child value=std::string(alias.json)
09-16 14:40:25.735715  1  5 findChild() resultDocument=<{
"delta" : "alias.json"
}>
09-16 14:40:25.735723  1  5 findChild() Find succeeded.
09-16 14:40:25.737468  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.737478  1  5 findChild() args  path=<end-state>
09-16 14:40:25.737965  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.738217  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.738233  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.738337  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.738345  1  5 findChild() Find succeeded.
09-16 14:40:25.740335  1  5 findChild() begin _json_buffer=<{
    "operation" : "addAlias", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "delta" : "alias.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.740345  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.740851  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.741092  1  5 findChild() recurse() args currentView=<{
"operation" : "addAlias",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"delta" : "alias.json",
"must-succeed" : 1
}>
09-16 14:40:25.741140  1  5 findChild() found child value=int(1)
09-16 14:40:25.741243  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.741251  1  5 findChild() Find succeeded.
09-16 14:40:25.742985  1  3 addAlias() args  alias=<{
    "alias" : "alias01"
}>
09-16 14:40:25.744929  1 10 _makeActiveAlias() activeAlias<{"name":"alias01","assigned":"Mon Feb  8 14:00:30 2016"}>
09-16 14:40:25.745066  1 13 appendChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.745077  1 13 appendChild() args  child=<{
    "payload" : {
        "name" : "alias01", 
        "assigned" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.745084  1 13 appendChild() args  path=<aliases.active>
09-16 14:40:25.745623  1  4 appendChild() new child value=object(...)
09-16 14:40:25.745640  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.745647  1  5 findChild() args  path=<aliases.active>
09-16 14:40:25.748647  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.750616  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.750631  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.750776  1  5 findChild() recurse() args currentView=<{
"active" : [

],
"history" : [

]
}>
09-16 14:40:25.750795  1  5 findChild() found child value=array(...)
09-16 14:40:25.750911  1  5 findChild() resultDocument=<{
"aliases.active" : [

]
}>
09-16 14:40:25.750919  1  5 findChild() Find succeeded.
09-16 14:40:25.751401  1  3 appendChild() updatedChild=<{
"payload" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.751545  1  3 appendChild() newChild=<{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.751591  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.751605  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.751614  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "name" : "alias01", 
            "assigned" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.751620  1  4 replaceChild() args  path=<aliases.active>
09-16 14:40:25.754024  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.754049  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.755316  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.755352  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.755553  1  4 replaceChild() recurse() args childValue=<{
"active" : [

],
"history" : [

]
}>
09-16 14:40:25.755656  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.756993  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.757116  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.757124  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.757289  1 13 appendChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.757299  1 13 appendChild() args  child=<{
    "payload" : {
        "addAlias" : "Mon Feb  8 14:00:30 2016"
    }
}>
09-16 14:40:25.757305  1 13 appendChild() args  path=<bookkeeping.updates>
09-16 14:40:25.757566  1  4 appendChild() new child value=object(...)
09-16 14:40:25.757576  1  5 findChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.757582  1  5 findChild() args  path=<bookkeeping.updates>
09-16 14:40:25.759508  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.760822  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.760834  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.761040  1  5 findChild() recurse() args currentView=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}>
09-16 14:40:25.761053  1  5 findChild() found child value=array(...)
09-16 14:40:25.761158  1  5 findChild() resultDocument=<{
"bookkeeping.updates" : [

]
}>
09-16 14:40:25.761166  1  5 findChild() Find succeeded.
09-16 14:40:25.761531  1  3 appendChild() updatedChild=<{
"payload" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}>
09-16 14:40:25.761634  1  3 appendChild() newChild=<{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}>
09-16 14:40:25.761674  1 13 appendChild() updatedChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.761683  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.761689  1  4 replaceChild() args  newChild=<{
    "payload" : [
        {
            "addAlias" : "Mon Feb  8 14:00:30 2016"
        }
    ]
}>
09-16 14:40:25.761695  1  4 replaceChild() args  path=<bookkeeping.updates>
09-16 14:40:25.763945  1  4 replaceChild() new child value=array(...)
09-16 14:40:25.763956  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.765210  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.765223  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.765439  1  4 replaceChild() recurse() args childValue=<{
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}>
09-16 14:40:25.765457  1  4 replaceChild() found child value=array(...)
09-16 14:40:25.766829  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.766943  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.766952  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.767039  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [
{
"name" : "alias01",
"assigned" : "Mon Feb  8 14:00:30 2016"
}
],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addAlias" : "Mon Feb  8 14:00:30 2016"
}
]
}
}>
09-16 14:40:25.767051  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "alias01", 
                "assigned" : "Mon Feb  8 14:00:30 2016"
            }
        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            {
                "addAlias" : "Mon Feb  8 14:00:30 2016"
            }
        ]
    }
}>
09-16 14:40:25.771017  1 10 matches() JSON buffers are equal.
Running test:<addAlias>
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_addAlias_004_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_addAlias_004_t" time elapsed: 00:00:00
----------------------------------------------------------

12/65 Testing: JSONDocumentBuilder_buildDocument_001_t
12/65 Test: JSONDocumentBuilder_buildDocument_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/JSONDocumentBuilder_buildDocument_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/test001.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test001/JSONDocumentBuilder_buildDocument_001_t.d
"JSONDocumentBuilder_buildDocument_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.732473  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.732614  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.734224  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.734238  1  5 findChild() args  path=<operation>
09-16 14:40:25.739153  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.742529  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.742571  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:40:25.742739  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:40:25.742747  1  5 findChild() Find succeeded.
09-16 14:40:25.745391  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.745413  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.745918  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.746238  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.746256  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.746364  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.746372  1  5 findChild() Find succeeded.
09-16 14:40:25.748734  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.748746  1  5 findChild() args  path=<end-state>
09-16 14:40:25.749208  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.749994  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.750010  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.750116  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.750124  1  5 findChild() Find succeeded.
09-16 14:40:25.752279  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.752289  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.752712  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.752987  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 1
}>
09-16 14:40:25.753101  1  5 findChild() found child value=int(1)
09-16 14:40:25.753243  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.753254  1  5 findChild() Find succeeded.
09-16 14:40:25.756181  1  2 createFrom() args  document=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.756343  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.756352  1  5 findChild() args  path=<document.metadata>
09-16 14:40:25.757305  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.758143  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:40:25.758154  1  5 findChild() recurse() Error: Search failed for json element name=document, search path =<document.metadata>.
09-16 14:40:25.758515  1  2 createFrom() No document.metadata
09-16 14:40:25.758541  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.758549  1  5 findChild() args  path=<changelog>
09-16 14:40:25.758930  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.759246  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:40:25.759257  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:40:25.759303  1  2 createFrom() No converted.changelog
09-16 14:40:25.759313  1  5 findChild() begin _json_buffer=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.759319  1  5 findChild() args  path=<document.data>
09-16 14:40:25.759724  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.760028  1  5 findChild() recurse() args currentView=<{
"payload" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:40:25.760039  1  5 findChild() recurse() Error: Search failed for json element name=document, search path =<document.data>.
09-16 14:40:25.760085  1  2 createFrom() No document.data
09-16 14:40:25.760099  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.760108  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.760114  1  4 replaceChild() args  path=<document.data>
09-16 14:40:25.762343  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.762359  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.763474  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.763488  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.763837  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.763886  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.765032  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.765054  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.765062  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.765116  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"a" : 1,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.765127  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.769161  1 10 matches() JSON buffers are equal.
Running test:<buildDocument>
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_001_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_buildDocument_001_t" time elapsed: 00:00:00
----------------------------------------------------------

45/65 Testing: RoundConvert_Fhicl2DBJson_001_t
45/65 Test: RoundConvert_Fhicl2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/RoundConvert_Fhicl2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/test001.fcl" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.fcl" "-c" "test001.fcl" "-t" "RoundConvert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test003/RoundConvert_Fhicl2DBJson_001_t.d
"RoundConvert_Fhicl2DBJson_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.714186  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:40:25.714338  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:40:25.714367  1  0 artdaq::database::fhicljson trace_enable
09-16 14:40:25.714392  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:40:25.715941  1  2 fhicl_to_json: begin
09-16 14:40:25.716281  1  2 fhicl_to_json: Created root nodes
09-16 14:40:25.716391  1  2 read_comments begin
09-16 14:40:25.721249  1  2 read_comments end result=1
09-16 14:40:25.721268  1  2 read_data begin
09-16 14:40:25.721282  1  2 read_data() begin
09-16 14:40:25.762934  1  2 parse_document() returned 6 entries.
09-16 14:40:25.763136  1  2 fcl2jsondb() key=<services>
09-16 14:40:25.763223  1  2 fcl2jsondb() value=<{scheduler:{fileMode:"NOMERGE"} user:{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}}>
09-16 14:40:25.763328  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.763384  1  2 fcl2jsondb() key=<scheduler>
09-16 14:40:25.763404  1  2 fcl2jsondb() value=<{fileMode:"NOMERGE"}>
09-16 14:40:25.763428  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.763454  1  2 fcl2jsondb() key=<fileMode>
09-16 14:40:25.763462  1  2 fcl2jsondb() value=<"NOMERGE">
09-16 14:40:25.763486  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.763576  1  2 fcl2jsondb() key=<user>
09-16 14:40:25.763603  1  2 fcl2jsondb() value=<{NetMonTransportServiceInterface:{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}}>
09-16 14:40:25.763628  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.763658  1  2 fcl2jsondb() key=<NetMonTransportServiceInterface>
09-16 14:40:25.763678  1  2 fcl2jsondb() value=<{service_provider:"NetMonTransportService" first_data_receiver_rank:6 mpi_buffer_count:8 max_fragment_size_words:2.097152e6 data_receiver_count:1}>
09-16 14:40:25.763701  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.763736  1  2 fcl2jsondb() key=<service_provider>
09-16 14:40:25.763744  1  2 fcl2jsondb() value=<"NetMonTransportService">
09-16 14:40:25.763770  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.763804  1  2 fcl2jsondb() key=<first_data_receiver_rank>
09-16 14:40:25.763812  1  2 fcl2jsondb() value=<6>
09-16 14:40:25.763839  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.765834  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:25.765844  1  2 fcl2jsondb() value=<8>
09-16 14:40:25.765872  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.767798  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:25.767809  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:40:25.767837  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.769890  1  2 fcl2jsondb() key=<data_receiver_count>
09-16 14:40:25.769901  1  2 fcl2jsondb() value=<1>
09-16 14:40:25.770015  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.772017  1  2 fcl2jsondb() key=<daq>
09-16 14:40:25.772075  1  2 fcl2jsondb() value=<{max_fragment_size_words:2.097152e6 event_builder:{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false} metrics:{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}}>
09-16 14:40:25.772099  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.772134  1  2 fcl2jsondb() key=<max_fragment_size_words>
09-16 14:40:25.772141  1  2 fcl2jsondb() value=<2.097152e6>
09-16 14:40:25.772164  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.774145  1  2 fcl2jsondb() key=<event_builder>
09-16 14:40:25.774170  1  2 fcl2jsondb() value=<{mpi_buffer_count:16 first_fragment_receiver_rank:0 fragment_receiver_count:2 expected_fragments_per_event:2 use_art:true print_event_store_stats:true verbose:false}>
09-16 14:40:25.774195  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.774227  1  2 fcl2jsondb() key=<mpi_buffer_count>
09-16 14:40:25.774235  1  2 fcl2jsondb() value=<16>
09-16 14:40:25.774261  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.776196  1  2 fcl2jsondb() key=<first_fragment_receiver_rank>
09-16 14:40:25.776206  1  2 fcl2jsondb() value=<0>
09-16 14:40:25.776235  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.778162  1  2 fcl2jsondb() key=<fragment_receiver_count>
09-16 14:40:25.778171  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.778199  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.780030  1  2 fcl2jsondb() key=<expected_fragments_per_event>
09-16 14:40:25.780040  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.780068  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.781957  1  2 fcl2jsondb() key=<use_art>
09-16 14:40:25.781966  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.781994  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.782074  1  2 fcl2jsondb() key=<print_event_store_stats>
09-16 14:40:25.782083  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.782108  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.782138  1  2 fcl2jsondb() key=<verbose>
09-16 14:40:25.782145  1  2 fcl2jsondb() value=<false>
09-16 14:40:25.782175  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.782248  1  2 fcl2jsondb() key=<metrics>
09-16 14:40:25.782276  1  2 fcl2jsondb() value=<{evbFile:{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}}>
09-16 14:40:25.782297  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.782325  1  2 fcl2jsondb() key=<evbFile>
09-16 14:40:25.782342  1  2 fcl2jsondb() value=<{metricPluginType:"file" level:3 fileName:"/tmp/eventbuilder/evb_%UID%_metrics.log" uniquify:true}>
09-16 14:40:25.782362  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.782388  1  2 fcl2jsondb() key=<metricPluginType>
09-16 14:40:25.782399  1  2 fcl2jsondb() value=<"file">
09-16 14:40:25.782426  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.782458  1  2 fcl2jsondb() key=<level>
09-16 14:40:25.782466  1  2 fcl2jsondb() value=<3>
09-16 14:40:25.782490  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.784418  1  2 fcl2jsondb() key=<fileName>
09-16 14:40:25.784436  1  2 fcl2jsondb() value=<"/tmp/eventbuilder/evb_%UID%_metrics.log">
09-16 14:40:25.784547  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.784579  1  2 fcl2jsondb() key=<uniquify>
09-16 14:40:25.784586  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.784611  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.784788  1  2 fcl2jsondb() key=<outputs>
09-16 14:40:25.784852  1  2 fcl2jsondb() value=<{netMonOutput:{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}}>
09-16 14:40:25.784879  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.784923  1  2 fcl2jsondb() key=<netMonOutput>
09-16 14:40:25.784952  1  2 fcl2jsondb() value=<{module_type:"NetMonOutput" SelectEvents:{SelectEvents:["pmod2","pmod3"]}}>
09-16 14:40:25.784976  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.785008  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.785016  1  2 fcl2jsondb() value=<"NetMonOutput">
09-16 14:40:25.785040  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.785076  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:40:25.785096  1  2 fcl2jsondb() value=<{SelectEvents:["pmod2","pmod3"]}>
09-16 14:40:25.785214  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.785248  1  2 fcl2jsondb() key=<SelectEvents>
09-16 14:40:25.785261  1  2 fcl2jsondb() value=<["pmod2","pmod3"]>
09-16 14:40:25.785385  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.785569  1  2 fcl2jsondb() key=<physics>
09-16 14:40:25.785623  1  2 fcl2jsondb() value=<{filters:{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}} pmod2:["prescaleMod2"] pmod3:["prescaleMod3"] my_output_modules:["netMonOutput"]}>
09-16 14:40:25.785648  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.785688  1  2 fcl2jsondb() key=<filters>
09-16 14:40:25.785717  1  2 fcl2jsondb() value=<{prescaleMod2:{module_type:"NthEvent" nth:2} prescaleMod3:{module_type:"NthEvent" nth:3}}>
09-16 14:40:25.785742  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.785773  1  2 fcl2jsondb() key=<prescaleMod2>
09-16 14:40:25.785789  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:2}>
09-16 14:40:25.785912  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.785942  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.785949  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:40:25.786066  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.786098  1  2 fcl2jsondb() key=<nth>
09-16 14:40:25.786106  1  2 fcl2jsondb() value=<2>
09-16 14:40:25.786220  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.788054  1  2 fcl2jsondb() key=<prescaleMod3>
09-16 14:40:25.788073  1  2 fcl2jsondb() value=<{module_type:"NthEvent" nth:3}>
09-16 14:40:25.788097  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.788125  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.788133  1  2 fcl2jsondb() value=<"NthEvent">
09-16 14:40:25.788157  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.788188  1  2 fcl2jsondb() key=<nth>
09-16 14:40:25.788195  1  2 fcl2jsondb() value=<3>
09-16 14:40:25.788324  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.790160  1  2 fcl2jsondb() key=<pmod2>
09-16 14:40:25.790174  1  2 fcl2jsondb() value=<["prescaleMod2"]>
09-16 14:40:25.790198  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.790241  1  2 fcl2jsondb() key=<pmod3>
09-16 14:40:25.790252  1  2 fcl2jsondb() value=<["prescaleMod3"]>
09-16 14:40:25.790359  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.790411  1  2 fcl2jsondb() key=<my_output_modules>
09-16 14:40:25.790423  1  2 fcl2jsondb() value=<["netMonOutput"]>
09-16 14:40:25.790447  1  2 fcl2jsondb() value type=<sequence>
09-16 14:40:25.790540  1  2 fcl2jsondb() key=<source>
09-16 14:40:25.790557  1  2 fcl2jsondb() value=<{module_type:"RawInput" waiting_time:900 resume_after_timeout:true}>
09-16 14:40:25.790577  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.790602  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.790609  1  2 fcl2jsondb() value=<"RawInput">
09-16 14:40:25.790736  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.790767  1  2 fcl2jsondb() key=<waiting_time>
09-16 14:40:25.790774  1  2 fcl2jsondb() value=<900>
09-16 14:40:25.790870  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.791688  1  2 fcl2jsondb() key=<resume_after_timeout>
09-16 14:40:25.791694  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.791769  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.791801  1  2 fcl2jsondb() key=<process_name>
09-16 14:40:25.791806  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:40:25.791819  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.791833  1  2 read_data() end
09-16 14:40:25.791856  1  2 read_data end result=1
09-16 14:40:25.791861  1  2 fhicl_to_json: write() begin
09-16 14:40:25.802257  1  2 fhicl_to_json: write() end
09-16 14:40:25.802265  1  2 fhicl_to_json: end
09-16 14:40:25.802314  1  3 json_to_fhicl: begin
09-16 14:40:25.802318  1  3 json_to_fhicl: Reading json root nodes
09-16 14:40:25.814014  1  2 write_data() begin
09-16 14:40:25.814108  1  2 json2fcldb() key=<services> type=<table>
09-16 14:40:25.814187  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:40:25.814197  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:40:25.814322  1  2 json2fcldb() key=<user> type=<table>
09-16 14:40:25.814333  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:40:25.814341  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:40:25.814352  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:40:25.814390  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:40:25.814405  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:40:25.814416  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:40:25.814450  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:40:25.814459  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:40:25.814470  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:40:25.814478  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:40:25.814488  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:40:25.814498  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:40:25.814508  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:40:25.814518  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:40:25.814551  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:40:25.814562  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:40:25.814580  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:40:25.814588  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:40:25.814596  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:40:25.814606  1  2 json2fcldb() key=<level> type=<number>
09-16 14:40:25.814616  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:40:25.814638  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:40:25.814676  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:40:25.814685  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:40:25.814692  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:25.814703  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:40:25.814710  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:40:25.814857  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:40:25.814868  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:40:25.814876  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:40:25.814883  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:25.814893  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:40:25.814909  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:40:25.814917  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:25.814927  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:40:25.814949  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:40:25.814967  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:40:25.814982  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:40:25.815013  1  2 json2fcldb() key=<source> type=<table>
09-16 14:40:25.815023  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:25.815033  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:40:25.815053  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:40:25.815069  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:40:25.820481  1  2 write_data() end
09-16 14:40:25.820490  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:40:25.820495  1  3 json_to_fhicl: end
Running test:<RoundConvert_Fhicl2DBJson>
fhicl_to_json succeeded.
json_to_fhicl succeeded.
<end of output>
Test time =   0.19 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_Fhicl2DBJson_001_t" end time: Sep 16 14:40 CDT
"RoundConvert_Fhicl2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

2/65 Testing: JSONDocument_replaceChild_002_t
2/65 Test: JSONDocument_replaceChild_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/JSONDocument_replaceChild_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/test002.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test002/JSONDocument_replaceChild_002_t.d
"JSONDocument_replaceChild_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.723261  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.725033  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.725049  1  5 findChild() args  path=<operation>
09-16 14:40:25.730241  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.733804  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.733852  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:40:25.734029  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:40:25.734036  1  5 findChild() Find succeeded.
09-16 14:40:25.736379  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.736389  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.737082  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.737404  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.737420  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.737522  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.737530  1  5 findChild() Find succeeded.
09-16 14:40:25.739615  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.739626  1  5 findChild() args  path=<delta>
09-16 14:40:25.740321  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.740625  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.740640  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.740743  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.740751  1  5 findChild() Find succeeded.
09-16 14:40:25.742503  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.742514  1  5 findChild() args  path=<path>
09-16 14:40:25.743253  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.743584  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.743600  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.743706  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.743714  1  5 findChild() Find succeeded.
09-16 14:40:25.749591  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.749605  1  5 findChild() args  path=<end-state>
09-16 14:40:25.750321  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.750668  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.750684  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.750788  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.750796  1  5 findChild() Find succeeded.
09-16 14:40:25.756600  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.756611  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.757412  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.757743  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.757759  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.757865  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.757873  1  5 findChild() Find succeeded.
09-16 14:40:25.759753  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.759762  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.760510  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.760816  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.760868  1  5 findChild() found child value=int(1)
09-16 14:40:25.760974  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.760983  1  5 findChild() Find succeeded.
09-16 14:40:25.762693  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "a" : 1
        }, 
        "data1" : "aa"
    }
}>
09-16 14:40:25.762704  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "aa" : 2
    }
}>
09-16 14:40:25.762710  1  4 replaceChild() args  path=<document.data>
09-16 14:40:25.763234  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.763248  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.763466  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"a" : 1
},
"data1" : "aa"
}
}>
09-16 14:40:25.763477  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.763634  1  4 replaceChild() recurse() args childValue=<{
"data" : {
"a" : 1
},
"data1" : "aa"
}>
09-16 14:40:25.763692  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.763891  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:40:25.763993  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:40:25.764002  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.764042  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 2
},
"data1" : "aa"
}
}>
09-16 14:40:25.764052  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 2
        }, 
        "data1" : "aa"
    }
}>
09-16 14:40:25.764830  1 10 matches() JSON buffers are equal.
09-16 14:40:25.764846  1 10 operator==() begin _json_buffer=<{
    "a" : 1
}>
09-16 14:40:25.764852  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1
}>
Running test:<replaceChild>
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_002_t" end time: Sep 16 14:40 CDT
"JSONDocument_replaceChild_002_t" time elapsed: 00:00:00
----------------------------------------------------------

6/65 Testing: JSONDocument_insertChild_102_t
6/65 Test: JSONDocument_insertChild_102_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/JSONDocument_insertChild_102_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/test102.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test102.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test102/JSONDocument_insertChild_102_t.d
"JSONDocument_insertChild_102_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.729462  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.730984  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.730995  1  5 findChild() args  path=<operation>
09-16 14:40:25.735954  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.756491  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.756542  1  5 findChild() found child value=std::string(insertChild)
09-16 14:40:25.756723  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:40:25.756731  1  5 findChild() Find succeeded.
09-16 14:40:25.759466  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.759475  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.760204  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.760532  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.760548  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.760656  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.760665  1  5 findChild() Find succeeded.
09-16 14:40:25.763023  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.763033  1  5 findChild() args  path=<delta>
09-16 14:40:25.763743  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.764049  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.764064  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.764166  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.764174  1  5 findChild() Find succeeded.
09-16 14:40:25.766177  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.766187  1  5 findChild() args  path=<path>
09-16 14:40:25.766937  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.767239  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.767254  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.767357  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.767365  1  5 findChild() Find succeeded.
09-16 14:40:25.769701  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.769712  1  5 findChild() args  path=<end-state>
09-16 14:40:25.770471  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.770783  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.770798  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.770901  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.770909  1  5 findChild() Find succeeded.
09-16 14:40:25.773205  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.773214  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.773979  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.774341  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.774356  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.774495  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.774503  1  5 findChild() Find succeeded.
09-16 14:40:25.776649  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.776658  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.777414  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.777719  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.777768  1  5 findChild() found child value=int(0)
09-16 14:40:25.777874  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:40:25.777882  1  5 findChild() Find succeeded.
09-16 14:40:25.779713  1  2 insertChild() begin _json_buffer=<{
    "_id" : "5683230d1a72ba4f5176f731", 
    "document" : {
        "data" : "aaa", 
        "metadata" : {
            "comments" : {
                "a" : {
                    "comment" : "//comment 1", 
                    "annotation" : "#annotation 1"
                }, 
                "b" : {
                    "comment" : "//comment 2", 
                    "children" : {
                        "c" : {
                            "annotation" : "#annotation 2"
                        }, 
                        "d" : {
                            "comment" : "//comment 3", 
                            "annotation" : "#annotation 3"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find docs where b.c=2", 
                    "query" : "find docs where b.c=2"
                }, 
                {
                    "name" : "find docs where b.c=4", 
                    "query" : "find docs where b.c=4"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "fhicl", 
            "rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
        }
    }, 
    "version" : "version1", 
    "configurations" : [
        "config1", 
        "config2"
    ], 
    "aliases" : {
        "active" : [
            {
                "name" : "version alias 1", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 2", 
                "assigned" : "Tue Dec 29 18:19:25 2015"
            }
        ], 
        "history" : [
            {
                "name" : "version alias 3", 
                "assigned" : "Tue Dec 29 18:19:25 2015", 
                "removed" : "Tue Dec 29 18:19:25 2015"
            }, 
            {
                "name" : "version alias 4", 
                "assigned" : "Tue Dec 30 18:19:25 2015", 
                "removed" : "Tue Dec 30 18:19:25 2015"
            }
        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.779727  1  2 insertChild() args  newChild=<{
    "payload" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.779733  1  2 insertChild() args  path=<document.data>
09-16 14:40:25.785150  1  4 insertChild() new child value=object(...)
09-16 14:40:25.785169  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.788215  1  4 insertChild() recurse() args childValue=<{
"_id" : "5683230d1a72ba4f5176f731",
"document" : {
"data" : "aaa",
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
},
"version" : "version1",
"configurations" : [
"config1",
"config2"
],
"aliases" : {
"active" : [
{
"name" : "version alias 1",
"assigned" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 2",
"assigned" : "Tue Dec 29 18:19:25 2015"
}
],
"history" : [
{
"name" : "version alias 3",
"assigned" : "Tue Dec 29 18:19:25 2015",
"removed" : "Tue Dec 29 18:19:25 2015"
},
{
"name" : "version alias 4",
"assigned" : "Tue Dec 30 18:19:25 2015",
"removed" : "Tue Dec 30 18:19:25 2015"
}
]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.788231  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.789326  1  4 insertChild() recurse() args childValue=<{
"data" : "aaa",
"metadata" : {
"comments" : {
"a" : {
"comment" : "//comment 1",
"annotation" : "#annotation 1"
},
"b" : {
"comment" : "//comment 2",
"children" : {
"c" : {
"annotation" : "#annotation 2"
},
"d" : {
"comment" : "//comment 3",
"annotation" : "#annotation 3"
}
}
}
},
"search" : [
{
"name" : "find docs where b.c=2",
"query" : "find docs where b.c=2"
},
{
"name" : "find docs where b.c=4",
"query" : "find docs where b.c=4"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "fhicl",
"rawdata" : "Ly9jb21tZW50IDENCmE6MSAjYW5ub3RhdGlvbiAxDQovL2NvbW1lbnQgMg0KYjp7DQogIGM6IjIiICNhbm5vdGF0aW9uIDINCiAgLy9jb21tZW50IDMNCiAgZDpbMiw1LDZdICNhbm5vdGF0aW9uIDMNCn0="
}
}>
09-16 14:40:25.789338  1  4 insertChild() recurse() Error: Insert failed fordata, search path =<document.data>; Child exists, call replace instead.
Running test:<insertChild>
<end of output>
Test time =   0.19 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_102_t" end time: Sep 16 14:40 CDT
"JSONDocument_insertChild_102_t" time elapsed: 00:00:00
----------------------------------------------------------

48/65 Testing: Convert_Fhicl2DBJson_006_t
48/65 Test: Convert_Fhicl2DBJson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/Convert_Fhicl2DBJson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/test006.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/test006.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test006.fcl" "-c" "test006.json" "-t" "Convert_Fhicl2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test006/Convert_Fhicl2DBJson_006_t.d
"Convert_Fhicl2DBJson_006_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.710601  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:40:25.710750  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:40:25.710778  1  0 artdaq::database::fhicljson trace_enable
09-16 14:40:25.710803  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:40:25.712666  1  2 fhicl_to_json: begin
09-16 14:40:25.713015  1  2 fhicl_to_json: Created root nodes
09-16 14:40:25.713127  1  2 read_comments begin
09-16 14:40:25.719581  1  2 read_comments end result=1
09-16 14:40:25.719602  1  2 read_data begin
09-16 14:40:25.719621  1  2 read_data() begin
09-16 14:40:25.750829  1  2 parse_document() returned 6 entries.
09-16 14:40:25.751027  1  2 fcl2jsondb() key=<OnlineMonitoring_standard>
09-16 14:40:25.751101  1  2 fcl2jsondb() value=<{module_type:"OnlineMonitoring" DataDirPath:"/storage/data/" MonitorSavePath:"/data2/lbnedaq/monitoring/" EVDSavePath:"/data2/lbnedaq/eventDisplay/" ChannelMapFile:"/data/lbnedaq/lbne-artdaq-standard/lbne-artdaq/lbne-artdaq/OnlineMonitoring/detailedMap.txt" ImageType:".png" InitialMonitoringUpdate:30 MonitoringRefreshRate:500 EventDisplayRefreshRate:30 DetailedMonitoring:false ScopeMonitoring:false DriftVelocity:9e-1 CollectionPedestal:550 MicroslicePreBuffer:5 MicrosliceTriggerLength:5}>
09-16 14:40:25.751211  1  2 fcl2jsondb() value type=<table>
09-16 14:40:25.751271  1  2 fcl2jsondb() key=<module_type>
09-16 14:40:25.751280  1  2 fcl2jsondb() value=<"OnlineMonitoring">
09-16 14:40:25.751306  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.751385  1  2 fcl2jsondb() key=<DataDirPath>
09-16 14:40:25.751393  1  2 fcl2jsondb() value=<"/storage/data/">
09-16 14:40:25.751556  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.751595  1  2 fcl2jsondb() key=<MonitorSavePath>
09-16 14:40:25.751603  1  2 fcl2jsondb() value=<"/data2/lbnedaq/monitoring/">
09-16 14:40:25.751768  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.751808  1  2 fcl2jsondb() key=<EVDSavePath>
09-16 14:40:25.751815  1  2 fcl2jsondb() value=<"/data2/lbnedaq/eventDisplay/">
09-16 14:40:25.751978  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.752017  1  2 fcl2jsondb() key=<ChannelMapFile>
09-16 14:40:25.752024  1  2 fcl2jsondb() value=<"/data/lbnedaq/lbne-artdaq-standard/lbne-artdaq/lbne-artdaq/OnlineMonitoring/detailedMap.txt">
09-16 14:40:25.752151  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.752190  1  2 fcl2jsondb() key=<ImageType>
09-16 14:40:25.752198  1  2 fcl2jsondb() value=<".png">
09-16 14:40:25.752321  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.752359  1  2 fcl2jsondb() key=<InitialMonitoringUpdate>
09-16 14:40:25.752366  1  2 fcl2jsondb() value=<30>
09-16 14:40:25.752538  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.754791  1  2 fcl2jsondb() key=<MonitoringRefreshRate>
09-16 14:40:25.754806  1  2 fcl2jsondb() value=<500>
09-16 14:40:25.754979  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.756907  1  2 fcl2jsondb() key=<EventDisplayRefreshRate>
09-16 14:40:25.756923  1  2 fcl2jsondb() value=<30>
09-16 14:40:25.757096  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.758979  1  2 fcl2jsondb() key=<DetailedMonitoring>
09-16 14:40:25.758990  1  2 fcl2jsondb() value=<false>
09-16 14:40:25.759199  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.759294  1  2 fcl2jsondb() key=<ScopeMonitoring>
09-16 14:40:25.759302  1  2 fcl2jsondb() value=<false>
09-16 14:40:25.759476  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.759519  1  2 fcl2jsondb() key=<DriftVelocity>
09-16 14:40:25.759528  1  2 fcl2jsondb() value=<9e-1>
09-16 14:40:25.759710  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.761788  1  2 fcl2jsondb() key=<CollectionPedestal>
09-16 14:40:25.761798  1  2 fcl2jsondb() value=<550>
09-16 14:40:25.762011  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.763944  1  2 fcl2jsondb() key=<MicroslicePreBuffer>
09-16 14:40:25.763954  1  2 fcl2jsondb() value=<5>
09-16 14:40:25.764119  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.765809  1  2 fcl2jsondb() key=<MicrosliceTriggerLength>
09-16 14:40:25.765819  1  2 fcl2jsondb() value=<5>
09-16 14:40:25.765958  1  2 fcl2jsondb() value type=<number>
09-16 14:40:25.767001  1  2 fcl2jsondb() key=<OnlineMonitoring_detailed>
09-16 14:40:25.767008  1  2 fcl2jsondb() value=<"@local::OnlineMonitoring_standard">
09-16 14:40:25.767024  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.767040  1  2 fcl2jsondb() key=<OnlineMonitoring_detailed.DetailedMonitoring>
09-16 14:40:25.767045  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.767057  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.767075  1  2 fcl2jsondb() key=<OnlineMonitoring_scope>
09-16 14:40:25.767079  1  2 fcl2jsondb() value=<"@local::OnlineMonitoring_standard">
09-16 14:40:25.767092  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.767106  1  2 fcl2jsondb() key=<OnlineMonitoring_scope.ScopeMonitoring>
09-16 14:40:25.767110  1  2 fcl2jsondb() value=<true>
09-16 14:40:25.767122  1  2 fcl2jsondb() value type=<bool>
09-16 14:40:25.767154  1  2 fcl2jsondb() key=<process_name>
09-16 14:40:25.767159  1  2 fcl2jsondb() value=<"DAQ">
09-16 14:40:25.767171  1  2 fcl2jsondb() value type=<string>
09-16 14:40:25.767184  1  2 read_data() end
09-16 14:40:25.767202  1  2 read_data end result=1
09-16 14:40:25.767206  1  2 fhicl_to_json: write() begin
09-16 14:40:25.774312  1  2 fhicl_to_json: write() end
09-16 14:40:25.774323  1  2 fhicl_to_json: end
Running test:<Convert_Fhicl2DBJson>
Convertion started. 
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"Convert_Fhicl2DBJson_006_t" end time: Sep 16 14:40 CDT
"Convert_Fhicl2DBJson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

58/65 Testing: MongoFhicl_search2_004_t
58/65 Test: MongoFhicl_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/MongoFhicl_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/test004.src.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/test004.cmp.fcl" "--skip-return-code" "247" "MongoFhicl_t" "-s" "test004.src.fcl" "-c" "test004.cmp.fcl" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoFhicl/test004/MongoFhicl_search2_004_t.d
"MongoFhicl_search2_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.920843  1  0 artdaq::database::mongo trace_enable
09-16 14:40:25.921003  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.972250  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.973017  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.976970  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b1"
}
09-16 14:40:25.977026  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.977147  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.978775  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b2"
}
09-16 14:40:25.978791  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.978896  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.980437  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b3"
}
09-16 14:40:25.980452  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.980550  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.982088  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b4"
}
09-16 14:40:25.982102  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.982199  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.983819  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b5"
}
09-16 14:40:25.983834  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.983931  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.985462  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b6"
}
09-16 14:40:25.985477  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.985576  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.987110  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b7"
}
09-16 14:40:25.987124  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.987221  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.988766  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b8"
}
09-16 14:40:25.988780  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.988872  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.990438  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77b9"
}
09-16 14:40:25.990452  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:25.990545  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:25.992094  1  5 inserted_id={
    "$oid" : "57dc4aa91a72ba20002c77ba"
}
09-16 14:40:25.992121  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:25.992135  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc4aa91a72ba20002c77b1"
},{
    "$oid" : "57dc4aa91a72ba20002c77b2"
},{
    "$oid" : "57dc4aa91a72ba20002c77b3"
},{
    "$oid" : "57dc4aa91a72ba20002c77b4"
},{
    "$oid" : "57dc4aa91a72ba20002c77b5"
},{
    "$oid" : "57dc4aa91a72ba20002c77b6"
},{
    "$oid" : "57dc4aa91a72ba20002c77b7"
},{
    "$oid" : "57dc4aa91a72ba20002c77b8"
},{
    "$oid" : "57dc4aa91a72ba20002c77b9"
},{
    "$oid" : "57dc4aa91a72ba20002c77ba"
}]} }, "collection":"testFHICL_V001"}>
09-16 14:40:25.992314  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa91a72ba20002c77b1"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b2"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b3"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b4"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b5"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b6"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b7"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b8"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b9"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77ba"
            }
        ]
    }
}>
09-16 14:40:25.992379  1  2 collection_name="testFHICL_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aa91a72ba20002c77b1"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b2"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b3"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b4"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b5"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b6"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b7"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b8"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77b9"
            }, 
            {
                "$oid" : "57dc4aa91a72ba20002c77ba"
            }
        ]
    }
}>
09-16 14:40:25.993072  1  3 found_count=10
09-16 14:40:25.999976  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b1"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.000362  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b2"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.000723  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b3"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.001056  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b4"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.001372  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b5"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.001703  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b6"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.002033  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b7"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.002359  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b8"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.002710  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77b9"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
09-16 14:40:26.003037  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aa91a72ba20002c77ba"
    }, 
    "document" : {
        "data" : {
            "prolog" : {

            }, 
            "main" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 901
                }
            }
        }, 
        "metadata" : {
            "prolog" : {
                "type" : "table", 
                "comment" : "#prolog", 
                "children" : {

                }
            }, 
            "main" : {
                "type" : "table", 
                "comment" : "#main", 
                "children" : {
                    "source" : {
                        "type" : "table", 
                        "comment" : " ", 
                        "children" : {
                            "module_type" : {
                                "type" : "string", 
                                "comment" : "#Success 1  above satom", 
                                "annotation" : " "
                            }, 
                            "resume_after_timeout" : {
                                "type" : "bool", 
                                "comment" : " ", 
                                "annotation" : "#Success 3 right of satom"
                            }, 
                            "waiting_time" : {
                                "type" : "number", 
                                "comment" : " ", 
                                "annotation" : "//Success 2 right of satom"
                            }
                        }
                    }
                }
            }
        }
    }, 
    "comments" : [
        {
            "linenum" : 3, 
            "value" : "#Success 1  above satom"
        }, 
        {
            "linenum" : 6, 
            "value" : "#Success 3 right of satom"
        }, 
        {
            "linenum" : 8, 
            "value" : "//Success 2 right of satom"
        }
    ], 
    "origin" : {
        "format" : "fhicl", 
        "source" : "fhicl_to_json", 
        "timestamp" : "Mon Feb  8 14:00:30 2016"
    }, 
    "version" : "notprovided", 
    "configurable_entity" : {
        "name" : "notprovided"
    }, 
    "configurations" : [

    ]
}>
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ {
    "$oid" : "57dc4aa91a72ba20002c77b1"
},{
    "$oid" : "57dc4aa91a72ba20002c77b2"
},{
    "$oid" : "57dc4aa91a72ba20002c77b3"
},{
    "$oid" : "57dc4aa91a72ba20002c77b4"
},{
    "$oid" : "57dc4aa91a72ba20002c77b5"
},{
    "$oid" : "57dc4aa91a72ba20002c77b6"
},{
    "$oid" : "57dc4aa91a72ba20002c77b7"
},{
    "$oid" : "57dc4aa91a72ba20002c77b8"
},{
    "$oid" : "57dc4aa91a72ba20002c77b9"
},{
    "$oid" : "57dc4aa91a72ba20002c77ba"
}]} }, "collection":"testFHICL_V001"}
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"MongoFhicl_search2_004_t" end time: Sep 16 14:40 CDT
"MongoFhicl_search2_004_t" time elapsed: 00:00:00
----------------------------------------------------------

31/65 Testing: Convert_GUIJson2DBJson_001_t
31/65 Test: Convert_GUIJson2DBJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_001_t.d
"Convert_GUIJson2DBJson_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.911789  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:25.914219  1 14 json_gui_to_db() begin
09-16 14:40:25.946990  1 14 json_gui_to_db() read guiAST
09-16 14:40:25.947243  1 14 json_gui_to_db() created dbAST
09-16 14:40:25.947388  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.947472  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.947519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.947585  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.947703  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.947751  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:25.947783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947826  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947864  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947944  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:25.947952  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947964  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.947974  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.947981  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.947987  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.947996  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948008  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.948018  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:40:25.948025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948040  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948068  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948097  1 16 json_node_t() makeChild() node_name=<aggregator>
09-16 14:40:25.948105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948117  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.948126  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.948133  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.948139  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.948148  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948160  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948198  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:40:25.948208  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:40:25.948217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948231  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948247  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948274  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948302  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948315  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948326  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_depth, value=int(2)
09-16 14:40:25.948335  1 16 json_node_t() makeChild() node_name=<event_queue_depth>
09-16 14:40:25.948342  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948403  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948415  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948428  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948439  1 15 json_gui_to_db() operator() switch ARRAY child name= event_queue_wait_time, value=int(1)
09-16 14:40:25.948448  1 16 json_node_t() makeChild() node_name=<event_queue_wait_time>
09-16 14:40:25.948456  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948470  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948486  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948499  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948522  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948534  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948545  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_events_per_bunch, value=int(1)
09-16 14:40:25.948553  1 16 json_node_t() makeChild() node_name=<expected_events_per_bunch>
09-16 14:40:25.948561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948575  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948590  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948604  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948626  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948638  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948650  1 15 json_gui_to_db() operator() switch ARRAY child name= file_duration, value=int(0)
09-16 14:40:25.948659  1 16 json_node_t() makeChild() node_name=<file_duration>
09-16 14:40:25.948666  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948680  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948733  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948745  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948756  1 15 json_gui_to_db() operator() switch ARRAY child name= file_event_count, value=int(0)
09-16 14:40:25.948765  1 16 json_node_t() makeChild() node_name=<file_event_count>
09-16 14:40:25.948773  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948787  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948828  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948839  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948850  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948861  1 15 json_gui_to_db() operator() switch ARRAY child name= file_size_MB, value=int(8000)
09-16 14:40:25.948870  1 16 json_node_t() makeChild() node_name=<file_size_MB>
09-16 14:40:25.948878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948922  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948934  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948945  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948957  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948968  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:40:25.948978  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:40:25.948986  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949000  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949029  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949041  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949052  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949064  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.949074  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:40:25.949084  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:25.949091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949105  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949120  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949134  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949156  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949168  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.949179  1 15 json_gui_to_db() operator() switch ARRAY child name= onmon_event_prescale, value=int(1)
09-16 14:40:25.949188  1 16 json_node_t() makeChild() node_name=<onmon_event_prescale>
09-16 14:40:25.949196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949261  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949274  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.949289  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:40:25.949298  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:40:25.949306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949349  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949371  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949384  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.949417  1 15 json_gui_to_db() operator() switch ARRAY child name= xmlrpc_client_list, value=std::string(;http://topol.fnal.gov:5205/RPC2,3;http://topol.fnal.gov:5206/RPC2,3;http://topol.fnal.gov:5235/RPC2,4;http://topol.fnal.gov:5236/RPC2,4;http://topol.fnal.gov:5265/RPC2,5;http://topol.fnal.gov:5266/RPC2,5)
09-16 14:40:25.949429  1 16 json_node_t() makeChild() node_name=<xmlrpc_client_list>
09-16 14:40:25.949437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949453  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949469  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949495  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949513  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949526  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.949537  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:25.949546  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:25.949554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949583  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949620  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949632  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.949642  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:25.949649  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949678  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949707  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949720  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:25.949727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949740  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.949749  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.949756  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.949763  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.949772  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949784  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.949794  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:40:25.949801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949831  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949844  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949860  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949873  1 16 json_node_t() makeChild() node_name=<aggFile>
09-16 14:40:25.949881  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949894  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.949903  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.949910  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.949917  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.949925  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949938  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.949949  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/aggregator/agg_%UID%_metrics.log)
09-16 14:40:25.949958  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:40:25.949966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950010  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950022  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950033  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950045  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.950056  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:40:25.950065  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:40:25.950073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950128  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950139  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950151  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.950162  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:40:25.950171  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:40:25.950178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950193  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950222  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950234  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950244  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950256  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.950266  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:40:25.950275  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:40:25.950283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950338  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950352  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950364  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.950374  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:25.950381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950417  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950430  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950446  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950459  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:25.950467  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950480  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.950489  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.950497  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.950503  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.950514  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950528  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.950537  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:25.950545  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950559  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950576  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950589  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950605  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950617  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:25.950626  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950638  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.950647  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.950655  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.950661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.950670  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950682  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.950691  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:25.950699  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950713  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950741  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950757  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950769  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:25.950777  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950789  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.950798  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.950806  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.950812  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.950822  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950835  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.950845  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:25.950852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950867  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950896  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950911  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950924  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:25.950932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950944  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.950953  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.950961  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.950967  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.950976  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950988  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.950998  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:25.951005  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951035  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951076  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:25.951084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951096  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.951105  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.951113  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.951120  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.951128  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951140  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.951152  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:25.951160  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.951167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951225  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951236  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.951245  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:40:25.951252  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:25.951259  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951270  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951282  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951293  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951312  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951322  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.951329  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:25.951336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951369  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951381  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951391  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:25.951402  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951412  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.951420  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.951426  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.951431  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.951438  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951449  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.951458  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:25.951465  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.951472  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951495  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951516  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951525  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951536  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.951546  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:40:25.951555  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:25.951561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951574  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951618  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951628  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.951639  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:25.951645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951683  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:25.951691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951715  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951917  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951944  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.951952  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.951959  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.951964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.951975  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951991  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.952001  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:40:25.952008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952025  1 16 json_node_t() makeChild() node_name=<p2>
09-16 14:40:25.952033  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952048  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952092  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952104  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.952113  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.952119  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.952124  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.952133  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(BuildInfo)
09-16 14:40:25.952151  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.952183  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.952196  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.952207  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:25.952215  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952232  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:25.952241  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952309  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.952318  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.952325  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.952331  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.952340  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:25.952348  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.952359  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.952372  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.952384  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:25.952391  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952412  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:25.952421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952435  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952449  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952478  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952490  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.952499  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.952507  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.952513  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.952522  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:25.952530  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.952541  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.952553  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.952562  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:25.952570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952586  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952614  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952640  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:25.952647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952659  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.952668  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.952676  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.952683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.952692  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.952710  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.952722  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:40:25.952734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952837  1 16 json_node_t() makeChild() node_name=<BuildInfo>
09-16 14:40:25.952845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952859  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.952870  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.952877  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.952884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.952892  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.952908  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.952921  1 15 json_gui_to_db() operator() switch ARRAY child name= instance_name, value=std::string(ArtdaqDemo)
09-16 14:40:25.952931  1 16 json_node_t() makeChild() node_name=<instance_name>
09-16 14:40:25.952938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952956  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952975  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952993  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953019  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953035  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.953046  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(ArtdaqDemoBuildInfo)
09-16 14:40:25.953055  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.953064  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953080  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953096  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953136  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953153  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.953165  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQAG)
09-16 14:40:25.953174  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:40:25.953182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953217  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953230  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953243  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953253  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953267  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.953278  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:25.953286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953320  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953333  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953349  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953364  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:25.953373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953387  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.953406  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.953415  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.953421  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.953430  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953444  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.953456  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:25.953465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953515  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953530  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953544  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:25.953553  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953568  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.953578  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.953586  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.953595  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.953604  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953620  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.953637  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:25.953649  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:25.953659  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953673  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953718  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953728  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953740  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.953751  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:40:25.953760  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:40:25.953767  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953782  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953808  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953820  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953832  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953845  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.953855  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:25.953862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953933  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:25.953940  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953951  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.953960  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.953967  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.953973  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.953981  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953993  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.954003  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:40:25.954011  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:40:25.954017  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954031  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954057  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954068  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954080  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.954093  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.954102  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:25.954110  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954125  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954152  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954181  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:25.954188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954200  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.954209  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.954216  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.954222  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.954230  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.954242  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.954253  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NetMonInput)
09-16 14:40:25.954262  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.954269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954285  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954326  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954364  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:40:25.954484  1 14 json_gui_to_db() created db_node
09-16 14:40:25.966378  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.12 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_001_t" end time: Sep 16 14:40 CDT
"Convert_GUIJson2DBJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

4/65 Testing: JSONDocument_replaceChild_004_t
4/65 Test: JSONDocument_replaceChild_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/JSONDocument_replaceChild_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/test004.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test004/JSONDocument_replaceChild_004_t.d
"JSONDocument_replaceChild_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.931200  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.932889  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.932902  1  5 findChild() args  path=<operation>
09-16 14:40:25.937961  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.941642  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.941686  1  5 findChild() found child value=std::string(replaceChild)
09-16 14:40:25.941849  1  5 findChild() resultDocument=<{
"operation" : "replaceChild"
}>
09-16 14:40:25.941857  1  5 findChild() Find succeeded.
09-16 14:40:25.944975  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.944989  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.945900  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.946352  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.946368  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.946497  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.946505  1  5 findChild() Find succeeded.
09-16 14:40:25.948900  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.948910  1  5 findChild() args  path=<delta>
09-16 14:40:25.949752  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.950113  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.950129  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.950238  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.950246  1  5 findChild() Find succeeded.
09-16 14:40:25.952252  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.952261  1  5 findChild() args  path=<path>
09-16 14:40:25.952941  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.953296  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.953317  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.953444  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.953454  1  5 findChild() Find succeeded.
09-16 14:40:25.955430  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.955451  1  5 findChild() args  path=<end-state>
09-16 14:40:25.956345  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.956684  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.956702  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.956809  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.956817  1  5 findChild() Find succeeded.
09-16 14:40:25.959061  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.959071  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.959819  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.960130  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.960146  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.960252  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.960261  1  5 findChild() Find succeeded.
09-16 14:40:25.962459  1  5 findChild() begin _json_buffer=<{
    "operation" : "replaceChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.962468  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.963175  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.963467  1  5 findChild() recurse() args currentView=<{
"operation" : "replaceChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 0
}>
09-16 14:40:25.963520  1  5 findChild() found child value=int(0)
09-16 14:40:25.963623  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:40:25.963631  1  5 findChild() Find succeeded.
09-16 14:40:25.965534  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data2" : {
            "a" : 1, 
            "b" : [
                1, 
                2, 
                3
            ]
        }, 
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:40:25.965545  1  4 replaceChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:40:25.965551  1  4 replaceChild() args  path=<document.data>
09-16 14:40:25.966811  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.966827  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.967648  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data2" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.967660  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.968002  1  4 replaceChild() recurse() args childValue=<{
"data2" : {
"a" : 1,
"b" : [
1,
2,
3
]
},
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:40:25.968012  1  4 replaceChild() recurse() Error: Replace failed fordata, search path =<document.data>.
Running test:<replaceChild>
<end of output>
Test time =   0.22 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_replaceChild_004_t" end time: Sep 16 14:40 CDT
"JSONDocument_replaceChild_004_t" time elapsed: 00:00:00
----------------------------------------------------------

14/65 Testing: JSONDocumentBuilder_buildDocument_003_t
14/65 Test: JSONDocumentBuilder_buildDocument_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/JSONDocumentBuilder_buildDocument_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/test003.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/end-state.json" "--skip-return-code" "247" "JSONDocumentBuilder_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocumentBuilder/test003/JSONDocumentBuilder_buildDocument_003_t.d
"JSONDocumentBuilder_buildDocument_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.924625  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.924742  1  0 artdaq::database::JSONDocumentBuilder trace_enable
09-16 14:40:25.926248  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.926258  1  5 findChild() args  path=<operation>
09-16 14:40:25.930800  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.934002  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:40:25.934044  1  5 findChild() found child value=std::string(buildDocument)
09-16 14:40:25.934205  1  5 findChild() resultDocument=<{
"operation" : "buildDocument"
}>
09-16 14:40:25.934213  1  5 findChild() Find succeeded.
09-16 14:40:25.936900  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.936913  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.937385  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.937622  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:40:25.937639  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.937840  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.937848  1  5 findChild() Find succeeded.
09-16 14:40:25.940239  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.940252  1  5 findChild() args  path=<end-state>
09-16 14:40:25.940736  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.940974  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:40:25.940990  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.941098  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.941107  1  5 findChild() Find succeeded.
09-16 14:40:25.943275  1  5 findChild() begin _json_buffer=<{
    "operation" : "buildDocument", 
    "begin-state" : "begin-state.json", 
    "end-state" : "end-state.json", 
    "must-succeed" : 0
}>
09-16 14:40:25.943285  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.947836  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.948085  1  5 findChild() recurse() args currentView=<{
"operation" : "buildDocument",
"begin-state" : "begin-state.json",
"end-state" : "end-state.json",
"must-succeed" : 0
}>
09-16 14:40:25.948147  1  5 findChild() found child value=int(0)
09-16 14:40:25.948263  1  5 findChild() resultDocument=<{
"must-succeed" : 0
}>
09-16 14:40:25.948272  1  5 findChild() Find succeeded.
09-16 14:40:25.950250  1  2 createFrom() args  document=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.950372  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.950382  1  5 findChild() args  path=<document.metadata>
09-16 14:40:25.956868  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.958768  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.958781  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.959336  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.959358  1  5 findChild() found child value=object(...)
09-16 14:40:25.959547  1  5 findChild() resultDocument=<{
"document.metadata" : {
"comments" : {
"empty" : "empty"
}
}
}>
09-16 14:40:25.959555  1  5 findChild() Find succeeded.
09-16 14:40:25.959618  1  2 createFrom() Found document.metadata=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:40:25.959634  1  4 replaceChild() begin _json_buffer=<{
    "document" : {
        "data" : {

        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "version" : "default", 
    "configurations" : [

    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "changelog" : "empty", 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [

        ]
    }
}>
09-16 14:40:25.959644  1  4 replaceChild() args  newChild=<{
    "document.metadata" : {
        "comments" : {
            "empty" : "empty"
        }
    }
}>
09-16 14:40:25.959650  1  4 replaceChild() args  path=<document.metadata>
09-16 14:40:25.961670  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.961688  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.962646  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.962661  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.963007  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.963065  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.964005  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.964142  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.964151  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.964203  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.964213  1  5 findChild() args  path=<changelog>
09-16 14:40:25.966141  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.967342  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.967354  1  5 findChild() recurse() Error: Search failed for json element name=changelog, search path =<changelog>.
09-16 14:40:25.967742  1  2 createFrom() No converted.changelog
09-16 14:40:25.967771  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "version" : "version1", 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations" : [
        "config1"
    ], 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.967779  1  5 findChild() args  path=<document.data>
09-16 14:40:25.969681  1  5 findChild() recurse() args currentDepth=1
09-16 14:40:25.970917  1  5 findChild() recurse() args currentView=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"version" : "version1",
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"configurations" : [
"config1"
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
"Tue Dec 29 18:19:25 2015"
]
}
}>
09-16 14:40:25.970930  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.971498  1  5 findChild() recurse() args currentView=<{
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.971517  1  5 findChild() found child value=object(...)
09-16 14:40:25.971823  1  5 findChild() resultDocument=<{
"document.data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
}
}>
09-16 14:40:25.971832  1  5 findChild() Find succeeded.
09-16 14:40:25.971907  1  2 createFrom() Found document.data=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.971917  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.971924  1  4 replaceChild() args  newChild=<{
    "document.data" : {
        "aa" : 3, 
        "b" : {
            "c" : "2", 
            "dd" : [
                2, 
                5, 
                6, 
                7
            ]
        }
    }
}>
09-16 14:40:25.971930  1  4 replaceChild() args  path=<document.data>
09-16 14:40:25.973298  1  4 replaceChild() new child value=object(...)
09-16 14:40:25.973306  1  4 replaceChild() recurse() args currentDepth=1
09-16 14:40:25.973901  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.973912  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:25.974117  1  4 replaceChild() recurse() args childValue=<{
"data" : {

},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
}>
09-16 14:40:25.974130  1  4 replaceChild() found child value=object(...)
09-16 14:40:25.974781  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.974798  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.974802  1  4 replaceChild() Replace succeeded.
09-16 14:40:25.974844  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"aa" : 3,
"b" : {
"c" : "2",
"dd" : [
2,
5,
6,
7
]
}
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "default",
"configurations" : [

],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [

]
}
}>
09-16 14:40:25.974851  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "aa" : 3, 
            "b" : {
                "c" : "2", 
                "dd" : [
                    2, 
                    5, 
                    6, 
                    7
                ]
            }
        }, 
        "metadata" : {
            "comments" : {
                "empty" : "empty"
            }
        }, 
        "search" : [
            {
                "name" : "find any", 
                "query" : "not defined"
            }
        ]
    }, 
    "source" : {
        "encoding" : "base64", 
        "format" : "json", 
        "rawdata" : "as"
    }, 
    "configurations-error" : [
        "config1"
    ], 
    "version" : "version1", 
    "aliases" : {
        "active" : [

        ], 
        "history" : [

        ]
    }, 
    "bookkeeping" : {
        "isdeleted" : false, 
        "isreadonly" : true, 
        "created" : "Tue Dec 29 18:19:25 2015", 
        "updates" : [
            "Tue Dec 29 18:19:25 2015"
        ]
    }
}>
09-16 14:40:25.976654  1 10 matches() JSON buffers are not equal.
09-16 14:40:25.976661  1 10 matches() Error message=<Objects have different sizes <object(...),object(...)>>
Running test:<buildDocument>
<end of output>
Test time =   0.22 sec
----------------------------------------------------------
Test Passed.
"JSONDocumentBuilder_buildDocument_003_t" end time: Sep 16 14:40 CDT
"JSONDocumentBuilder_buildDocument_003_t" time elapsed: 00:00:00
----------------------------------------------------------

34/65 Testing: Convert_GUIJson2DBJson_004_t
34/65 Test: Convert_GUIJson2DBJson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test004.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_004_t.d
"Convert_GUIJson2DBJson_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.909689  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:25.913175  1 14 json_gui_to_db() begin
09-16 14:40:25.943281  1 14 json_gui_to_db() read guiAST
09-16 14:40:25.943468  1 14 json_gui_to_db() created dbAST
09-16 14:40:25.943574  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.943628  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.943659  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.943711  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.943848  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.943916  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:25.943964  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944023  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944074  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944115  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944167  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944184  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:25.944191  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944204  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.944215  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.944223  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.944229  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.944240  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.944254  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.944263  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:25.944270  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944284  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944339  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:25.944346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944358  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.944366  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.944373  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.944379  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.944388  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.944485  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.944592  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:40:25.944608  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:40:25.944617  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944636  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944653  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944667  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944679  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944719  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.944732  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.944742  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:40:25.944752  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:40:25.944759  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944804  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944815  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944824  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.944837  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.944847  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:40:25.944856  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:40:25.944863  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944908  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944929  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.944941  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.944951  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:25.944960  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:25.944966  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.944995  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945028  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.945039  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.945054  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:40:25.945063  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:40:25.945069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945082  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945107  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945127  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.945138  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.945146  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:40:25.945154  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:40:25.945161  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945174  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945188  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945201  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945222  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.945234  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.945243  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:40:25.945251  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:40:25.945258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945286  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945313  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945334  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.945347  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.945357  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:25.945366  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:25.945373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945388  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945412  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945426  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945438  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945449  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.945461  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.945470  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:25.945477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945491  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945506  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945519  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945550  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:25.945557  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945568  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.945579  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.945587  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.945594  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.945603  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.945616  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.945625  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:40:25.945633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945648  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945674  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945703  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:40:25.945710  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945721  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.945729  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.945736  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.945742  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.945750  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.945763  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.945805  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:40:25.945816  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:40:25.945824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945838  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945890  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.945903  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.945913  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:40:25.945922  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:40:25.945929  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945942  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945956  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945969  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945980  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.945990  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.946003  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.946013  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:40:25.946021  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:40:25.946028  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946042  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946055  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946080  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946089  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.946102  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.946111  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:40:25.946119  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:40:25.946127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946157  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946197  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.946212  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.946222  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:25.946229  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946245  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946273  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946289  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946303  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:25.946311  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946324  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.946332  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.946339  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.946345  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.946353  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.946366  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.946376  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:40:25.946384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946424  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946438  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946458  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946474  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:40:25.946482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946496  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.946506  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.946513  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.946526  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.946534  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.946548  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.946557  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.946565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946608  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946636  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.946645  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946657  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.946666  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.946673  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.946680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.946688  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.946701  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.946715  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.946722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946792  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.946802  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.946830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947212  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947260  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.947270  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.947278  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.947285  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.947297  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:40:25.947329  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.947369  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:40:25.947377  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.947391  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.947416  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.947428  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:40:25.947438  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.947447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947482  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947522  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.947538  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.947547  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:25.947554  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947568  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947582  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947620  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:25.947628  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947639  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.947647  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.947654  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.947661  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.947669  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.947681  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.947689  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:25.947696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947709  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947723  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947735  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947750  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947761  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:25.947769  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947780  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.947788  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.947795  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.947801  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.947811  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.947823  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.947832  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:25.947839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947852  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947866  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947904  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:25.947912  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947924  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.947933  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.947941  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.947947  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.947956  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.947968  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.947977  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:25.947985  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.947999  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948040  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948053  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:25.948061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948072  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.948081  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.948088  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.948094  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.948102  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948114  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.948125  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:25.948133  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.948140  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948153  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948168  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948181  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948192  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948201  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948213  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948224  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:40:25.948232  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:25.948239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948252  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948266  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948279  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948302  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948314  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.948323  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:25.948330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948343  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948356  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948368  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948382  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948394  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:25.948406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948419  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.948428  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.948436  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.948443  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.948452  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948465  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.948476  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:25.948485  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.948493  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948508  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948523  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948550  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948560  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948573  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948585  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:40:25.948594  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:25.948602  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948616  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948630  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948643  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948654  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948666  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948678  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.948689  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:40:25.948696  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948713  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:40:25.948720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948733  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948746  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948788  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948802  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.948810  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.948818  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.948824  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.948833  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:40:25.948841  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.948853  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948866  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.948877  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:25.948885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948901  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:25.948910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948968  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948979  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.948987  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.948994  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.948999  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.949010  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949021  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.949031  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:25.949039  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949055  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:25.949063  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949121  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949133  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.949142  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.949149  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.949155  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.949165  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:25.949173  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.949185  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949197  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.949208  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:25.949215  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949231  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:25.949239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949254  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949268  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949298  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949311  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.949319  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.949326  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.949332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.949341  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:25.949349  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.949360  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949373  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.949383  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:25.949390  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949425  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949452  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949466  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:25.949473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949484  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.949493  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.949500  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.949506  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.949517  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949529  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.949539  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:40:25.949548  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:40:25.949556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949570  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949584  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949597  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949610  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949620  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949632  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.949640  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:25.949647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949675  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949716  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:25.949724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949737  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.949745  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.949752  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.949758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.949766  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949779  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.949788  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:25.949795  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949825  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949839  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949855  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949868  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:25.949876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949889  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.949898  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.949905  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.949911  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.949920  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949933  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.949944  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:40:25.949954  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:40:25.949961  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949977  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949993  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950007  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950031  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950044  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.950055  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:40:25.950064  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:40:25.950071  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950086  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950101  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950127  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950139  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950151  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.950162  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:25.950171  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:25.950179  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950194  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950210  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950225  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950249  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950262  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.950274  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:40:25.950283  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:25.950290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950335  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950346  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950357  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950369  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.950380  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:40:25.950388  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:40:25.950400  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950415  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950453  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950465  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950477  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.950486  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:25.950494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950507  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950521  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950532  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950547  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950558  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:25.950566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950577  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.950585  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.950592  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.950599  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.950606  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950618  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.950627  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:40:25.950636  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:40:25.950643  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950656  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950671  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950683  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950704  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950715  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.950725  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:40:25.950733  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:40:25.950740  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950771  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950785  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950810  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950822  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.950830  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:25.950837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950851  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950876  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950891  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950902  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:25.950910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950921  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.950930  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.950936  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.950943  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.950950  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950962  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.950972  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:40:25.950979  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950994  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:40:25.951002  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951016  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951074  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.951082  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.951089  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.951095  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.951111  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.951129  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.951141  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.951148  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.951158  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.951165  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.951175  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.951183  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.951193  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.951200  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.951210  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.951219  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.951232  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951245  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.951256  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:40:25.951264  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.951272  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951336  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951347  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.951356  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:40:25.951365  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:40:25.951372  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951386  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951404  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951418  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951429  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951439  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951451  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.951461  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:40:25.951470  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:40:25.951477  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951490  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951504  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951517  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951559  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:40:25.951653  1 14 json_gui_to_db() created db_node
09-16 14:40:25.965198  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.22 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_004_t" end time: Sep 16 14:40 CDT
"Convert_GUIJson2DBJson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

8/65 Testing: JSONDocument_insertChild_104_t
8/65 Test: JSONDocument_insertChild_104_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/JSONDocument_insertChild_104_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/test104.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/begin-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/end-state.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/operation-delta.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/returned-value.json" "--skip-return-code" "247" "JSONDocument_t" "-c" "test104.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/JsonDocument/JSONDocument/test104/JSONDocument_insertChild_104_t.d
"JSONDocument_insertChild_104_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.920841  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:25.922504  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.922517  1  5 findChild() args  path=<operation>
09-16 14:40:25.927580  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.931181  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.931224  1  5 findChild() found child value=std::string(insertChild)
09-16 14:40:25.931386  1  5 findChild() resultDocument=<{
"operation" : "insertChild"
}>
09-16 14:40:25.931398  1  5 findChild() Find succeeded.
09-16 14:40:25.933772  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.933782  1  5 findChild() args  path=<begin-state>
09-16 14:40:25.934516  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.934831  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.934847  1  5 findChild() found child value=std::string(begin-state.json)
09-16 14:40:25.934952  1  5 findChild() resultDocument=<{
"begin-state" : "begin-state.json"
}>
09-16 14:40:25.934960  1  5 findChild() Find succeeded.
09-16 14:40:25.946329  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.946341  1  5 findChild() args  path=<delta>
09-16 14:40:25.947246  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.952622  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.952650  1  5 findChild() found child value=std::string(operation-delta.json)
09-16 14:40:25.952998  1  5 findChild() resultDocument=<{
"delta" : "operation-delta.json"
}>
09-16 14:40:25.953014  1  5 findChild() Find succeeded.
09-16 14:40:25.955158  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.955177  1  5 findChild() args  path=<path>
09-16 14:40:25.956150  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.956551  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.956569  1  5 findChild() found child value=std::string(document.data)
09-16 14:40:25.956676  1  5 findChild() resultDocument=<{
"path" : "document.data"
}>
09-16 14:40:25.956684  1  5 findChild() Find succeeded.
09-16 14:40:25.958542  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.958553  1  5 findChild() args  path=<end-state>
09-16 14:40:25.959298  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.959619  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.959633  1  5 findChild() found child value=std::string(end-state.json)
09-16 14:40:25.959741  1  5 findChild() resultDocument=<{
"end-state" : "end-state.json"
}>
09-16 14:40:25.959749  1  5 findChild() Find succeeded.
09-16 14:40:25.961824  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.961833  1  5 findChild() args  path=<returned-value>
09-16 14:40:25.962538  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.962849  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.962864  1  5 findChild() found child value=std::string(returned-value.json)
09-16 14:40:25.962967  1  5 findChild() resultDocument=<{
"returned-value" : "returned-value.json"
}>
09-16 14:40:25.962976  1  5 findChild() Find succeeded.
09-16 14:40:25.965024  1  5 findChild() begin _json_buffer=<{
    "operation" : "insertChild", 
    "path" : "document.data", 
    "begin-state" : "begin-state.json", 
    "delta" : "operation-delta.json", 
    "end-state" : "end-state.json", 
    "returned-value" : "returned-value.json", 
    "must-succeed" : 1
}>
09-16 14:40:25.965033  1  5 findChild() args  path=<must-succeed>
09-16 14:40:25.965697  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.966002  1  5 findChild() recurse() args currentView=<{
"operation" : "insertChild",
"path" : "document.data",
"begin-state" : "begin-state.json",
"delta" : "operation-delta.json",
"end-state" : "end-state.json",
"returned-value" : "returned-value.json",
"must-succeed" : 1
}>
09-16 14:40:25.966050  1  5 findChild() found child value=int(1)
09-16 14:40:25.966157  1  5 findChild() resultDocument=<{
"must-succeed" : 1
}>
09-16 14:40:25.966164  1  5 findChild() Find succeeded.
09-16 14:40:25.968001  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ]
    }
}>
09-16 14:40:25.968011  1  2 insertChild() args  newChild=<{
    "payload" : {
        "a" : 1, 
        "b" : [
            6, 
            6, 
            8
        ]
    }
}>
09-16 14:40:25.968017  1  2 insertChild() args  path=<document.data>
09-16 14:40:25.968913  1  4 insertChild() new child value=object(...)
09-16 14:40:25.968930  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.969542  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}
}>
09-16 14:40:25.969555  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.969732  1  4 insertChild() recurse() args childValue=<{
"data1" : "aa",
"bbb" : [
1,
2,
3
]
}>
09-16 14:40:25.969774  1  4 insertChild() found child value=object(...)
09-16 14:40:25.970155  1  4 insertChild() resultDocument=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:40:25.970325  1  4 insertChild() insertChild=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:40:25.970335  1  4 insertChild() Insert succeeded.
09-16 14:40:25.970406  1 10 operator==() begin _json_buffer=<{
"document" : {
"data1" : "aa",
"bbb" : [
1,
2,
3
],
"data" : {
"a" : 1,
"b" : [
6,
6,
8
]
}
}
}>
09-16 14:40:25.970416  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data1" : "aa", 
        "bbb" : [
            1, 
            2, 
            3
        ], 
        "data" : {
            "a" : 1, 
            "b" : [
                6, 
                6, 
                8
            ]
        }
    }
}>
09-16 14:40:25.971719  1 10 matches() JSON buffers are equal.
09-16 14:40:25.971739  1 10 operator==() begin _json_buffer=<{
    "a" : 1, 
    "b" : [
        6, 
        6, 
        8
    ]
}>
09-16 14:40:25.971746  1 10 operator==() args  other.__json_buffer=<{
    "a" : 1, 
    "b" : [
        6, 
        6, 
        8
    ]
}>
Running test:<insertChild>
<end of output>
Test time =   0.22 sec
----------------------------------------------------------
Test Passed.
"JSONDocument_insertChild_104_t" end time: Sep 16 14:40 CDT
"JSONDocument_insertChild_104_t" time elapsed: 00:00:00
----------------------------------------------------------

35/65 Testing: Convert_GUIJson2DBJson_005_t
35/65 Test: Convert_GUIJson2DBJson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test005.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test005.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test005.src.json" "-c" "test005.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_005_t.d
"Convert_GUIJson2DBJson_005_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:25.914115  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:25.916546  1 14 json_gui_to_db() begin
09-16 14:40:25.947549  1 14 json_gui_to_db() read guiAST
09-16 14:40:25.947742  1 14 json_gui_to_db() created dbAST
09-16 14:40:25.947840  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.947897  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.947942  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.947999  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948113  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.948165  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:25.948205  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948251  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948384  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948418  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:25.948442  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948469  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.948493  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.948514  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.948533  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.948554  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948579  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.948601  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:25.948621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948650  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948679  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948705  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948764  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:25.948787  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.948813  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.948836  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.948856  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.948876  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.948898  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.948923  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.948966  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:40:25.948992  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:40:25.949015  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949045  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949077  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949109  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949179  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949210  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.949236  1 15 json_gui_to_db() operator() switch ARRAY child name= first_fragment_receiver_rank, value=int(0)
09-16 14:40:25.949260  1 16 json_node_t() makeChild() node_name=<first_fragment_receiver_rank>
09-16 14:40:25.949281  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949310  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949438  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949466  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949494  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.949519  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_receiver_count, value=int(2)
09-16 14:40:25.949541  1 16 json_node_t() makeChild() node_name=<fragment_receiver_count>
09-16 14:40:25.949565  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949596  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949629  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949722  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949750  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.949776  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:25.949800  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:25.949822  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949880  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949909  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949936  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.949961  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.949988  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.950016  1 15 json_gui_to_db() operator() switch ARRAY child name= print_event_store_stats, value=bool(true)
09-16 14:40:25.950039  1 16 json_node_t() makeChild() node_name=<print_event_store_stats>
09-16 14:40:25.950061  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950090  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950119  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950151  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950181  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950207  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950233  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.950256  1 15 json_gui_to_db() operator() switch ARRAY child name= use_art, value=bool(true)
09-16 14:40:25.950280  1 16 json_node_t() makeChild() node_name=<use_art>
09-16 14:40:25.950301  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950329  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950359  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950419  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950444  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950470  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.950494  1 15 json_gui_to_db() operator() switch ARRAY child name= verbose, value=bool(false)
09-16 14:40:25.950516  1 16 json_node_t() makeChild() node_name=<verbose>
09-16 14:40:25.950537  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950566  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950598  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950633  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950692  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950720  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.950745  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:25.950769  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:25.950792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950821  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950879  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.950933  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.950961  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.950986  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:25.951008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951098  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951130  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951160  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:25.951182  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951209  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.951233  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.951254  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.951275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.951297  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951324  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.951349  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:40:25.951370  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951403  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951465  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951497  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951526  1 16 json_node_t() makeChild() node_name=<evbFile>
09-16 14:40:25.951549  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951577  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.951601  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.951622  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.951642  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.951666  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951693  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.951732  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/eventbuilder/evb_%UID%_metrics.log)
09-16 14:40:25.951760  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:40:25.951783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951813  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951845  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951875  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.951928  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.951957  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.951982  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:40:25.952005  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:40:25.952026  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952054  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952083  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952112  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952139  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952164  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.952190  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.952214  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:40:25.952237  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:40:25.952258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952287  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952316  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952345  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952404  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.952431  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.952454  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:40:25.952475  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:40:25.952496  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952525  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952556  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952587  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952612  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952640  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.952668  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.952697  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:25.952721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952755  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952792  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952859  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952890  1 16 json_node_t() makeChild() node_name=<outputs>
09-16 14:40:25.952916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.952945  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.952974  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.952997  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.953018  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.953040  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953069  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.953095  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:40:25.953117  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953149  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953181  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953264  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953296  1 16 json_node_t() makeChild() node_name=<rootMPIOutput>
09-16 14:40:25.953319  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953347  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.953372  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.953403  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.953424  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.953447  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953512  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.953565  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.953591  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953684  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953717  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953742  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.953762  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953786  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.953807  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.953826  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.953844  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.953864  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.953889  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.953915  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.953936  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.953996  1 16 json_node_t() makeChild() node_name=<SelectEvents>
09-16 14:40:25.954019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954046  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954075  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954358  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954418  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.954442  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.954462  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.954480  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.954502  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod2)
09-16 14:40:25.954538  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.954584  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(pmod3)
09-16 14:40:25.954606  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.954632  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.954661  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.954685  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RootMPIOutput)
09-16 14:40:25.954708  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.954727  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954835  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954861  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.954887  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.954909  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:25.954928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954954  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.954982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955008  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955037  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955063  1 16 json_node_t() makeChild() node_name=<physics>
09-16 14:40:25.955084  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955109  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.955130  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.955150  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.955169  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.955191  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.955220  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.955243  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:25.955265  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955294  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955354  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955420  1 16 json_node_t() makeChild() node_name=<analyzers>
09-16 14:40:25.955445  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955471  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.955495  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.955515  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.955534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.955557  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.955588  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.955612  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:25.955634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955723  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955780  1 16 json_node_t() makeChild() node_name=<filters>
09-16 14:40:25.955801  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.955826  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.955848  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.955868  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.955887  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.955910  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.955938  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.955962  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:25.955982  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956009  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956066  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956095  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956122  1 16 json_node_t() makeChild() node_name=<prescaleMod2>
09-16 14:40:25.956144  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956169  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.956192  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.956213  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.956234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.956256  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.956282  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.956306  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:25.956327  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.956347  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956409  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956438  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956464  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956488  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.956513  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.956539  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(2)
09-16 14:40:25.956561  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:25.956580  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956663  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956688  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956714  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.956739  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.956761  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:25.956781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956862  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956890  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956918  1 16 json_node_t() makeChild() node_name=<prescaleMod3>
09-16 14:40:25.956939  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.956964  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.956985  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.957004  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.957023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.957045  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.957070  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.957095  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(NthEvent)
09-16 14:40:25.957119  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.957141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957171  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957203  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957235  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957261  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957286  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.957312  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.957337  1 15 json_gui_to_db() operator() switch ARRAY child name= nth, value=int(3)
09-16 14:40:25.957359  1 16 json_node_t() makeChild() node_name=<nth>
09-16 14:40:25.957380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957413  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957443  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957502  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957532  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.957560  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.957585  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:40:25.957606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957637  1 16 json_node_t() makeChild() node_name=<my_output_modules>
09-16 14:40:25.957660  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957720  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957780  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.957807  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.957828  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.957848  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.957867  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.957889  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(rootMPIOutput)
09-16 14:40:25.957911  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.957940  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.957968  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.957992  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:25.958013  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958044  1 16 json_node_t() makeChild() node_name=<p1>
09-16 14:40:25.958067  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958097  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958129  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958178  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958208  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.958232  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.958254  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.958275  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.958301  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.958329  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.958356  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:25.958380  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958417  1 16 json_node_t() makeChild() node_name=<pmod2>
09-16 14:40:25.958441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958473  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958505  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958555  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958585  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.958623  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.958646  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.958680  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.958706  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod2)
09-16 14:40:25.958741  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.958770  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.958798  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.958826  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:25.958850  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958883  1 16 json_node_t() makeChild() node_name=<pmod3>
09-16 14:40:25.958907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958938  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.958970  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959020  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959049  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.959072  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.959093  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.959114  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.959138  1 15 json_gui_to_db() operator() switch ARRAY child value=std::string(prescaleMod3)
09-16 14:40:25.959160  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.959186  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.959215  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.959239  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:25.959262  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959292  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959322  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959351  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959383  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959417  1 16 json_node_t() makeChild() node_name=<producers>
09-16 14:40:25.959441  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959469  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.959493  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.959514  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.959534  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.959560  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.959588  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.959615  1 15 json_gui_to_db() operator() switch ARRAY child name= process_name, value=std::string(DAQ)
09-16 14:40:25.959639  1 16 json_node_t() makeChild() node_name=<process_name>
09-16 14:40:25.959661  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959691  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959722  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959752  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959807  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.959836  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.959863  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:25.959886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959915  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959948  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.959978  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960041  1 16 json_node_t() makeChild() node_name=<services>
09-16 14:40:25.960065  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960092  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.960114  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.960134  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.960152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.960173  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.960199  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.960221  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:25.960242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960299  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960327  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960357  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960384  1 16 json_node_t() makeChild() node_name=<NetMonTransportServiceInterface>
09-16 14:40:25.960408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960435  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.960460  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.960480  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.960501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.960521  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.960547  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.960572  1 15 json_gui_to_db() operator() switch ARRAY child name= data_receiver_count, value=int(1)
09-16 14:40:25.960594  1 16 json_node_t() makeChild() node_name=<data_receiver_count>
09-16 14:40:25.960615  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960642  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960672  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960700  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960726  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960750  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.960777  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.960805  1 15 json_gui_to_db() operator() switch ARRAY child name= first_data_receiver_rank, value=int(4)
09-16 14:40:25.960831  1 16 json_node_t() makeChild() node_name=<first_data_receiver_rank>
09-16 14:40:25.960853  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960883  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960916  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960947  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.960976  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961003  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.961032  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.961061  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:25.961085  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:25.961106  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961135  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961166  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961198  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961254  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.961281  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.961307  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(8)
09-16 14:40:25.961332  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:25.961355  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961454  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961509  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.961535  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.961561  1 15 json_gui_to_db() operator() switch ARRAY child name= service_provider, value=std::string(NetMonTransportService)
09-16 14:40:25.961585  1 16 json_node_t() makeChild() node_name=<service_provider>
09-16 14:40:25.961606  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961664  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961694  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961724  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961750  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.961776  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.961799  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:25.961819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961848  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961907  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.961966  1 16 json_node_t() makeChild() node_name=<scheduler>
09-16 14:40:25.961988  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962014  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.962037  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.962058  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.962077  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.962099  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.962126  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.962149  1 15 json_gui_to_db() operator() switch ARRAY child name= errorOnFailureToPut, value=bool(false)
09-16 14:40:25.962173  1 16 json_node_t() makeChild() node_name=<errorOnFailureToPut>
09-16 14:40:25.962197  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962258  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962291  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962323  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962350  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.962380  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.962412  1 15 json_gui_to_db() operator() switch ARRAY child name= fileMode, value=std::string(NOMERGE)
09-16 14:40:25.962439  1 16 json_node_t() makeChild() node_name=<fileMode>
09-16 14:40:25.962462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962494  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962528  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962561  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962592  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962623  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.962652  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:25.962676  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:25.962698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962758  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962787  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962817  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962847  1 16 json_node_t() makeChild() node_name=<source>
09-16 14:40:25.962870  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.962896  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:25.962920  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.962942  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.962964  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.962987  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.963014  1 15 json_gui_to_db() operator() switch ARRAY child type=sequence
09-16 14:40:25.963040  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:40:25.963062  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963093  1 16 json_node_t() makeChild() node_name=<fragment_type_map>
09-16 14:40:25.963116  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963175  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963254  1 15 json_gui_to_db() operator() switch ARRAY sequence
09-16 14:40:25.963277  1 15 json_gui_to_db() operator() begin
09-16 14:40:25.963297  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:25.963317  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:25.963348  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.963380  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.963411  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.963436  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.963462  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.963484  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.963509  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.963530  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.963555  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.963577  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.963601  1 15 json_gui_to_db() operator() switch ARRAY child value=array(...)
09-16 14:40:25.963624  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:25.963652  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.963679  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:25.963704  1 15 json_gui_to_db() operator() switch ARRAY child name= module_type, value=std::string(RawInput)
09-16 14:40:25.963734  1 16 json_node_t() makeChild() node_name=<module_type>
09-16 14:40:25.963756  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963794  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963854  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963885  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.963911  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.963936  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:25.963959  1 15 json_gui_to_db() operator() switch ARRAY child name= resume_after_timeout, value=bool(true)
09-16 14:40:25.963982  1 16 json_node_t() makeChild() node_name=<resume_after_timeout>
09-16 14:40:25.964006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964036  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964069  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964102  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964132  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964159  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:25.964189  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:25.964216  1 15 json_gui_to_db() operator() switch ARRAY child name= waiting_time, value=int(2500000)
09-16 14:40:25.964242  1 16 json_node_t() makeChild() node_name=<waiting_time>
09-16 14:40:25.964265  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964363  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964394  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:25.964449  1 14 json_gui_to_db() Found changelog in guiAST <Edit: comment>
09-16 14:40:25.964565  1 14 json_gui_to_db() created db_node
09-16 14:40:25.977262  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.22 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_005_t" end time: Sep 16 14:40 CDT
"Convert_GUIJson2DBJson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

60/65 Testing: FileSystemJson_search1_002_t
60/65 Test: FileSystemJson_search1_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/FileSystemJson_search1_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.src.418.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.cmp.418.json;/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/test002.opts.418.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test002.src.418.json" "-c" "test002.cmp.418.json" "-t" "search1" "-o" "test002.opts.418.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test002/FileSystemJson_search1_002_t.d
"FileSystemJson_search1_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
removed ‘test002.cmp.806.json’
removed ‘test002.opts.806.json’
removed ‘test002.src.806.json’
09-16 14:40:26.150296  1  0 artdaq::database::filesystem trace_enable
09-16 14:40:26.150433  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:40:26.150519  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:26.152952  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:26.153000  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "version418"
}, "collection":"testJSON_V001"}>
09-16 14:40:26.153170  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version418"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:26.153230  1  5 findChild() args  path=<collection>
09-16 14:40:26.159676  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.164089  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.164233  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:26.164438  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:26.164466  1  5 findChild() Find succeeded.
09-16 14:40:26.167650  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version418"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:26.167750  1  5 findChild() args  path=<filter>
09-16 14:40:26.168883  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.169614  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.169690  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:26.170579  1 12 StorageProvider::FileSystemDB generate_oid=ea36f53eb77a4e9e9f5f94a3
09-16 14:40:26.171800  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version418"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:26.171811  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "ea36f53eb77a4e9e9f5f94a3"
    }
}>
09-16 14:40:26.171817  1  2 insertChild() args  path=<document._id>
09-16 14:40:26.172664  1  4 insertChild() new child value=object(...)
09-16 14:40:26.172688  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:26.173081  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.173093  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:26.173409  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418"
}>
09-16 14:40:26.173472  1  4 insertChild() found child value=object(...)
09-16 14:40:26.173870  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418",
"_id" : {
"_oid" : "ea36f53eb77a4e9e9f5f94a3"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.173960  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418",
"_id" : {
"_oid" : "ea36f53eb77a4e9e9f5f94a3"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.173974  1  4 insertChild() Insert succeeded.
09-16 14:40:26.174030  1  4 StorageProvider::FileSystemDB::store() using generated oid=<ea36f53eb77a4e9e9f5f94a3>.
09-16 14:40:26.174077  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:26.174109  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.174155  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.174314  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/ea36f53eb77a4e9e9f5f94a3.json>.
09-16 14:40:26.174466  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418",
"_id" : {
"_oid" : "ea36f53eb77a4e9e9f5f94a3"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.174474  1  5 findChild() args  path=<document>
09-16 14:40:26.175078  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.175510  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418",
"_id" : {
"_oid" : "ea36f53eb77a4e9e9f5f94a3"
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.175531  1  5 findChild() found child value=object(...)
09-16 14:40:26.175941  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418",
"_id" : {
"_oid" : "ea36f53eb77a4e9e9f5f94a3"
}
}
}>
09-16 14:40:26.175950  1  5 findChild() Find succeeded.
09-16 14:40:26.179246  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:26.179292  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:26.179402  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.180176  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:26.180186  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }
                }
            }
        }, 
        "version" : "version418", 
        "_id" : {
            "_oid" : "ea36f53eb77a4e9e9f5f94a3"
        }
    }>.
09-16 14:40:26.180194  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<ea36f53eb77a4e9e9f5f94a3>.
09-16 14:40:26.180801  1  5 StorageProvider::FileSystemDB::index::addDocument() found 3 keys.
09-16 14:40:26.180830  1  7 StorageProvider::FileSystemDB::index::_addVersion() begin
09-16 14:40:26.180836  1  7 StorageProvider::FileSystemDB::index::_addVersion() args ouid=<ea36f53eb77a4e9e9f5f94a3>.
09-16 14:40:26.180843  1  7 StorageProvider::FileSystemDB::index::_addVersion() args version=<version418>.
09-16 14:40:26.181019  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:26.181026  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<version>
09-16 14:40:26.181031  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:26.181113  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=configurations
09-16 14:40:26.181140  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:26.181149  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:26.181821  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.181934  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:26.181960  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:26.181967  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{
 "version":"version418"
}
, "collection":"testJSON_V001"}>
09-16 14:40:26.182029  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "version" : "version418"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:26.182037  1  5 findChild() args  path=<collection>
09-16 14:40:26.182225  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.182337  1  5 findChild() recurse() args currentView=<{
"filter" : {
"version" : "version418"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.182354  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:26.182433  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:26.182440  1  5 findChild() Find succeeded.
09-16 14:40:26.183309  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "version" : "version418"
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:26.183317  1  5 findChild() args  path=<filter>
09-16 14:40:26.183486  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.183596  1  5 findChild() recurse() args currentView=<{
"filter" : {
"version" : "version418"
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.183612  1  5 findChild() found child value=object(...)
09-16 14:40:26.183703  1  5 findChild() resultDocument=<{
"filter" : {
"version" : "version418"
}
}>
09-16 14:40:26.183711  1  5 findChild() Find succeeded.
09-16 14:40:26.184689  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:26.184699  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.184712  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.184741  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:26.184747  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:26.184778  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.185059  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:26.185067  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "version" : "version418"
    }>.
09-16 14:40:26.185162  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:26.185274  1 14 StorageProvider::FileSystemDB::index::_matchVersion() begin
09-16 14:40:26.185282  1 14 StorageProvider::FileSystemDB::index::_matchVersion() args version=<version418>.
09-16 14:40:26.185299  1 15 StorageProvider::FileSystemDB::index::_matchConfiguration() Found 1 documents where version=version418
09-16 14:40:26.185332  1  3 StorageProvider::FileSystemDB::load() search returned 1 documents.
09-16 14:40:26.185463  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/ea36f53eb77a4e9e9f5f94a3.json>.
09-16 14:40:26.185537  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:26.185738  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.185804  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:26.185876  1  3 deleteChild() begin _json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "version418", 
    "_id" : {
        "_oid" : "ea36f53eb77a4e9e9f5f94a3"
    }
}>
09-16 14:40:26.185884  1  3 deleteChild() args  path=<_id>
09-16 14:40:26.186431  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:26.186781  1  3 deleteChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418",
"_id" : {
"_oid" : "ea36f53eb77a4e9e9f5f94a3"
}
}>
09-16 14:40:26.186841  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:26.187140  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418"
}>
09-16 14:40:26.187225  1  3 deleteChild() deletedChild=<{
"_oid" : "ea36f53eb77a4e9e9f5f94a3"
}>
09-16 14:40:26.187233  1  3 deleteChild() Delete succeeded.
09-16 14:40:26.187272  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t",
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
},
"version" : "version418"
}>
09-16 14:40:26.187282  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : "\" ddd \" \n \b \r AA \t", 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 16, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }, 
    "version" : "version418"
}>
09-16 14:40:26.188458  1 10 matches() JSON buffers are equal.
Running test:<search1>
Search criteria {"filter":{
 "version":"version418"
}
, "collection":"testJSON_V001"}
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_search1_002_t" end time: Sep 16 14:40 CDT
"FileSystemJson_search1_002_t" time elapsed: 00:00:00
----------------------------------------------------------

29/65 Testing: Convert_DBJson2GUIJson_003_t
29/65 Test: Convert_DBJson2GUIJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_003_t.d
"Convert_DBJson2GUIJson_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:26.130525  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:26.132337  1 10 json_db_to_gui() begin
09-16 14:40:26.140225  1 10 json_db_to_gui() read dbAST
09-16 14:40:26.140591  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.140646  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.140687  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.140732  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.140815  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.140846  1 11 json_db_to_gui() operator() switch OBJECT child name=<prolog>
09-16 14:40:26.140877  1 13 json_db_to_gui() child args name <prolog>
09-16 14:40:26.140884  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.140928  1 13 json_db_to_gui() metadata node was found, name=<prolog>
09-16 14:40:26.140937  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.140951  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.140959  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.141018  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.141083  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.141130  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.141137  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.141222  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.141229  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.141235  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.141242  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.141256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141262  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_0>
09-16 14:40:26.141270  1 13 json_db_to_gui() child args name <fhicl_pound_include_0>
09-16 14:40:26.141276  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141481  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_0>
09-16 14:40:26.141493  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.141499  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.141506  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.141517  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.141529  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.141542  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.141548  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141561  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.141597  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.141604  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141619  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.141626  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141660  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce_standard>
09-16 14:40:26.141671  1 13 json_db_to_gui() child args name <rce_standard>
09-16 14:40:26.141678  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141706  1 13 json_db_to_gui() metadata node was found, name=<rce_standard>
09-16 14:40:26.141716  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.141723  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.141730  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.141742  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.141754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.141769  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.141775  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141787  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.141800  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.141806  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.141813  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.141819  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.141833  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141840  1 11 json_db_to_gui() operator() switch OBJECT child name=<metrics>
09-16 14:40:26.141848  1 13 json_db_to_gui() child args name <metrics>
09-16 14:40:26.141854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141881  1 13 json_db_to_gui() metadata node was found, name=<metrics>
09-16 14:40:26.141889  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.141895  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.141901  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.141912  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.141923  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.141935  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.141941  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141952  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.141964  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.141970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141982  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.141988  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.141998  1 11 json_db_to_gui() operator() switch OBJECT child name=<max_fragment_size_words>
09-16 14:40:26.142006  1 13 json_db_to_gui() child args name <max_fragment_size_words>
09-16 14:40:26.142013  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142040  1 13 json_db_to_gui() metadata node was found, name=<max_fragment_size_words>
09-16 14:40:26.142049  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.142055  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.142061  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.142072  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.142084  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142097  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.142103  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142115  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142139  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.142146  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142158  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.142164  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142175  1 11 json_db_to_gui() operator() switch OBJECT child name=<fragment_receiver>
09-16 14:40:26.142184  1 13 json_db_to_gui() child args name <fragment_receiver>
09-16 14:40:26.142191  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142219  1 13 json_db_to_gui() metadata node was found, name=<fragment_receiver>
09-16 14:40:26.142228  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.142235  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.142241  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.142253  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.142265  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142277  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.142284  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142298  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142312  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.142319  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.142325  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.142331  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.142347  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142355  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_buffer_count>
09-16 14:40:26.142364  1 13 json_db_to_gui() child args name <mpi_buffer_count>
09-16 14:40:26.142370  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142403  1 13 json_db_to_gui() metadata node was found, name=<mpi_buffer_count>
09-16 14:40:26.142413  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.142420  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.142426  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.142437  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.142449  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142462  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.142468  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142481  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142495  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.142501  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142513  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.142519  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142528  1 11 json_db_to_gui() operator() switch OBJECT child name=<mpi_sync_interval>
09-16 14:40:26.142536  1 13 json_db_to_gui() child args name <mpi_sync_interval>
09-16 14:40:26.142542  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142568  1 13 json_db_to_gui() metadata node was found, name=<mpi_sync_interval>
09-16 14:40:26.142577  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.142583  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.142589  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.142600  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.142611  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142623  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.142629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142641  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142653  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.142659  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142670  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.142676  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142695  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.142701  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142713  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.142719  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142728  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:26.142738  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:26.142744  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142771  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:26.142781  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.142787  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.142793  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.142805  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.142818  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142832  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.142839  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142852  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.142865  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.142870  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142883  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.142889  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142901  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_1>
09-16 14:40:26.142910  1 13 json_db_to_gui() child args name <fhicl_pound_include_1>
09-16 14:40:26.142917  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.142943  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_1>
09-16 14:40:26.142951  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.142958  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.142965  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.142976  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.142989  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143003  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.143009  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143022  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143035  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.143042  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143054  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.143061  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143071  1 11 json_db_to_gui() operator() switch OBJECT child name=<fhicl_pound_include_2>
09-16 14:40:26.143080  1 13 json_db_to_gui() child args name <fhicl_pound_include_2>
09-16 14:40:26.143086  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143112  1 13 json_db_to_gui() metadata node was found, name=<fhicl_pound_include_2>
09-16 14:40:26.143122  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.143129  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.143135  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.143146  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.143158  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143173  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.143180  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143194  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143208  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.143214  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143227  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.143234  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143246  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce_standard>
09-16 14:40:26.143255  1 13 json_db_to_gui() child args name <rce_standard>
09-16 14:40:26.143261  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143287  1 13 json_db_to_gui() metadata node was found, name=<rce_standard>
09-16 14:40:26.143297  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.143304  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.143311  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.143322  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.143333  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143346  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.143352  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143368  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143383  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.143390  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143430  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143437  1 11 json_db_to_gui() missing annotation for string data; keyrce_standard
09-16 14:40:26.143451  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.143458  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143470  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard>
09-16 14:40:26.143480  1 13 json_db_to_gui() child args name <rce04_standard>
09-16 14:40:26.143487  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143513  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard>
09-16 14:40:26.143522  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.143528  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.143534  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.143546  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.143559  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143573  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.143580  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143593  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143607  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.143615  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143628  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.143634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143643  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:40:26.143652  1 13 json_db_to_gui() child args name <rce04_standard.fragment_receiver.fragment_id>
09-16 14:40:26.143658  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143683  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard.fragment_receiver.fragment_id>
09-16 14:40:26.143692  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.143698  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.143704  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.143715  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.143727  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143739  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.143745  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143758  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143773  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.143780  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143793  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.143799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143810  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce04_standard.fragment_receiver.board_id>
09-16 14:40:26.143819  1 13 json_db_to_gui() child args name <rce04_standard.fragment_receiver.board_id>
09-16 14:40:26.143825  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143852  1 13 json_db_to_gui() metadata node was found, name=<rce04_standard.fragment_receiver.board_id>
09-16 14:40:26.143862  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.143868  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.143875  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.143887  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.143899  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143913  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.143920  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143933  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.143948  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.143954  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143968  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.143975  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.143989  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.143996  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144007  1 11 json_db_to_gui() operator() switch OBJECT child name=<main>
09-16 14:40:26.144017  1 13 json_db_to_gui() child args name <main>
09-16 14:40:26.144023  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144031  1 13 json_db_to_gui() metadata node was found, name=<main>
09-16 14:40:26.144039  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.144045  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.144051  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.144063  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.144075  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.144089  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.144096  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144109  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.144124  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.144131  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.144138  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.144145  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.144162  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144170  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard>
09-16 14:40:26.144179  1 13 json_db_to_gui() child args name <rce05_standard>
09-16 14:40:26.144185  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144211  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard>
09-16 14:40:26.144220  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.144226  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.144233  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.144244  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.144256  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.144270  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.144277  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144290  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.144304  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.144311  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144325  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.144332  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144343  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:40:26.144352  1 13 json_db_to_gui() child args name <rce05_standard.fragment_receiver.fragment_id>
09-16 14:40:26.144359  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144384  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard.fragment_receiver.fragment_id>
09-16 14:40:26.144394  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.144405  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.144411  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.144423  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.144436  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.144449  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.144456  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144470  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.144483  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.144489  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144503  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.144510  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144521  1 11 json_db_to_gui() operator() switch OBJECT child name=<rce05_standard.fragment_receiver.board_id>
09-16 14:40:26.144530  1 13 json_db_to_gui() child args name <rce05_standard.fragment_receiver.board_id>
09-16 14:40:26.144536  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144563  1 13 json_db_to_gui() metadata node was found, name=<rce05_standard.fragment_receiver.board_id>
09-16 14:40:26.144572  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.144579  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.144585  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.144596  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.144609  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.144622  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.144629  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144643  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.144656  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.144663  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144676  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.144683  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144714  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.144721  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.144755  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:40:26.144796  1 10 json_db_to_gui() created gui_node
09-16 14:40:26.154652  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_003_t" end time: Sep 16 14:40 CDT
"Convert_DBJson2GUIJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

32/65 Testing: Convert_GUIJson2DBJson_002_t
32/65 Test: Convert_GUIJson2DBJson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test002.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test002.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test002.src.json" "-c" "test002.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_002_t.d
"Convert_GUIJson2DBJson_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:26.130198  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:26.132003  1 14 json_gui_to_db() begin
09-16 14:40:26.147144  1 14 json_gui_to_db() read guiAST
09-16 14:40:26.147295  1 14 json_gui_to_db() created dbAST
09-16 14:40:26.147389  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.147443  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.147471  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.147516  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.147611  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.147655  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:26.147685  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147721  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147753  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147778  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147823  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:26.147830  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147842  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.147850  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.147857  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.147862  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.147870  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.147882  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.147890  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:26.147897  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147910  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147924  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147935  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147950  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147963  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:26.147970  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.147981  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.147989  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.147996  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.148002  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.148010  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148021  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148056  1 15 json_gui_to_db() operator() switch ARRAY child name= board_id, value=int(0)
09-16 14:40:26.148065  1 16 json_node_t() makeChild() node_name=<board_id>
09-16 14:40:26.148073  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148087  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148100  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148114  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148124  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148147  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148159  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148170  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:40:26.148179  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:40:26.148186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148199  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148227  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148239  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148249  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148261  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148272  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:40:26.148280  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:40:26.148288  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148302  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148315  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148328  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148349  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148361  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148371  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_id, value=int(0)
09-16 14:40:26.148380  1 16 json_node_t() makeChild() node_name=<fragment_id>
09-16 14:40:26.148387  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148406  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148458  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148469  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:26.148494  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(TOY1)
09-16 14:40:26.148504  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:40:26.148510  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148524  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148538  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148550  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148562  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148572  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148584  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:26.148594  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(ToySimulator)
09-16 14:40:26.148604  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:40:26.148611  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148623  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148635  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148647  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148658  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148667  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148678  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148687  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:26.148695  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:26.148702  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148729  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148743  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148754  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148764  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148775  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148785  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(50)
09-16 14:40:26.148793  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:40:26.148800  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148812  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148848  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148857  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148868  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148878  1 15 json_gui_to_db() operator() switch ARRAY child name= nADCcounts, value=int(40)
09-16 14:40:26.148886  1 16 json_node_t() makeChild() node_name=<nADCcounts>
09-16 14:40:26.148893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148920  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148952  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148963  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148973  1 15 json_gui_to_db() operator() switch ARRAY child name= random_seed, value=int(9542)
09-16 14:40:26.148982  1 16 json_node_t() makeChild() node_name=<random_seed>
09-16 14:40:26.148989  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149004  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149032  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149044  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149054  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149066  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149077  1 15 json_gui_to_db() operator() switch ARRAY child name= sleep_on_stop_us, value=int(500000)
09-16 14:40:26.149085  1 16 json_node_t() makeChild() node_name=<sleep_on_stop_us>
09-16 14:40:26.149091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149151  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149162  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149171  1 15 json_gui_to_db() operator() switch ARRAY child name= throttle_usecs, value=int(100000)
09-16 14:40:26.149180  1 16 json_node_t() makeChild() node_name=<throttle_usecs>
09-16 14:40:26.149186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149255  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149266  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149276  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:26.149284  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:26.149290  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149303  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149317  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149330  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149340  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149350  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149360  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.149368  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:26.149375  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149389  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149408  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149422  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149450  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:26.149457  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149468  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.149477  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.149484  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.149490  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.149498  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149510  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.149520  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:40:26.149527  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149541  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149555  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149567  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149593  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:40:26.149601  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149613  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.149621  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.149628  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.149634  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.149641  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149652  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:26.149662  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/boardreader/br_%UID%_metrics.log)
09-16 14:40:26.149670  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:40:26.149677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149737  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149750  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149760  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:40:26.149769  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:40:26.149776  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149790  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149838  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149849  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:26.149859  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:40:26.149867  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:40:26.149873  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149887  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149901  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149914  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149926  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149937  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149948  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:26.149963  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:40:26.149971  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:40:26.149978  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149992  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150030  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150232  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:40:26.150291  1 14 json_gui_to_db() created db_node
09-16 14:40:26.156856  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.08 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_002_t" end time: Sep 16 14:40 CDT
"Convert_GUIJson2DBJson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

53/65 Testing: MongoJson_update_003_t
53/65 Test: MongoJson_update_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test003/MongoJson_update_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.cmp.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/MongoJson/test003/test003.update.json" "--skip-return-code" "247" "MongoJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "update" "-o" "test003.update.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/MongoJson/test003/MongoJson_update_003_t.d
"MongoJson_update_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:26.141227  1  0 artdaq::database::mongo trace_enable
09-16 14:40:26.141384  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:26.144084  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:26.144559  1  4 Search filter is missing, proceeding with insert.
09-16 14:40:26.146633  1  5 inserted_id={
    "$oid" : "57dc4aaa1a72ba20441b5051"
}
09-16 14:40:26.146681  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:26.146687  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4aaa1a72ba20441b5051"
}, "collection":"testJSON_V001"}>
09-16 14:40:26.146763  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4aaa1a72ba20441b5051"
}>
09-16 14:40:26.146873  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aaa1a72ba20441b5051"
            }
        ]
    }
}>
09-16 14:40:26.147368  1  3 found_count=1
09-16 14:40:26.148246  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aaa1a72ba20441b5051"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:26.148452  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4aaa1a72ba20441b5051"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "expected_fragments_per_event" : 2, 
                    "first_fragment_receiver_rank" : 0, 
                    "fragment_receiver_count" : 2, 
                    "mpi_buffer_count" : 15, 
                    "print_event_store_stats" : true, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:26.148463  1  3 deleteChild() args  path=<_id>
09-16 14:40:26.154246  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:26.158120  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4aaa1a72ba20441b5051"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.158213  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:26.158710  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.158821  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4aaa1a72ba20441b5051"
}>
09-16 14:40:26.158832  1  3 deleteChild() Delete succeeded.
09-16 14:40:26.158929  1  4 replaceChild() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.158939  1  4 replaceChild() args  newChild=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:26.158944  1  4 replaceChild() args  path=<document>
09-16 14:40:26.160247  1  4 replaceChild() new child value=object(...)
09-16 14:40:26.160260  1  4 replaceChild() recurse() args currentDepth=0
09-16 14:40:26.160725  1  4 replaceChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 15,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.160786  1  4 replaceChild() found child value=object(...)
09-16 14:40:26.161114  1  4 replaceChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.161514  1  4 replaceChild() replacedChild=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.161524  1  4 replaceChild() Replace succeeded.
09-16 14:40:26.161604  1  4 StorageProvider::MongoDB::store() begin
09-16 14:40:26.161675  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4aaa1a72ba20441b5051"
}>
09-16 14:40:26.161706  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aaa1a72ba20441b5051"
            }
        ]
    }
}>
09-16 14:40:26.162780  1  8 modified_count=1
09-16 14:40:26.162804  1  3 StorageProvider::MongoDB::load() begin
09-16 14:40:26.162812  1  3 StorageProvider::MongoDB::load() args search=<{"filter":{
    "$oid" : "57dc4aaa1a72ba20441b5051"
}, "collection":"testJSON_V001"}>
09-16 14:40:26.162870  1  3 StorageProvider::MongoDB::load() user provided filter=<{
    "$oid" : "57dc4aaa1a72ba20441b5051"
}>
09-16 14:40:26.162900  1  2 collection_name="testJSON_V001", search filter=<{
    "_id" : {
        "$in" : [
            {
                "$oid" : "57dc4aaa1a72ba20441b5051"
            }
        ]
    }
}>
09-16 14:40:26.163304  1  3 found_count=1
09-16 14:40:26.163903  1  3 found_document=<{
    "_id" : {
        "$oid" : "57dc4aaa1a72ba20441b5051"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:26.164022  1  3 deleteChild() begin _json_buffer=<{
    "_id" : {
        "$oid" : "57dc4aaa1a72ba20441b5051"
    }, 
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:26.164032  1  3 deleteChild() args  path=<_id>
09-16 14:40:26.164751  1  3 deleteChild() recurse() args currentDepth=0
09-16 14:40:26.165207  1  3 deleteChild() recurse() args childValue=<{
"_id" : {
"$oid" : "57dc4aaa1a72ba20441b5051"
},
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.165227  1  3 deleteChild() deleted child value=object(...)
09-16 14:40:26.165605  1  3 deleteChild() resultDocument=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.165710  1  3 deleteChild() deletedChild=<{
"_oid" : "57dc4aaa1a72ba20441b5051"
}>
09-16 14:40:26.165718  1  3 deleteChild() Delete succeeded.
09-16 14:40:26.165760  1 10 operator==() begin _json_buffer=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"first_fragment_receiver_rank" : 0,
"demo123" : 16,
"use_art" : true,
"verbose" : false
}
}
}
}
}>
09-16 14:40:26.165770  1 10 operator==() args  other.__json_buffer=<{
    "document" : {
        "data" : {
            "daq" : {
                "event_builder" : {
                    "first_fragment_receiver_rank" : 0, 
                    "demo123" : 16, 
                    "use_art" : true, 
                    "verbose" : false
                }
            }
        }
    }
}>
09-16 14:40:26.167538  1 10 matches() JSON buffers are equal.
Running test:<update>
Search criteria {"filter":{
    "$oid" : "57dc4aaa1a72ba20441b5051"
}, "collection":"testJSON_V001"}
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"MongoJson_update_003_t" end time: Sep 16 14:40 CDT
"MongoJson_update_003_t" time elapsed: 00:00:00
----------------------------------------------------------

33/65 Testing: Convert_GUIJson2DBJson_003_t
33/65 Test: Convert_GUIJson2DBJson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test003.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/test003.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test003.src.json" "-c" "test003.cmp.json" "-t" "Convert_GUIJson2DBJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test002/Convert_GUIJson2DBJson_003_t.d
"Convert_GUIJson2DBJson_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:26.131420  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:26.132914  1 14 json_gui_to_db() begin
09-16 14:40:26.147694  1 14 json_gui_to_db() read guiAST
09-16 14:40:26.147818  1 14 json_gui_to_db() created dbAST
09-16 14:40:26.147897  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.147934  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.147957  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.147996  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148073  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.148108  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:26.148133  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148166  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148219  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148249  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148261  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:26.148269  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148280  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.148289  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.148295  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.148301  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.148309  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148321  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.148330  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:26.148336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148421  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148436  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148447  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148462  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148475  1 16 json_node_t() makeChild() node_name=<fragment_receiver>
09-16 14:40:26.148483  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148494  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.148503  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.148510  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.148516  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.148524  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148536  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148564  1 15 json_gui_to_db() operator() switch ARRAY child name= board_id, value=int(0)
09-16 14:40:26.148574  1 16 json_node_t() makeChild() node_name=<board_id>
09-16 14:40:26.148581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148595  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148609  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148622  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148634  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148656  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148668  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148678  1 15 json_gui_to_db() operator() switch ARRAY child name= event_builder_count, value=int(2)
09-16 14:40:26.148686  1 16 json_node_t() makeChild() node_name=<event_builder_count>
09-16 14:40:26.148693  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148707  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148723  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148737  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148749  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148759  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148771  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148781  1 15 json_gui_to_db() operator() switch ARRAY child name= first_event_builder_rank, value=int(2)
09-16 14:40:26.148789  1 16 json_node_t() makeChild() node_name=<first_event_builder_rank>
09-16 14:40:26.148796  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148810  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148824  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148837  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148848  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148857  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148868  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.148878  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_id, value=int(0)
09-16 14:40:26.148886  1 16 json_node_t() makeChild() node_name=<fragment_id>
09-16 14:40:26.148893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148906  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148919  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148932  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148943  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.148952  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.148963  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:26.148983  1 15 json_gui_to_db() operator() switch ARRAY child name= fragment_type, value=std::string(TOY1)
09-16 14:40:26.148991  1 16 json_node_t() makeChild() node_name=<fragment_type>
09-16 14:40:26.148998  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149011  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149025  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149038  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149049  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149058  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149068  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:26.149077  1 15 json_gui_to_db() operator() switch ARRAY child name= generator, value=std::string(ToySimulator)
09-16 14:40:26.149085  1 16 json_node_t() makeChild() node_name=<generator>
09-16 14:40:26.149091  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149104  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149118  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149131  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149141  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149151  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149162  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149171  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_buffer_count, value=int(16)
09-16 14:40:26.149180  1 16 json_node_t() makeChild() node_name=<mpi_buffer_count>
09-16 14:40:26.149186  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149200  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149213  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149226  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149237  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149247  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149258  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149268  1 15 json_gui_to_db() operator() switch ARRAY child name= mpi_sync_interval, value=int(50)
09-16 14:40:26.149276  1 16 json_node_t() makeChild() node_name=<mpi_sync_interval>
09-16 14:40:26.149283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149297  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149312  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149325  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149336  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149346  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149357  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149368  1 15 json_gui_to_db() operator() switch ARRAY child name= nADCcounts, value=int(40)
09-16 14:40:26.149376  1 16 json_node_t() makeChild() node_name=<nADCcounts>
09-16 14:40:26.149382  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149399  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149414  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149427  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149437  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149447  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149460  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149470  1 15 json_gui_to_db() operator() switch ARRAY child name= random_seed, value=int(9542)
09-16 14:40:26.149477  1 16 json_node_t() makeChild() node_name=<random_seed>
09-16 14:40:26.149484  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149498  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149511  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149523  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149535  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149544  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149554  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149565  1 15 json_gui_to_db() operator() switch ARRAY child name= sleep_on_stop_us, value=int(500000)
09-16 14:40:26.149574  1 16 json_node_t() makeChild() node_name=<sleep_on_stop_us>
09-16 14:40:26.149581  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149594  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149607  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149621  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149632  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149641  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149652  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149662  1 15 json_gui_to_db() operator() switch ARRAY child name= throttle_usecs, value=int(100000)
09-16 14:40:26.149670  1 16 json_node_t() makeChild() node_name=<throttle_usecs>
09-16 14:40:26.149677  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149690  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149704  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149716  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149728  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149744  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149756  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.149765  1 15 json_gui_to_db() operator() switch ARRAY child name= max_fragment_size_words, value=int(2097152)
09-16 14:40:26.149774  1 16 json_node_t() makeChild() node_name=<max_fragment_size_words>
09-16 14:40:26.149781  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149794  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149807  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149818  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149829  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149838  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149849  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.149857  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:26.149865  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149878  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149892  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149904  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149918  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149930  1 16 json_node_t() makeChild() node_name=<metrics>
09-16 14:40:26.149937  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.149948  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.149957  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.149964  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.149969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.149977  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.149989  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.149999  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:40:26.150006  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150019  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150032  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150043  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150058  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150070  1 16 json_node_t() makeChild() node_name=<brFile>
09-16 14:40:26.150078  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150089  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.150097  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.150105  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.150110  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.150118  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.150130  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:26.150140  1 15 json_gui_to_db() operator() switch ARRAY child name= fileName, value=std::string(/tmp/boardreader/br_%UID%_metrics.log)
09-16 14:40:26.150148  1 16 json_node_t() makeChild() node_name=<fileName>
09-16 14:40:26.150155  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150169  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150183  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150196  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150207  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150217  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.150230  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.150241  1 15 json_gui_to_db() operator() switch ARRAY child name= level, value=int(3)
09-16 14:40:26.150249  1 16 json_node_t() makeChild() node_name=<level>
09-16 14:40:26.150256  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150270  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150283  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150295  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150306  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150315  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.150326  1 15 json_gui_to_db() operator() switch ARRAY child type=string
09-16 14:40:26.150335  1 15 json_gui_to_db() operator() switch ARRAY child name= metricPluginType, value=std::string(file)
09-16 14:40:26.150343  1 16 json_node_t() makeChild() node_name=<metricPluginType>
09-16 14:40:26.150349  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150361  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150373  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150385  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150397  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150407  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.150418  1 15 json_gui_to_db() operator() switch ARRAY child type=bool
09-16 14:40:26.150429  1 15 json_gui_to_db() operator() switch ARRAY child name= uniquify, value=bool(true)
09-16 14:40:26.150437  1 16 json_node_t() makeChild() node_name=<uniquify>
09-16 14:40:26.150448  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150461  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150474  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150485  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150495  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.150639  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:40:26.150691  1 14 json_gui_to_db() created db_node
09-16 14:40:26.157012  1 14 json_gui_to_db() created db_json
Running test:<Convert_GUIJson2DBJson>
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"Convert_GUIJson2DBJson_003_t" end time: Sep 16 14:40 CDT
"Convert_GUIJson2DBJson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

44/65 Testing: Convert_DBJson2Fhicl_001_t
44/65 Test: Convert_DBJson2Fhicl_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/Convert_DBJson2Fhicl_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/test001.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/test001.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test001.json" "-c" "test001.fcl" "-t" "Convert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test002/Convert_DBJson2Fhicl_001_t.d
"Convert_DBJson2Fhicl_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:26.136251  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:40:26.136393  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:40:26.136425  1  0 artdaq::database::fhicljson trace_enable
09-16 14:40:26.136453  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:40:26.138281  1  3 json_to_fhicl: begin
09-16 14:40:26.138311  1  3 json_to_fhicl: Reading json root nodes
09-16 14:40:26.166887  1  2 write_data() begin
09-16 14:40:26.167357  1  2 json2fcldb() key=<services> type=<table>
09-16 14:40:26.167569  1  2 json2fcldb() key=<scheduler> type=<table>
09-16 14:40:26.167592  1  2 json2fcldb() key=<fileMode> type=<string>
09-16 14:40:26.167835  1  2 json2fcldb() key=<user> type=<table>
09-16 14:40:26.167857  1  2 json2fcldb() key=<NetMonTransportServiceInterface> type=<table>
09-16 14:40:26.167876  1  2 json2fcldb() key=<service_provider> type=<string>
09-16 14:40:26.167901  1  2 json2fcldb() key=<first_data_receiver_rank> type=<number>
09-16 14:40:26.167998  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:40:26.168025  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:40:26.168051  1  2 json2fcldb() key=<data_receiver_count> type=<number>
09-16 14:40:26.168132  1  2 json2fcldb() key=<daq> type=<table>
09-16 14:40:26.168153  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:40:26.168178  1  2 json2fcldb() key=<event_builder> type=<table>
09-16 14:40:26.168197  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:40:26.168222  1  2 json2fcldb() key=<first_fragment_receiver_rank> type=<number>
09-16 14:40:26.168246  1  2 json2fcldb() key=<fragment_receiver_count> type=<number>
09-16 14:40:26.168269  1  2 json2fcldb() key=<expected_fragments_per_event> type=<number>
09-16 14:40:26.168293  1  2 json2fcldb() key=<use_art> type=<bool>
09-16 14:40:26.168375  1  2 json2fcldb() key=<print_event_store_stats> type=<bool>
09-16 14:40:26.168404  1  2 json2fcldb() key=<verbose> type=<bool>
09-16 14:40:26.168449  1  2 json2fcldb() key=<metrics> type=<table>
09-16 14:40:26.168469  1  2 json2fcldb() key=<evbFile> type=<table>
09-16 14:40:26.168487  1  2 json2fcldb() key=<metricPluginType> type=<string>
09-16 14:40:26.168512  1  2 json2fcldb() key=<level> type=<number>
09-16 14:40:26.168537  1  2 json2fcldb() key=<fileName> type=<string>
09-16 14:40:26.168585  1  2 json2fcldb() key=<uniquify> type=<bool>
09-16 14:40:26.168671  1  2 json2fcldb() key=<outputs> type=<table>
09-16 14:40:26.168692  1  2 json2fcldb() key=<netMonOutput> type=<table>
09-16 14:40:26.168710  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:26.168734  1  2 json2fcldb() key=<SelectEvents> type=<table>
09-16 14:40:26.168754  1  2 json2fcldb() key=<SelectEvents> type=<sequence>
09-16 14:40:26.169103  1  2 json2fcldb() key=<physics> type=<table>
09-16 14:40:26.169128  1  2 json2fcldb() key=<filters> type=<table>
09-16 14:40:26.169148  1  2 json2fcldb() key=<prescaleMod2> type=<table>
09-16 14:40:26.169166  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:26.169194  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:40:26.169233  1  2 json2fcldb() key=<prescaleMod3> type=<table>
09-16 14:40:26.169254  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:26.169280  1  2 json2fcldb() key=<nth> type=<number>
09-16 14:40:26.169337  1  2 json2fcldb() key=<pmod2> type=<sequence>
09-16 14:40:26.169378  1  2 json2fcldb() key=<pmod3> type=<sequence>
09-16 14:40:26.169420  1  2 json2fcldb() key=<my_output_modules> type=<sequence>
09-16 14:40:26.169504  1  2 json2fcldb() key=<source> type=<table>
09-16 14:40:26.169527  1  2 json2fcldb() key=<module_type> type=<string>
09-16 14:40:26.169552  1  2 json2fcldb() key=<waiting_time> type=<number>
09-16 14:40:26.169579  1  2 json2fcldb() key=<resume_after_timeout> type=<bool>
09-16 14:40:26.169619  1  2 json2fcldb() key=<process_name> type=<string>
09-16 14:40:26.180021  1  2 write_data() end
09-16 14:40:26.180050  1  3 json_to_fhicl: fcl=< 
services: {
 
scheduler: {
 
fileMode: NOMERGE  

} 
user: {
 
NetMonTransportServiceInterface: {
 
service_provider: NetMonTransportService  
 
first_data_receiver_rank: 6  
 
mpi_buffer_count: 8  
 
max_fragment_size_words: 2097152  
 
data_receiver_count: 1 # 2

}
}
} 
daq: {
 
max_fragment_size_words: 2097152  
 
event_builder: {
 
mpi_buffer_count: 16  
 
first_fragment_receiver_rank: 0  
 
fragment_receiver_count: 2  
 
expected_fragments_per_event: 2  
 
use_art: true  
 
print_event_store_stats: true  
 
verbose: false  

} 
metrics: {
 
evbFile: {
 
metricPluginType: file  
 
level: 3  
 
fileName: "/tmp/eventbuilder/evb_%UID%_metrics.log" //demoe
 
uniquify: true  

}
}
} 
outputs: {
 
netMonOutput: {
 
module_type: NetMonOutput  
#Failure 5 not a satom 
SelectEvents: {
#Failure 5 not a satom 
SelectEvents: [pmod2, pmod3]  

}
}
} 
physics: {
 
filters: {
#Failure 4 not a satom 
prescaleMod2: {
 
module_type: NthEvent #//Success 5 right of satom
#//Success 5 right of satom
nth: 2  

} 
prescaleMod3: {
 
module_type: NthEvent  
 
nth: 3 //#Success 4 right of satom

}
} 
pmod2: [prescaleMod2]  
#Failure 2 not a satom 
pmod3: [prescaleMod3]  
 
my_output_modules: [netMonOutput]  

} 
source: {
#Success 1  above satom
module_type: RawInput  
 
waiting_time: 900 //Success 2 right of satom
 
resume_after_timeout: true #Success 3 right of satom

} 
process_name: DAQ  
>
09-16 14:40:26.180056  1  3 json_to_fhicl: end
Running test:<Convert_DBJson2Fhicl>
<end of output>
Test time =   0.18 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2Fhicl_001_t" end time: Sep 16 14:40 CDT
"Convert_DBJson2Fhicl_001_t" time elapsed: 00:00:00
----------------------------------------------------------

50/65 Testing: Convert_DBJson2Fhicl_008_t
50/65 Test: Convert_DBJson2Fhicl_008_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/Convert_DBJson2Fhicl_008_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/test008.fcl;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/test008.json" "--skip-return-code" "247" "ConvertFhicl_t" "-s" "test008.json" "-c" "test008.fcl" "-t" "Convert_DBJson2Fhicl"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Fhicl/fcl2dbjson/test008/Convert_DBJson2Fhicl_008_t.d
"Convert_DBJson2Fhicl_008_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:26.313767  1  0 artdaq::database::fhicl::FhiclReader trace_enable
09-16 14:40:26.313925  1  0 artdaq::database::fhicl::FhiclWrite trace_enable
09-16 14:40:26.313967  1  0 artdaq::database::fhicljson trace_enable
09-16 14:40:26.314005  1  0 artdaq::database::convertjson::FCL2JSON trace_enable
09-16 14:40:26.315317  1  3 json_to_fhicl: begin
09-16 14:40:26.315362  1  3 json_to_fhicl: Reading json root nodes
09-16 14:40:26.327600  1  2 write_data() begin
09-16 14:40:26.327808  1  2 json2fcldb() key=<fhicl_pound_include_0> type=<string>
09-16 14:40:26.327846  1  2 json2fcldb() name override to #include
09-16 14:40:26.328071  1  2 json2fcldb() key=<rce_standard> type=<table>
09-16 14:40:26.328175  1  2 json2fcldb() key=<metrics> type=<string>
09-16 14:40:26.328212  1  2 json2fcldb() key=<max_fragment_size_words> type=<number>
09-16 14:40:26.328291  1  2 json2fcldb() key=<fragment_receiver> type=<table>
09-16 14:40:26.328310  1  2 json2fcldb() key=<mpi_buffer_count> type=<number>
09-16 14:40:26.328332  1  2 json2fcldb() key=<mpi_sync_interval> type=<number>
09-16 14:40:26.328426  1  2 json2fcldb() key=<daq> type=<string>
09-16 14:40:26.328450  1  2 json2fcldb() key=<fhicl_pound_include_1> type=<string>
09-16 14:40:26.328458  1  2 json2fcldb() name override to #include
09-16 14:40:26.328476  1  2 json2fcldb() key=<fhicl_pound_include_2> type=<string>
09-16 14:40:26.328484  1  2 json2fcldb() name override to #include
09-16 14:40:26.328503  1  2 json2fcldb() key=<rce_standard> type=<table>
09-16 14:40:26.328517  1  2 json2fcldb() type override to string
09-16 14:40:26.328546  1  2 json2fcldb() key=<rce04_standard> type=<string>
09-16 14:40:26.328566  1  2 json2fcldb() key=<rce04_standard.fragment_receiver.fragment_id> type=<number>
09-16 14:40:26.328579  1  2 json2fcldb() key=<rce04_standard.fragment_receiver.board_id> type=<number>
09-16 14:40:26.330775  1  2 json2fcldb() key=<rce05_standard> type=<string>
09-16 14:40:26.330802  1  2 json2fcldb() key=<rce05_standard.fragment_receiver.fragment_id> type=<number>
09-16 14:40:26.330816  1  2 json2fcldb() key=<rce05_standard.fragment_receiver.board_id> type=<number>
09-16 14:40:26.332782  1  2 write_data() end
09-16 14:40:26.332801  1  3 json_to_fhicl: fcl=<BEGIN_PROLOG
 
#include "metrics.fcl" 
rce_standard: {
 
metrics: @local::metrics  
 
max_fragment_size_words: 1048576  
 
fragment_receiver: {
 
mpi_buffer_count: 16  
 
mpi_sync_interval: 24000  

}
} 
daq: @local::rce_standard  
 
#include "rce_expert_run_options.fcl" 
#include "user_run_options.fcl" 
rce_standard: @local::daq 
rce04_standard: @local::rce_standard  
 
rce04_standard.fragment_receiver.fragment_id: 104  
 
rce04_standard.fragment_receiver.board_id: 4  

END_PROLOG
 
rce05_standard: @local::rce_standard  
 
rce05_standard.fragment_receiver.fragment_id: 105  
 
rce05_standard.fragment_receiver.board_id: 5  
>
09-16 14:40:26.332807  1  3 json_to_fhicl: end
Running test:<Convert_DBJson2Fhicl>
<end of output>
Test time =   0.04 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2Fhicl_008_t" end time: Sep 16 14:40 CDT
"Convert_DBJson2Fhicl_008_t" time elapsed: 00:00:00
----------------------------------------------------------

27/65 Testing: Convert_DBJson2GUIJson_001_t
27/65 Test: Convert_DBJson2GUIJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "Convert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test001/Convert_DBJson2GUIJson_001_t.d
"Convert_DBJson2GUIJson_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:26.313680  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:26.315079  1 10 json_db_to_gui() begin
09-16 14:40:26.319950  1 10 json_db_to_gui() read dbAST
09-16 14:40:26.320129  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.320179  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.320219  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.320260  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.320334  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.320363  1 11 json_db_to_gui() operator() switch OBJECT child name=<tt>
09-16 14:40:26.320392  1 13 json_db_to_gui() child args name <tt>
09-16 14:40:26.320405  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.320601  1 13 json_db_to_gui() metadata node was not found, name=<tt>
09-16 14:40:26.320618  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.320633  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.320641  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.320697  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.320751  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.320799  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.320864  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.320879  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:26.320887  1 11 json_db_to_gui() operator() switch OBJECT is type_t::OBJECT 
09-16 14:40:26.320893  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.320932  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.320940  1 11 json_db_to_gui() operator() switch ARRAY
09-16 14:40:26.320953  1 11 json_db_to_gui() operator() switch ARRAY looping over children
09-16 14:40:26.320960  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.320970  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.321014  1 11 json_db_to_gui() operator() switch ARRAY child value=std::string(mm)
09-16 14:40:26.321039  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.321052  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:26.321058  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.321066  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:26.321126  1 11 json_db_to_gui() operator() switch ARRAY child value=int(1)
09-16 14:40:26.321135  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.321141  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:26.321146  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.321152  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:26.321167  1 11 json_db_to_gui() operator() switch ARRAY child value=array(...)
09-16 14:40:26.321174  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.321180  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:26.321185  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.321192  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:26.321207  1 11 json_db_to_gui() operator() switch ARRAY child value=object(...)
09-16 14:40:26.321215  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.321221  1 11 json_db_to_gui() operator() switch VALUE
09-16 14:40:26.321227  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.321233  1  2 json_node_t() value_as() const any.which()=1 const value.which()=1
09-16 14:40:26.321282  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:40:26.321317  1 10 json_db_to_gui() created gui_node
09-16 14:40:26.324312  1 10 json_db_to_gui() created gui_json
Running test:<Convert_DBJson2GUIJson>
<end of output>
Test time =   0.14 sec
----------------------------------------------------------
Test Passed.
"Convert_DBJson2GUIJson_001_t" end time: Sep 16 14:40 CDT
"Convert_DBJson2GUIJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

23/65 Testing: Readjson_003_t
23/65 Test: Readjson_003_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_003_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test003.json" "--skip-return-code" "247" "readjson_t" "-c" "test003.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_003_t.d
"Readjson_003_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
Initial:{
        "document" : {
            "data" : {
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "source" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "module_type" : {
                            "type" : "string", 
                            "comment" : "#Success 1  above satom", 
                            "annotation" : " "
                        }, 
                        "resume_after_timeout" : {
                            "type" : "bool", 
                            "comment" : " ", 
                            "annotation" : "#Success 3 right of satom"
                        }, 
                        "waiting_time" : {
                            "type" : "number", 
                            "comment" : " ", 
                            "annotation" : "//Success 2 right of satom"
                        }
                    }
                }
            }, 
            "search" : [
                {
                    "name" : "find any", 
                    "query" : "not defined"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "json", 
            "rawdata" : "as"
        }, 
        "version" : "version", 
        "configurations" : [
            {
                "name" : "config-005", 
                "assigned" : "Mon Feb 29 21:57:32 2016"
            }
        ], 
        "aliases" : {
            "active" : [

            ], 
            "history" : [

            ]
        }, 
        "bookkeeping" : {
            "isdeleted" : false, 
            "isreadonly" : true, 
            "created" : "Tue Dec 29 18:19:25 2015", 
            "updates" : [
                {
                    "addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
                }, 
                {
                    "setVersion" : "Mon Feb 29 21:57:32 2016"
                }
            ]
        }
    }
Converted:{
"document" : {
"data" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "version",
"configurations" : [
{
"name" : "config-005",
"assigned" : "Mon Feb 29 21:57:32 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
},
{
"setVersion" : "Mon Feb 29 21:57:32 2016"
}
]
}
}
Returned:{
"document" : {
"data" : {
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"source" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : "#Success 1  above satom",
"annotation" : " "
},
"resume_after_timeout" : {
"type" : "bool",
"comment" : " ",
"annotation" : "#Success 3 right of satom"
},
"waiting_time" : {
"type" : "number",
"comment" : " ",
"annotation" : "//Success 2 right of satom"
}
}
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "version",
"configurations" : [
{
"name" : "config-005",
"assigned" : "Mon Feb 29 21:57:32 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Mon Feb 29 21:57:32 2016"
},
{
"setVersion" : "Mon Feb 29 21:57:32 2016"
}
]
}
}
<end of output>
Test time =   0.14 sec
----------------------------------------------------------
Test Passed.
"Readjson_003_t" end time: Sep 16 14:40 CDT
"Readjson_003_t" time elapsed: 00:00:00
----------------------------------------------------------

37/65 Testing: RoundConvert_DBJson2GUIJson_001_t
37/65 Test: RoundConvert_DBJson2GUIJson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test001.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/test001.cmp.json" "--skip-return-code" "247" "ConvertJson_t" "-s" "test001.src.json" "-c" "test001.cmp.json" "-t" "RoundConvert_DBJson2GUIJson"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/db2gui/test003/RoundConvert_DBJson2GUIJson_001_t.d
"RoundConvert_DBJson2GUIJson_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:26.317866  1  0 artdaq::database::JSON2GUIJSON trace_enable
09-16 14:40:26.319047  1 10 json_db_to_gui() begin
09-16 14:40:26.322142  1 10 json_db_to_gui() read dbAST
09-16 14:40:26.322304  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.322349  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.322384  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.322425  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.322520  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.322549  1 11 json_db_to_gui() operator() switch OBJECT child name=<daq>
09-16 14:40:26.322578  1 13 json_db_to_gui() child args name <daq>
09-16 14:40:26.322586  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.322625  1 13 json_db_to_gui() metadata node was found, name=<daq>
09-16 14:40:26.322635  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.322650  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.322658  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.322716  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.322773  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.322818  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.322826  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.322854  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.322906  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.322915  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.322922  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.322928  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.322944  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.322953  1 11 json_db_to_gui() operator() switch OBJECT child name=<event_builder>
09-16 14:40:26.322962  1 13 json_db_to_gui() child args name <event_builder>
09-16 14:40:26.322969  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323137  1 13 json_db_to_gui() metadata node was found, name=<event_builder>
09-16 14:40:26.323149  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.323156  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.323163  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.323174  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.323188  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.323201  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.323208  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323220  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.323233  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.323240  1 11 json_db_to_gui() operator() switch OBJECT
09-16 14:40:26.323246  1 11 json_db_to_gui() operator() switch OBJECT looping over children
09-16 14:40:26.323253  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.323268  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323275  1 11 json_db_to_gui() operator() switch OBJECT child name=<expected_fragments_per_event>
09-16 14:40:26.323283  1 13 json_db_to_gui() child args name <expected_fragments_per_event>
09-16 14:40:26.323289  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323317  1 13 json_db_to_gui() metadata node was found, name=<expected_fragments_per_event>
09-16 14:40:26.323325  1 11 json_db_to_gui() operator() begin
09-16 14:40:26.323332  1 11 json_db_to_gui() operator() switch DATA
09-16 14:40:26.323338  1  2 json_node_t() value_as() any.which()=0 value.which()=4
09-16 14:40:26.323349  1 11 json_db_to_gui() operator() switch DATA data
09-16 14:40:26.323361  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.323374  1 12 json_db_to_gui() _string_value_of args name <comment>
09-16 14:40:26.323381  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323392  1  2 json_node_t() value_as() const any.which()=1 const value.which()=2
09-16 14:40:26.323430  1 12 json_db_to_gui() _string_value_of args name <annotation>
09-16 14:40:26.323438  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323454  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.323461  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323497  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.323504  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323516  1 12 json_db_to_gui() _string_value_of args name <type>
09-16 14:40:26.323522  1  2 json_node_t() value_as() const any.which()=1 const value.which()=3
09-16 14:40:26.323553  1 10 json_db_to_gui() No changelog in dbAST
09-16 14:40:26.323581  1 10 json_db_to_gui() created gui_node
09-16 14:40:26.325544  1 10 json_db_to_gui() created gui_json
09-16 14:40:26.325563  1 14 json_gui_to_db() begin
09-16 14:40:26.326573  1 14 json_gui_to_db() read guiAST
09-16 14:40:26.326598  1 14 json_gui_to_db() created dbAST
09-16 14:40:26.326620  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.326631  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.326636  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.326664  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.326677  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.326684  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:26.326689  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326698  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326707  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326714  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326723  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326730  1 16 json_node_t() makeChild() node_name=<daq>
09-16 14:40:26.326734  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326741  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.326746  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.326750  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.326754  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.326759  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.326765  1 15 json_gui_to_db() operator() switch ARRAY child type=table
09-16 14:40:26.326770  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:26.326775  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326783  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326791  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326797  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326805  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326812  1 16 json_node_t() makeChild() node_name=<event_builder>
09-16 14:40:26.326816  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326823  1 15 json_gui_to_db() operator() switch ARRAY table
09-16 14:40:26.326827  1 15 json_gui_to_db() operator() begin
09-16 14:40:26.326831  1 15 json_gui_to_db() operator() switch ARRAY looping over children
09-16 14:40:26.326835  1  2 json_node_t() value_as() const any.which()=1 const value.which()=4
09-16 14:40:26.326839  1 15 json_gui_to_db() operator() switch ARRAY child value=object(...)
09-16 14:40:26.326846  1 15 json_gui_to_db() operator() switch ARRAY child type=number
09-16 14:40:26.326867  1 15 json_gui_to_db() operator() switch ARRAY child name= expected_fragments_per_event, value=int(2)
09-16 14:40:26.326873  1 16 json_node_t() makeChild() node_name=<expected_fragments_per_event>
09-16 14:40:26.326877  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326886  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326895  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326902  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326908  1  2 json_node_t() value_as() any.which()=0 value.which()=3
09-16 14:40:26.326931  1 14 json_gui_to_db() No changelog in guiAST
09-16 14:40:26.326943  1 14 json_gui_to_db() created db_node
09-16 14:40:26.327343  1 14 json_gui_to_db() created db_json
Running test:<RoundConvert_DBJson2GUIJson>
json_db_to_gui succeeded.
json_gui_to_db succeeded.
<end of output>
Test time =   0.14 sec
----------------------------------------------------------
Test Passed.
"RoundConvert_DBJson2GUIJson_001_t" end time: Sep 16 14:40 CDT
"RoundConvert_DBJson2GUIJson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

26/65 Testing: Readjson_006_t
26/65 Test: Readjson_006_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_006_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test006.json" "--skip-return-code" "247" "readjson_t" "-c" "test006.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_006_t.d
"Readjson_006_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
Initial:	{
		"SUPERVISOR_INSTANCE": 1,
		"AGGREGATOR_ID": "",
		"STATUS": "",
		"CONFIGURATION_STRING": "A\"\" \"X\"\" Z"
	}
Converted:{
"SUPERVISOR_INSTANCE" : 1,
"AGGREGATOR_ID" : "",
"STATUS" : "",
"CONFIGURATION_STRING" : "A\"\" \"X\"\" Z"
}
Returned:{
"SUPERVISOR_INSTANCE" : 1,
"AGGREGATOR_ID" : "",
"STATUS" : "",
"CONFIGURATION_STRING" : "A\"\" \"X\"\" Z"
}
<end of output>
Test time =   0.14 sec
----------------------------------------------------------
Test Passed.
"Readjson_006_t" end time: Sep 16 14:40 CDT
"Readjson_006_t" time elapsed: 00:00:00
----------------------------------------------------------

25/65 Testing: Readjson_005_t
25/65 Test: Readjson_005_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_005_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test005.json" "--skip-return-code" "247" "readjson_t" "-c" "test005.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_005_t.d
"Readjson_005_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
Initial:{
        "document" : {
            "data" : {
                "NAME" : "CONFIGURATION_ALIASES", 
                "COMMENT" : "", 
                "AUTHOR" : "", 
                "CREATION_TIME" : 1465601490, 
                "NUM_OF_COLS" : 8, 
                "NUM_OF_ROWS" : 3, 
                "DATA_SET" : [
                    {
                        "CONFIGURATION_KEY_ID" : 3, 
                        "CONFIGURATION_KEY" : "3", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "Physics", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Physics", 
                        "AUTHOR" : "Uplegger"
                    }, 
                    {
                        "CONFIGURATION_KEY_ID" : 5, 
                        "CONFIGURATION_KEY" : "5", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "SCurve", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC", 
                        "AUTHOR" : "Uplegger"
                    }, 
                    {
                        "CONFIGURATION_KEY_ID" : 6, 
                        "CONFIGURATION_KEY" : "6", 
                        "KEY_ALIAS_ID" : 0, 
                        "CONFIGURATION_ALIAS" : "SCurve_Default_1x1", 
                        "CONFIGURATION_KEY_TYPE" : "ConfigurationAliases", 
                        "RECORD_INSERTION_TIME" : "2013-01-29 17:22:10", 
                        "COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC", 
                        "AUTHOR" : "Uplegger"
                    }
                ]
            }, 
            "metadata" : {
                "comments" : {
                    "empty" : "empty"
                }
            }, 
            "search" : [
                {
                    "name" : "find any", 
                    "query" : "not defined"
                }
            ]
        }, 
        "source" : {
            "encoding" : "base64", 
            "format" : "json", 
            "rawdata" : "as"
        }, 
        "version" : "0", 
        "configurations" : [
            {
                "name" : "notprovided", 
                "assigned" : "Fri Jun 10 18:31:30 2016"
            }
        ], 
        "aliases" : {
            "active" : [

            ], 
            "history" : [

            ]
        }, 
        "changelog" : "empty", 
        "bookkeeping" : {
            "isdeleted" : false, 
            "isreadonly" : true, 
            "created" : "Tue Dec 29 18:19:25 2015", 
            "updates" : [
                {
                    "addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
                }, 
                {
                    "setVersion" : "Fri Jun 10 18:31:30 2016"
                }, 
                {
                    "setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
                }
            ]
        }, 
        "configurable_entity" : {
            "name" : "CMSROOT"
        }, 
        "_id" : {
            "_oid" : "130869f2a1aa48b0acb3ac80"
        }
    }
Converted:{
"document" : {
"data" : {
"NAME" : "CONFIGURATION_ALIASES",
"COMMENT" : "",
"AUTHOR" : "",
"CREATION_TIME" : 1465601490,
"NUM_OF_COLS" : 8,
"NUM_OF_ROWS" : 3,
"DATA_SET" : [
{
"CONFIGURATION_KEY_ID" : 3,
"CONFIGURATION_KEY" : "3",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "Physics",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Physics",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 5,
"CONFIGURATION_KEY" : "5",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 6,
"CONFIGURATION_KEY" : "6",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve_Default_1x1",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
}
]
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "0",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Jun 10 18:31:30 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
},
{
"setVersion" : "Fri Jun 10 18:31:30 2016"
},
{
"setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
}
]
},
"configurable_entity" : {
"name" : "CMSROOT"
},
"_id" : {
"_oid" : "130869f2a1aa48b0acb3ac80"
}
}
Returned:{
"document" : {
"data" : {
"NAME" : "CONFIGURATION_ALIASES",
"COMMENT" : "",
"AUTHOR" : "",
"CREATION_TIME" : 1465601490,
"NUM_OF_COLS" : 8,
"NUM_OF_ROWS" : 3,
"DATA_SET" : [
{
"CONFIGURATION_KEY_ID" : 3,
"CONFIGURATION_KEY" : "3",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "Physics",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Physics",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 5,
"CONFIGURATION_KEY" : "5",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
},
{
"CONFIGURATION_KEY_ID" : 6,
"CONFIGURATION_KEY" : "6",
"KEY_ALIAS_ID" : 0,
"CONFIGURATION_ALIAS" : "SCurve_Default_1x1",
"CONFIGURATION_KEY_TYPE" : "ConfigurationAliases",
"RECORD_INSERTION_TIME" : "2013-01-29 17:22:10",
"COMMENT_DESCRIPTION" : "Default Scurve calibration injecting only 1 pixel per ROC",
"AUTHOR" : "Uplegger"
}
]
},
"metadata" : {
"comments" : {
"empty" : "empty"
}
},
"search" : [
{
"name" : "find any",
"query" : "not defined"
}
]
},
"source" : {
"encoding" : "base64",
"format" : "json",
"rawdata" : "as"
},
"version" : "0",
"configurations" : [
{
"name" : "notprovided",
"assigned" : "Fri Jun 10 18:31:30 2016"
}
],
"aliases" : {
"active" : [

],
"history" : [

]
},
"changelog" : "empty",
"bookkeeping" : {
"isdeleted" : false,
"isreadonly" : true,
"created" : "Tue Dec 29 18:19:25 2015",
"updates" : [
{
"addToGlobalConfig" : "Fri Jun 10 18:31:30 2016"
},
{
"setVersion" : "Fri Jun 10 18:31:30 2016"
},
{
"setConfigurableEntity" : "Fri Jun 10 18:31:30 2016"
}
]
},
"configurable_entity" : {
"name" : "CMSROOT"
},
"_id" : {
"_oid" : "130869f2a1aa48b0acb3ac80"
}
}
<end of output>
Test time =   0.14 sec
----------------------------------------------------------
Test Passed.
"Readjson_005_t" end time: Sep 16 14:40 CDT
"Readjson_005_t" time elapsed: 00:00:00
----------------------------------------------------------

24/65 Testing: Readjson_004_t
24/65 Test: Readjson_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test004.json" "--skip-return-code" "247" "readjson_t" "-c" "test004.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_004_t.d
"Readjson_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
Initial:{ "document" : [ [1,"2"] , [2,"4"]]}
Converted:{
"document" : [
[
1,
"2"
],
[
2,
"4"
]
]
}
Returned:{
"document" : [
[
1,
"2"
],
[
2,
"4"
]
]
}
<end of output>
Test time =   0.14 sec
----------------------------------------------------------
Test Passed.
"Readjson_004_t" end time: Sep 16 14:40 CDT
"Readjson_004_t" time elapsed: 00:00:00
----------------------------------------------------------

22/65 Testing: Readjson_002_t
22/65 Test: Readjson_002_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_002_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test002.json" "--skip-return-code" "247" "readjson_t" "-c" "test002.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_002_t.d
"Readjson_002_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
Initial:{
   "aliases" : []
}
Converted:{
"aliases" : [

]
}
Returned:{
"aliases" : [

]
}
<end of output>
Test time =   0.02 sec
----------------------------------------------------------
Test Passed.
"Readjson_002_t" end time: Sep 16 14:40 CDT
"Readjson_002_t" time elapsed: 00:00:00
----------------------------------------------------------

21/65 Testing: Readjson_001_t
21/65 Test: Readjson_001_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_001_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/DataFormats/Json/parser/test001/test001.json" "--skip-return-code" "247" "readjson_t" "-c" "test001.json"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/DataFormats/Json/parser/test001/Readjson_001_t.d
"Readjson_001_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
Initial:{
   "aliases" : {}
}
Converted:{
"aliases" : {

}
}
Returned:{
"aliases" : {

}
}
<end of output>
Test time =   0.02 sec
----------------------------------------------------------
Test Passed.
"Readjson_001_t" end time: Sep 16 14:40 CDT
"Readjson_001_t" time elapsed: 00:00:00
----------------------------------------------------------

62/65 Testing: FileSystemJson_search2_004_t
62/65 Test: FileSystemJson_search2_004_t
Command: "/home/lukhanin/scratch/current/artdaq-demo-base/products/cetbuildtools/v5_04_03/bin/cet_exec_test" "--wd" "/home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/FileSystemJson_search2_004_t.d" "--required-files" "" "--datafiles" "/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/test004.src.json;/home/lukhanin/scratch/current/artdaq-demo-base/artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/test004.cmp.json" "--skip-return-code" "247" "FileSystemJson_t" "-s" "test004.src.json" "-c" "test004.cmp.json" "-t" "search2"
Directory: /home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/test/StorageProviders/FileSystemJson/test004/FileSystemJson_search2_004_t.d
"FileSystemJson_search2_004_t" start time: Sep 16 14:40 CDT
Output:
----------------------------------------------------------
09-16 14:40:23.711060  1  0 artdaq::database::filesystem trace_enable
09-16 14:40:23.711217  1  0 artdaq::database::filesystem::index trace_enable
09-16 14:40:23.711302  1  0 artdaq::database::JSONDocument trace_enable
09-16 14:40:23.714494  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:23.714543  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:23.717188  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:23.717337  1  5 findChild() args  path=<collection>
09-16 14:40:23.753849  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.770982  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:23.771077  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:23.771247  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:23.771254  1  5 findChild() Find succeeded.
09-16 14:40:23.773161  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:23.773237  1  5 findChild() args  path=<filter>
09-16 14:40:23.786471  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:23.796450  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:23.796481  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:23.796971  1 12 StorageProvider::FileSystemDB generate_oid=c20bb4bb72844e779acf1a7b
09-16 14:40:23.798163  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:23.798226  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "c20bb4bb72844e779acf1a7b"
    }
}>
09-16 14:40:23.798231  1  2 insertChild() args  path=<document._id>
09-16 14:40:23.810544  1  4 insertChild() new child value=object(...)
09-16 14:40:23.810566  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:23.819980  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:23.820004  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:23.828950  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:23.829010  1  4 insertChild() found child value=object(...)
09-16 14:40:23.837919  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:24.145572  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:24.145602  1  4 insertChild() Insert succeeded.
09-16 14:40:24.145821  1  4 StorageProvider::FileSystemDB::store() using generated oid=<c20bb4bb72844e779acf1a7b>.
09-16 14:40:24.145867  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:24.145893  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:24.146264  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/c20bb4bb72844e779acf1a7b.json>.
09-16 14:40:24.146319  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:24.146336  1  5 findChild() args  path=<document>
09-16 14:40:24.157174  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.166144  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.166238  1  5 findChild() found child value=object(...)
09-16 14:40:24.175261  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:24.175298  1  5 findChild() Find succeeded.
09-16 14:40:24.239493  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.239506  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:24.239604  1  3 StorageProvider::FileSystemDB::index::_open() json=<{"version":{},"configurations.name":{}, "configurable_entity.name":{} }>
09-16 14:40:24.239812  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.239826  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:24.239895  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<c20bb4bb72844e779acf1a7b>.
09-16 14:40:24.253748  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:24.253832  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:24.253838  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:24.253841  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:24.253845  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:24.253970  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:24.254084  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:24.254097  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.254378  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:24.254542  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.254576  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.254585  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:24.255609  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:24.255733  1  5 findChild() args  path=<collection>
09-16 14:40:24.269189  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.279058  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.279100  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:24.279210  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:24.279216  1  5 findChild() Find succeeded.
09-16 14:40:24.280306  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:24.280373  1  5 findChild() args  path=<filter>
09-16 14:40:24.294687  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.303888  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.303921  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.304124  1 12 StorageProvider::FileSystemDB generate_oid=f438e49fb66e418790512b4e
09-16 14:40:24.305155  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:24.305213  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "f438e49fb66e418790512b4e"
    }
}>
09-16 14:40:24.305220  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.316792  1  4 insertChild() new child value=object(...)
09-16 14:40:24.316811  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.325697  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:24.325724  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.333861  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:24.333896  1  4 insertChild() found child value=object(...)
09-16 14:40:24.342722  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:24.536493  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:24.536824  1  4 insertChild() Insert succeeded.
09-16 14:40:24.537134  1  4 StorageProvider::FileSystemDB::store() using generated oid=<f438e49fb66e418790512b4e>.
09-16 14:40:24.537149  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:24.537153  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:24.537169  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:24.537191  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/f438e49fb66e418790512b4e.json>.
09-16 14:40:24.537241  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:24.537259  1  5 findChild() args  path=<document>
09-16 14:40:24.547822  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.556332  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.556468  1  5 findChild() found child value=object(...)
09-16 14:40:24.564995  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:24.565015  1  5 findChild() Find succeeded.
09-16 14:40:24.618356  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.618382  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:24.618452  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:24.618719  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.618730  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:24.618782  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<f438e49fb66e418790512b4e>.
09-16 14:40:24.629177  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:24.629207  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:24.629211  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:24.629214  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:24.629216  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:24.629232  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:24.629282  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:24.629288  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.629441  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:24.629545  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.629582  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.629598  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:24.630250  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:24.630305  1  5 findChild() args  path=<collection>
09-16 14:40:24.641599  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.656577  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.656636  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:24.656803  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:24.656811  1  5 findChild() Find succeeded.
09-16 14:40:24.658666  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:24.658783  1  5 findChild() args  path=<filter>
09-16 14:40:24.680290  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.695679  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.695724  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.695952  1 12 StorageProvider::FileSystemDB generate_oid=0453839f4000451d8cf7c9ea
09-16 14:40:24.698146  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:24.698248  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "0453839f4000451d8cf7c9ea"
    }
}>
09-16 14:40:24.698254  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.710878  1  4 insertChild() new child value=object(...)
09-16 14:40:24.710905  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.719740  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:24.719773  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.728549  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:24.728595  1  4 insertChild() found child value=object(...)
09-16 14:40:24.737313  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:24.737417  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:24.737436  1  4 insertChild() Insert succeeded.
09-16 14:40:24.737522  1  4 StorageProvider::FileSystemDB::store() using generated oid=<0453839f4000451d8cf7c9ea>.
09-16 14:40:24.737534  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:24.737539  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:24.737549  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:24.737569  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/0453839f4000451d8cf7c9ea.json>.
09-16 14:40:24.737621  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:24.737638  1  5 findChild() args  path=<document>
09-16 14:40:24.748174  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.756910  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.757010  1  5 findChild() found child value=object(...)
09-16 14:40:24.765785  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:24.765805  1  5 findChild() Find succeeded.
09-16 14:40:24.816326  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:24.816353  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:24.816402  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:24.816611  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:24.816620  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:24.816673  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<0453839f4000451d8cf7c9ea>.
09-16 14:40:24.827368  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:24.827400  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:24.827404  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:24.827407  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:24.827409  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:24.827424  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:24.827474  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:24.827478  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:24.827609  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:24.827688  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:24.827710  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:24.827726  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:24.828354  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:24.828413  1  5 findChild() args  path=<collection>
09-16 14:40:24.839056  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.847506  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.847531  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:24.847608  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:24.847614  1  5 findChild() Find succeeded.
09-16 14:40:24.848537  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:24.848592  1  5 findChild() args  path=<filter>
09-16 14:40:24.859305  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:24.868049  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:24.868070  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:24.868206  1 12 StorageProvider::FileSystemDB generate_oid=2bdf8d9419a7404ba4df3674
09-16 14:40:24.869468  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:24.869524  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "2bdf8d9419a7404ba4df3674"
    }
}>
09-16 14:40:24.869528  1  2 insertChild() args  path=<document._id>
09-16 14:40:24.880561  1  4 insertChild() new child value=object(...)
09-16 14:40:24.880574  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:24.889173  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:24.889195  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:24.897162  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:25.135314  1  4 insertChild() found child value=object(...)
09-16 14:40:25.144067  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:25.144163  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:25.144182  1  4 insertChild() Insert succeeded.
09-16 14:40:25.144284  1  4 StorageProvider::FileSystemDB::store() using generated oid=<2bdf8d9419a7404ba4df3674>.
09-16 14:40:25.144298  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.144303  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.144318  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.144345  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/2bdf8d9419a7404ba4df3674.json>.
09-16 14:40:25.144480  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:25.144497  1  5 findChild() args  path=<document>
09-16 14:40:25.154810  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.163568  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.163672  1  5 findChild() found child value=object(...)
09-16 14:40:25.172391  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:25.172414  1  5 findChild() Find succeeded.
09-16 14:40:25.222081  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.222089  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.222114  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.222259  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:25.222270  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:25.222322  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<2bdf8d9419a7404ba4df3674>.
09-16 14:40:25.232737  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:25.232766  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:25.232770  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:25.232773  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:25.232775  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:25.232790  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:25.232841  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:25.232846  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.232948  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.233031  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.233062  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:25.233069  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:25.233694  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:25.233749  1  5 findChild() args  path=<collection>
09-16 14:40:25.245528  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.259436  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.259494  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.259638  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.259644  1  5 findChild() Find succeeded.
09-16 14:40:25.260705  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:25.260764  1  5 findChild() args  path=<filter>
09-16 14:40:25.272509  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.281975  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.282005  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:25.282173  1 12 StorageProvider::FileSystemDB generate_oid=6c0c379f93574aeebed4e6d6
09-16 14:40:25.283187  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:25.283245  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "6c0c379f93574aeebed4e6d6"
    }
}>
09-16 14:40:25.283250  1  2 insertChild() args  path=<document._id>
09-16 14:40:25.301698  1  4 insertChild() new child value=object(...)
09-16 14:40:25.301724  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.317246  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:25.317282  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.330769  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:25.330808  1  4 insertChild() found child value=object(...)
09-16 14:40:25.339433  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:25.339526  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:25.339544  1  4 insertChild() Insert succeeded.
09-16 14:40:25.339645  1  4 StorageProvider::FileSystemDB::store() using generated oid=<6c0c379f93574aeebed4e6d6>.
09-16 14:40:25.339659  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.339664  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.339678  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.339714  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/6c0c379f93574aeebed4e6d6.json>.
09-16 14:40:25.339833  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:25.397533  1  5 findChild() args  path=<document>
09-16 14:40:25.412736  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.425122  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.425255  1  5 findChild() found child value=object(...)
09-16 14:40:25.437079  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:25.437106  1  5 findChild() Find succeeded.
09-16 14:40:25.496667  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.496675  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.496708  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.496869  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:25.496881  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:25.496939  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<6c0c379f93574aeebed4e6d6>.
09-16 14:40:25.514306  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:25.514364  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:25.514372  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:25.514378  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:25.514384  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:25.514421  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:25.514510  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:25.514520  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.514801  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.514974  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.515008  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:25.515021  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:25.516277  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:25.516389  1  5 findChild() args  path=<collection>
09-16 14:40:25.539485  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.555013  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.555059  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.555191  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.555199  1  5 findChild() Find succeeded.
09-16 14:40:25.556945  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:25.557063  1  5 findChild() args  path=<filter>
09-16 14:40:25.580114  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.593769  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.593798  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:25.593949  1 12 StorageProvider::FileSystemDB generate_oid=565db615a0d4448e8a96c63c
09-16 14:40:25.594961  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:25.595019  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "565db615a0d4448e8a96c63c"
    }
}>
09-16 14:40:25.595024  1  2 insertChild() args  path=<document._id>
09-16 14:40:25.606279  1  4 insertChild() new child value=object(...)
09-16 14:40:25.606304  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.614858  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:25.614881  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.622836  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:25.622866  1  4 insertChild() found child value=object(...)
09-16 14:40:25.631362  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:25.631460  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:25.631478  1  4 insertChild() Insert succeeded.
09-16 14:40:25.631558  1  4 StorageProvider::FileSystemDB::store() using generated oid=<565db615a0d4448e8a96c63c>.
09-16 14:40:25.631569  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.631573  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.631584  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.631604  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/565db615a0d4448e8a96c63c.json>.
09-16 14:40:25.631670  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:25.631687  1  5 findChild() args  path=<document>
09-16 14:40:25.641778  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.650173  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.650275  1  5 findChild() found child value=object(...)
09-16 14:40:25.658690  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:25.658709  1  5 findChild() Find succeeded.
09-16 14:40:25.724169  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.724184  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.724232  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.724628  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:25.724645  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:25.724748  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<565db615a0d4448e8a96c63c>.
09-16 14:40:25.746607  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:25.746692  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:25.746701  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:25.746707  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:25.746712  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:25.746749  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:25.746841  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:25.746853  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.747113  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {

},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.747442  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.747499  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:25.747517  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:25.748666  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:25.748773  1  5 findChild() args  path=<collection>
09-16 14:40:25.772671  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.785867  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.785909  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:25.786002  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:25.786008  1  5 findChild() Find succeeded.
09-16 14:40:25.787006  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:25.787077  1  5 findChild() args  path=<filter>
09-16 14:40:25.798212  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.806728  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.806763  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:25.806920  1 12 StorageProvider::FileSystemDB generate_oid=1bf942172528449fa8eda9a8
09-16 14:40:25.807919  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:25.807974  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "1bf942172528449fa8eda9a8"
    }
}>
09-16 14:40:25.807988  1  2 insertChild() args  path=<document._id>
09-16 14:40:25.818801  1  4 insertChild() new child value=object(...)
09-16 14:40:25.818826  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:25.827277  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:25.827299  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:25.835061  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:25.835091  1  4 insertChild() found child value=object(...)
09-16 14:40:25.843498  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:25.843581  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:25.843599  1  4 insertChild() Insert succeeded.
09-16 14:40:25.843677  1  4 StorageProvider::FileSystemDB::store() using generated oid=<1bf942172528449fa8eda9a8>.
09-16 14:40:25.843690  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:25.843694  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.843708  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:25.843733  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/1bf942172528449fa8eda9a8.json>.
09-16 14:40:25.843800  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:25.843817  1  5 findChild() args  path=<document>
09-16 14:40:25.854000  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:25.862856  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:25.862981  1  5 findChild() found child value=object(...)
09-16 14:40:25.871682  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:25.871713  1  5 findChild() Find succeeded.
09-16 14:40:25.952002  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:25.952014  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:25.952062  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.952710  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:25.952733  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:25.952821  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<1bf942172528449fa8eda9a8>.
09-16 14:40:25.975695  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:25.975736  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:25.975745  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:25.975750  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:25.975755  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:25.975780  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:25.975863  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:25.975872  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:25.976154  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:25.976311  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:25.976345  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:25.976356  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:25.977538  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:25.977638  1  5 findChild() args  path=<collection>
09-16 14:40:25.996739  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.005623  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.005653  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:26.005739  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:26.005745  1  5 findChild() Find succeeded.
09-16 14:40:26.006762  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:26.006824  1  5 findChild() args  path=<filter>
09-16 14:40:26.017622  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.026057  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.026088  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:26.026239  1 12 StorageProvider::FileSystemDB generate_oid=9483d3fc4df14ca5afd4467a
09-16 14:40:26.027195  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:26.027250  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "9483d3fc4df14ca5afd4467a"
    }
}>
09-16 14:40:26.027264  1  2 insertChild() args  path=<document._id>
09-16 14:40:26.038104  1  4 insertChild() new child value=object(...)
09-16 14:40:26.038119  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:26.046466  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:26.046488  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:26.054221  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:26.054249  1  4 insertChild() found child value=object(...)
09-16 14:40:26.062659  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:26.062779  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:26.062797  1  4 insertChild() Insert succeeded.
09-16 14:40:26.062867  1  4 StorageProvider::FileSystemDB::store() using generated oid=<9483d3fc4df14ca5afd4467a>.
09-16 14:40:26.062879  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:26.062884  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.062896  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.062919  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/9483d3fc4df14ca5afd4467a.json>.
09-16 14:40:26.063029  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:26.063046  1  5 findChild() args  path=<document>
09-16 14:40:26.073088  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.081454  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.081546  1  5 findChild() found child value=object(...)
09-16 14:40:26.090011  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:26.090030  1  5 findChild() Find succeeded.
09-16 14:40:26.148778  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:26.148788  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:26.148822  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.149135  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:26.149146  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:26.149201  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<9483d3fc4df14ca5afd4467a>.
09-16 14:40:26.161821  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:26.161868  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:26.161875  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:26.161880  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:26.161885  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:26.161910  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:26.161995  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:26.162006  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:26.162295  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.162472  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:26.162510  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:26.162522  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:26.163638  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:26.163740  1  5 findChild() args  path=<collection>
09-16 14:40:26.182126  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.190691  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.190728  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:26.190818  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:26.190824  1  5 findChild() Find succeeded.
09-16 14:40:26.191754  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:26.191813  1  5 findChild() args  path=<filter>
09-16 14:40:26.202564  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.210927  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.210948  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:26.211097  1 12 StorageProvider::FileSystemDB generate_oid=8ea1d2722bfc490ca1d83d00
09-16 14:40:26.212041  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:26.212096  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "8ea1d2722bfc490ca1d83d00"
    }
}>
09-16 14:40:26.212111  1  2 insertChild() args  path=<document._id>
09-16 14:40:26.222822  1  4 insertChild() new child value=object(...)
09-16 14:40:26.222836  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:26.231224  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:26.231246  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:26.239913  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:26.239949  1  4 insertChild() found child value=object(...)
09-16 14:40:26.248914  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:26.249147  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:26.249169  1  4 insertChild() Insert succeeded.
09-16 14:40:26.249388  1  4 StorageProvider::FileSystemDB::store() using generated oid=<8ea1d2722bfc490ca1d83d00>.
09-16 14:40:26.249421  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:26.249440  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.249483  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.249539  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/8ea1d2722bfc490ca1d83d00.json>.
09-16 14:40:26.249663  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:26.249681  1  5 findChild() args  path=<document>
09-16 14:40:26.260031  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.268492  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.268588  1  5 findChild() found child value=object(...)
09-16 14:40:26.277082  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:26.277101  1  5 findChild() Find succeeded.
09-16 14:40:26.343901  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:26.343912  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:26.343973  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.344375  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:26.344400  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:26.344483  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<8ea1d2722bfc490ca1d83d00>.
09-16 14:40:26.355447  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:26.355498  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:26.355503  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:26.355506  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:26.355509  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:26.355526  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:26.355577  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:26.355583  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:26.355824  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.355990  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:26.356021  1  4 StorageProvider::FileSystemDB::store() begin
09-16 14:40:26.356031  1  4 StorageProvider::FileSystemDB::store() args data=<{"document":{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comme
09-16 14:40:26.356663  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:26.356718  1  5 findChild() args  path=<collection>
09-16 14:40:26.367281  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.375648  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.375675  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:26.375753  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:26.375758  1  5 findChild() Find succeeded.
09-16 14:40:26.376683  1  5 findChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "ann
09-16 14:40:26.376742  1  5 findChild() args  path=<filter>
09-16 14:40:26.387242  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.395602  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.395623  1  5 findChild() recurse() Error: Search failed for json element name=filter, search path =<filter>.
09-16 14:40:26.395754  1 12 StorageProvider::FileSystemDB generate_oid=3415e89e52e04aa9ac11c665
09-16 14:40:26.396687  1  2 insertChild() begin _json_buffer=<{
    "document" : {
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "a
09-16 14:40:26.396742  1  2 insertChild() args  newChild=<{
    "payload" : {
        "_oid" : "3415e89e52e04aa9ac11c665"
    }
}>
09-16 14:40:26.396746  1  2 insertChild() args  path=<document._id>
09-16 14:40:26.407399  1  4 insertChild() new child value=object(...)
09-16 14:40:26.407414  1  4 insertChild() recurse() args currentDepth=1
09-16 14:40:26.415731  1  4 insertChild() recurse() args childValue=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : 
09-16 14:40:26.415753  1  4 insertChild() recurse() args currentDepth=0
09-16 14:40:26.423453  1  4 insertChild() recurse() args childValue=<{
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children"
09-16 14:40:26.423481  1  4 insertChild() found child value=object(...)
09-16 14:40:26.431844  1  4 insertChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"child
09-16 14:40:26.431927  1  4 insertChild() insertChild=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"children
09-16 14:40:26.431945  1  4 insertChild() Insert succeeded.
09-16 14:40:26.432015  1  4 StorageProvider::FileSystemDB::store() using generated oid=<3415e89e52e04aa9ac11c665>.
09-16 14:40:26.432028  1  4 StorageProvider::FileSystemDB::store() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:26.432032  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.432042  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.432063  1  4 StorageProvider::FileSystemDB::store() filename=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/3415e89e52e04aa9ac11c665.json>.
09-16 14:40:26.432123  1  5 findChild() begin _json_buffer=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"chi
09-16 14:40:26.432139  1  5 findChild() args  path=<document>
09-16 14:40:26.442822  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.451710  1  5 findChild() recurse() args currentView=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : "
09-16 14:40:26.451825  1  5 findChild() found child value=object(...)
09-16 14:40:26.460643  1  5 findChild() resultDocument=<{
"document" : {
"document" : {
"data" : {
"daq" : {
"event_builder" : {
"expected_fragments_per_event" : 2,
"first_fragment_receiver_rank" : 0,
"fragment_receiver_count" : 2,
"mpi_buffer_count" : 16,
"print_event_store_stats" : true,
"use_art" : true,
"verbose" : false
},
"max_fragment_size_words" : 2097152,
"metrics" : {
"evbFile" : {
"fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log",
"level" : 3,
"metricPluginType" : "file",
"uniquify" : true
}
}
},
"outputs" : {
"netMonOutput" : {
"SelectEvents" : {
"SelectEvents" : [
"pmod2",
"pmod3"
]
},
"module_type" : "NetMonOutput"
}
},
"physics" : {
"filters" : {
"prescaleMod2" : {
"module_type" : "NthEvent",
"nth" : 2
},
"prescaleMod3" : {
"module_type" : "NthEvent",
"nth" : 3
}
},
"my_output_modules" : [
"netMonOutput"
],
"pmod2" : [
"prescaleMod2"
],
"pmod3" : [
"prescaleMod3"
]
},
"process_name" : "DAQ",
"services" : {
"scheduler" : {
"fileMode" : "NOMERGE"
},
"user" : {
"NetMonTransportServiceInterface" : {
"data_receiver_count" : 1,
"first_data_receiver_rank" : 6,
"max_fragment_size_words" : 2097152,
"mpi_buffer_count" : 8,
"service_provider" : "NetMonTransportService"
}
}
},
"source" : {
"module_type" : "RawInput",
"resume_after_timeout" : true,
"waiting_time" : 900
}
},
"metadata" : {
"daq" : {
"type" : "table",
"comment" : " ",
"children" : {
"event_builder" : {
"type" : "table",
"comment" : " ",
"children" : {
"expected_fragments_per_event" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"first_fragment_receiver_rank" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"fragment_receiver_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"mpi_buffer_count" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"print_event_store_stats" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"use_art" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
},
"verbose" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
},
"max_fragment_size_words" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metrics" : {
"type" : "table",
"comment" : " ",
"children" : {
"evbFile" : {
"type" : "table",
"comment" : " ",
"children" : {
"fileName" : {
"type" : "string",
"comment" : " ",
"annotation" : "//demoe"
},
"level" : {
"type" : "number",
"comment" : " ",
"annotation" : " "
},
"metricPluginType" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"uniquify" : {
"type" : "bool",
"comment" : " ",
"annotation" : " "
}
}
}
}
}
}
},
"outputs" : {
"type" : "table",
"comment" : " ",
"children" : {
"netMonOutput" : {
"type" : "table",
"comment" : " ",
"children" : {
"SelectEvents" : {
"type" : "table",
"comment" : "#Failure 5 not a satom ",
"children" : {
"SelectEvents" : {
"type" : "sequence",
"comment" : "#Failure 5 not a satom ",
"annotation" : " "
}
}
},
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
}
}
}
}
},
"physics" : {
"type" : "table",
"comment" : " ",
"children" : {
"filters" : {
"type" : "table",
"comment" : " ",
"children" : {
"prescaleMod2" : {
"type" : "table",
"comment" : "#Failure 4 not a satom ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : "#//Success 5 right of satom"
},
"nth" : {
"type" : "number",
"comment" : "#//Success 5 right of satom",
"annotation" : " "
}
}
},
"prescaleMod3" : {
"type" : "table",
"comment" : " ",
"children" : {
"module_type" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"nth" : {
"type" : "number",
"comment" : " ",
"annotation" : "//#Success 4 right of satom"
}
}
}
}
},
"my_output_modules" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod2" : {
"type" : "sequence",
"comment" : " ",
"annotation" : " "
},
"pmod3" : {
"type" : "sequence",
"comment" : "#Failure 2 not a satom ",
"annotation" : " "
}
}
},
"process_name" : {
"type" : "string",
"comment" : " ",
"annotation" : " "
},
"services" : {
"type" : "table",
"comment" : " ",
"children" : {
"scheduler" : {
"type" : "table",
"comment" : " ",
"childre
09-16 14:40:26.460665  1  5 findChild() Find succeeded.
09-16 14:40:26.511540  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:26.511556  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:26.511592  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.511999  1  5 StorageProvider::FileSystemDB::index::addDocument() begin
09-16 14:40:26.512011  1  5 StorageProvider::FileSystemDB::index::addDocument() args document=<{
        "document" : {
            "data" : {
                "daq" : {
                    "event_builder" : {
                        "expected_fragments_per_event" : 2, 
                        "first_fragment_receiver_rank" : 0, 
                        "fragment_receiver_count" : 2, 
                        "mpi_buffer_count" : 16, 
                        "print_event_store_stats" : true, 
                        "use_art" : true, 
                        "verbose" : false
                    }, 
                    "max_fragment_size_words" : 2097152, 
                    "metrics" : {
                        "evbFile" : {
                            "fileName" : "/tmp/eventbuilder/evb_%UID%_metrics.log", 
                            "level" : 3, 
                            "metricPluginType" : "file", 
                            "uniquify" : true
                        }
                    }
                }, 
                "outputs" : {
                    "netMonOutput" : {
                        "SelectEvents" : {
                            "SelectEvents" : [
                                "pmod2", 
                                "pmod3"
                            ]
                        }, 
                        "module_type" : "NetMonOutput"
                    }
                }, 
                "physics" : {
                    "filters" : {
                        "prescaleMod2" : {
                            "module_type" : "NthEvent", 
                            "nth" : 2
                        }, 
                        "prescaleMod3" : {
                            "module_type" : "NthEvent", 
                            "nth" : 3
                        }
                    }, 
                    "my_output_modules" : [
                        "netMonOutput"
                    ], 
                    "pmod2" : [
                        "prescaleMod2"
                    ], 
                    "pmod3" : [
                        "prescaleMod3"
                    ]
                }, 
                "process_name" : "DAQ", 
                "services" : {
                    "scheduler" : {
                        "fileMode" : "NOMERGE"
                    }, 
                    "user" : {
                        "NetMonTransportServiceInterface" : {
                            "data_receiver_count" : 1, 
                            "first_data_receiver_rank" : 6, 
                            "max_fragment_size_words" : 2097152, 
                            "mpi_buffer_count" : 8, 
                            "service_provider" : "NetMonTransportService"
                        }
                    }
                }, 
                "source" : {
                    "module_type" : "RawInput", 
                    "resume_after_timeout" : true, 
                    "waiting_time" : 900
                }
            }, 
            "metadata" : {
                "daq" : {
                    "type" : "table", 
                    "comment" : " ", 
                    "children" : {
                        "event_builder" : {
                            "type" : "table", 
                            "comment" : " ", 
                            "children" : {
                                "expected_fragments_per_event" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "first_fragment_receiver_rank" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                                    "annotation" : " "
                                }, 
                                "fragment_receiver_count" : {
                                    "type" : "number", 
                                    "comment" : " ", 
                        
09-16 14:40:26.512064  1  5 StorageProvider::FileSystemDB::index::addDocument() args ouid=<3415e89e52e04aa9ac11c665>.
09-16 14:40:26.522364  1  5 StorageProvider::FileSystemDB::index::addDocument() found 4 keys.
09-16 14:40:26.522407  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<document>
09-16 14:40:26.522411  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<comments>
09-16 14:40:26.522414  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<origin>
09-16 14:40:26.522417  1  5 StorageProvider::FileSystemDB::index::addDocument() key=<_id>
09-16 14:40:26.522433  1  5 Exception in StorageProvider::FileSystemDB::index::addDocument() Dynamic exception type: std::out_of_range
std::exception::what: Key not found; key=version
09-16 14:40:26.522511  1  4 StorageProvider::FileSystemDB Failed updating SearchIndex.
09-16 14:40:26.522517  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:26.522784  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.522908  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
09-16 14:40:26.522969  1  3 StorageProvider::FileSystemDB::load() begin
09-16 14:40:26.522975  1  3 StorageProvider::FileSystemDB::load() args search=<{"filter":{"_id" : { "$in" : [ { "$oid" : "c20bb4bb72844e779acf1a7b"},{ "$oid" : "f438e49fb66e418790512b4e"},{ "$oid" : "0453839f4000451d8cf7c9ea"},{ "$oid" : "2bdf8d9419a7404ba4df3674"},{ "$oid" : "6c0c379f93574aeebed4e6d6"},{ "$oid" : "565db615a0d4448e8a96c63c"},{ "$oid" : "1bf942172528449fa8eda9a8"},{ "$oid" : "9483d3fc4df14ca5afd4467a"},{ "$oid" : "8ea1d2722bfc490ca1d83d00"},{ "$oid" : "3415e89e52e04aa9ac11c665"}]} }, "collection":"testJSON_V001"}>
09-16 14:40:26.523149  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "c20bb4bb72844e779acf1a7b"
                }, 
                {
                    "$oid" : "f438e49fb66e418790512b4e"
                }, 
                {
                    "$oid" : "0453839f4000451d8cf7c9ea"
                }, 
                {
                    "$oid" : "2bdf8d9419a7404ba4df3674"
                }, 
                {
                    "$oid" : "6c0c379f93574aeebed4e6d6"
                }, 
                {
                    "$oid" : "565db615a0d4448e8a96c63c"
                }, 
                {
                    "$oid" : "1bf942172528449fa8eda9a8"
                }, 
                {
                    "$oid" : "9483d3fc4df14ca5afd4467a"
                }, 
                {
                    "$oid" : "8ea1d2722bfc490ca1d83d00"
                }, 
                {
                    "$oid" : "3415e89e52e04aa9ac11c665"
                }
            ]
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:26.523156  1  5 findChild() args  path=<collection>
09-16 14:40:26.523968  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.524516  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "c20bb4bb72844e779acf1a7b"
},
{
"$oid" : "f438e49fb66e418790512b4e"
},
{
"$oid" : "0453839f4000451d8cf7c9ea"
},
{
"$oid" : "2bdf8d9419a7404ba4df3674"
},
{
"$oid" : "6c0c379f93574aeebed4e6d6"
},
{
"$oid" : "565db615a0d4448e8a96c63c"
},
{
"$oid" : "1bf942172528449fa8eda9a8"
},
{
"$oid" : "9483d3fc4df14ca5afd4467a"
},
{
"$oid" : "8ea1d2722bfc490ca1d83d00"
},
{
"$oid" : "3415e89e52e04aa9ac11c665"
}
]
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.524531  1  5 findChild() found child value=std::string(testJSON_V001)
09-16 14:40:26.524602  1  5 findChild() resultDocument=<{
"collection" : "testJSON_V001"
}>
09-16 14:40:26.524608  1  5 findChild() Find succeeded.
09-16 14:40:26.525498  1  5 findChild() begin _json_buffer=<{
    "filter" : {
        "_id" : {
            "$in" : [
                {
                    "$oid" : "c20bb4bb72844e779acf1a7b"
                }, 
                {
                    "$oid" : "f438e49fb66e418790512b4e"
                }, 
                {
                    "$oid" : "0453839f4000451d8cf7c9ea"
                }, 
                {
                    "$oid" : "2bdf8d9419a7404ba4df3674"
                }, 
                {
                    "$oid" : "6c0c379f93574aeebed4e6d6"
                }, 
                {
                    "$oid" : "565db615a0d4448e8a96c63c"
                }, 
                {
                    "$oid" : "1bf942172528449fa8eda9a8"
                }, 
                {
                    "$oid" : "9483d3fc4df14ca5afd4467a"
                }, 
                {
                    "$oid" : "8ea1d2722bfc490ca1d83d00"
                }, 
                {
                    "$oid" : "3415e89e52e04aa9ac11c665"
                }
            ]
        }
    }, 
    "collection" : "testJSON_V001"
}>
09-16 14:40:26.525506  1  5 findChild() args  path=<filter>
09-16 14:40:26.526275  1  5 findChild() recurse() args currentDepth=0
09-16 14:40:26.526821  1  5 findChild() recurse() args currentView=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "c20bb4bb72844e779acf1a7b"
},
{
"$oid" : "f438e49fb66e418790512b4e"
},
{
"$oid" : "0453839f4000451d8cf7c9ea"
},
{
"$oid" : "2bdf8d9419a7404ba4df3674"
},
{
"$oid" : "6c0c379f93574aeebed4e6d6"
},
{
"$oid" : "565db615a0d4448e8a96c63c"
},
{
"$oid" : "1bf942172528449fa8eda9a8"
},
{
"$oid" : "9483d3fc4df14ca5afd4467a"
},
{
"$oid" : "8ea1d2722bfc490ca1d83d00"
},
{
"$oid" : "3415e89e52e04aa9ac11c665"
}
]
}
},
"collection" : "testJSON_V001"
}>
09-16 14:40:26.526849  1  5 findChild() found child value=object(...)
09-16 14:40:26.527367  1  5 findChild() resultDocument=<{
"filter" : {
"_id" : {
"$in" : [
{
"$oid" : "c20bb4bb72844e779acf1a7b"
},
{
"$oid" : "f438e49fb66e418790512b4e"
},
{
"$oid" : "0453839f4000451d8cf7c9ea"
},
{
"$oid" : "2bdf8d9419a7404ba4df3674"
},
{
"$oid" : "6c0c379f93574aeebed4e6d6"
},
{
"$oid" : "565db615a0d4448e8a96c63c"
},
{
"$oid" : "1bf942172528449fa8eda9a8"
},
{
"$oid" : "9483d3fc4df14ca5afd4467a"
},
{
"$oid" : "8ea1d2722bfc490ca1d83d00"
},
{
"$oid" : "3415e89e52e04aa9ac11c665"
}
]
}
}
}>
09-16 14:40:26.527374  1  5 findChild() Find succeeded.
09-16 14:40:26.530845  1  3 StorageProvider::FileSystemDB::load() collection_path=<file:///home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>.
09-16 14:40:26.530853  1 11 StorageProvider::FileSystemDB mkdir dir=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.530862  1 11 StorageProvider::FileSystemDB Directory exists, checking permissions; path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/>
09-16 14:40:26.530880  1  3 StorageProvider::FileSystemDB::index::_open() begin
09-16 14:40:26.530884  1  3 StorageProvider::FileSystemDB::index::_open() args index_path=</home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/index.json>.
09-16 14:40:26.530908  1  3 StorageProvider::FileSystemDB::index::_open() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.531198  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() begin
09-16 14:40:26.531206  1  2 StorageProvider::FileSystemDB::index::findDocumentIDs() args search=<{
        "_id" : {
            "$in" : [
                {
                    "$oid" : "c20bb4bb72844e779acf1a7b"
                }, 
                {
                    "$oid" : "f438e49fb66e418790512b4e"
                }, 
                {
                    "$oid" : "0453839f4000451d8cf7c9ea"
                }, 
                {
                    "$oid" : "2bdf8d9419a7404ba4df3674"
                }, 
                {
                    "$oid" : "6c0c379f93574aeebed4e6d6"
                }, 
                {
                    "$oid" : "565db615a0d4448e8a96c63c"
                }, 
                {
                    "$oid" : "1bf942172528449fa8eda9a8"
                }, 
                {
                    "$oid" : "9483d3fc4df14ca5afd4467a"
                }, 
                {
                    "$oid" : "8ea1d2722bfc490ca1d83d00"
                }, 
                {
                    "$oid" : "3415e89e52e04aa9ac11c665"
                }
            ]
        }
    }>.
09-16 14:40:26.531870  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() found 1 search criteria.
09-16 14:40:26.532412  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() begin
09-16 14:40:26.532421  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() args objectid=<{
"$in" : [
{
"$oid" : "c20bb4bb72844e779acf1a7b"
},
{
"$oid" : "f438e49fb66e418790512b4e"
},
{
"$oid" : "0453839f4000451d8cf7c9ea"
},
{
"$oid" : "2bdf8d9419a7404ba4df3674"
},
{
"$oid" : "6c0c379f93574aeebed4e6d6"
},
{
"$oid" : "565db615a0d4448e8a96c63c"
},
{
"$oid" : "1bf942172528449fa8eda9a8"
},
{
"$oid" : "9483d3fc4df14ca5afd4467a"
},
{
"$oid" : "8ea1d2722bfc490ca1d83d00"
},
{
"$oid" : "3415e89e52e04aa9ac11c665"
}
]
}>.
09-16 14:40:26.533040  1  5 StorageProvider::FileSystemDB::index::_matchObjectIds() found 10 ouids.
09-16 14:40:26.533068  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<c20bb4bb72844e779acf1a7b>.
09-16 14:40:26.533075  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<f438e49fb66e418790512b4e>.
09-16 14:40:26.533079  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<0453839f4000451d8cf7c9ea>.
09-16 14:40:26.533084  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<2bdf8d9419a7404ba4df3674>.
09-16 14:40:26.533087  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<6c0c379f93574aeebed4e6d6>.
09-16 14:40:26.533091  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<565db615a0d4448e8a96c63c>.
09-16 14:40:26.533095  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<1bf942172528449fa8eda9a8>.
09-16 14:40:26.533099  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<9483d3fc4df14ca5afd4467a>.
09-16 14:40:26.533102  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<8ea1d2722bfc490ca1d83d00>.
09-16 14:40:26.533107  1 16 StorageProvider::FileSystemDB::index::_matchObjectIds() found ouid=<3415e89e52e04aa9ac11c665>.
09-16 14:40:26.533110  1 15 StorageProvider::FileSystemDB::index::_matchObjectIds() Found 10 documents
09-16 14:40:26.533254  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() criteria_count=0, max_count=1, found 10 documents.
09-16 14:40:26.533272  1  5 StorageProvider::FileSystemDB::index::findDocumentIDs() returning 10 documents.
09-16 14:40:26.533287  1  3 StorageProvider::FileSystemDB::load() search returned 10 documents.
09-16 14:40:26.533352  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/0453839f4000451d8cf7c9ea.json>.
09-16 14:40:26.534078  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/1bf942172528449fa8eda9a8.json>.
09-16 14:40:26.534772  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/2bdf8d9419a7404ba4df3674.json>.
09-16 14:40:26.535463  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/3415e89e52e04aa9ac11c665.json>.
09-16 14:40:26.536148  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/565db615a0d4448e8a96c63c.json>.
09-16 14:40:26.536853  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/6c0c379f93574aeebed4e6d6.json>.
09-16 14:40:26.537550  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/8ea1d2722bfc490ca1d83d00.json>.
09-16 14:40:26.538244  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/9483d3fc4df14ca5afd4467a.json>.
09-16 14:40:26.538939  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/c20bb4bb72844e779acf1a7b.json>.
09-16 14:40:26.539643  1  3 StorageProvider::FileSystemDB::load() reading document </home/lukhanin/scratch/current/artdaq-demo-base/build_artdaq-utilities-database/databases/filesystemdb/testJSON_V001/f438e49fb66e418790512b4e.json>.
09-16 14:40:26.540335  1  4 StorageProvider::FileSystemDB::index::_close() begin
09-16 14:40:26.540523  1  4 StorageProvider::FileSystemDB::index::_close() json=<{
"version" : {
"\n AA \"" : [
"f2529e156a464608b7188c7d"
],
"version418" : [
"ea36f53eb77a4e9e9f5f94a3"
]
},
"configurations.name" : {

},
"configurable_entity.name" : {

}
}>
09-16 14:40:26.540578  1  4 StorageProvider::FileSystemDB::index::_close() Closed SearchIndex.
Running test:<search2>
Search criteria {"filter":{"_id" : { "$in" : [ { "$oid" : "c20bb4bb72844e779acf1a7b"},{ "$oid" : "f438e49fb66e418790512b4e"},{ "$oid" : "0453839f4000451d8cf7c9ea"},{ "$oid" : "2bdf8d9419a7404ba4df3674"},{ "$oid" : "6c0c379f93574aeebed4e6d6"},{ "$oid" : "565db615a0d4448e8a96c63c"},{ "$oid" : "1bf942172528449fa8eda9a8"},{ "$oid" : "9483d3fc4df14ca5afd4467a"},{ "$oid" : "8ea1d2722bfc490ca1d83d00"},{ "$oid" : "3415e89e52e04aa9ac11c665"}]} }, "collection":"testJSON_V001"}
<end of output>
Test time =   2.88 sec
----------------------------------------------------------
Test Passed.
"FileSystemJson_search2_004_t" end time: Sep 16 14:40 CDT
"FileSystemJson_search2_004_t" time elapsed: 00:00:02
----------------------------------------------------------

End testing: Sep 16 14:40 CDT
